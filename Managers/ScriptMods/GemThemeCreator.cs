// ----------------------------------------------------------------------------
//    W T D E       L A U N C H E R       V 3
//       S C R I P T       M O D       E D I T O R S
//          G E M       T H E M E       C R E A T O R
//
//    Makes custom gem color palette script mods. Requires GHSDK to use.
// ----------------------------------------------------------------------------
// V3 launcher imports.
using WTDE_Launcher_V3.Core;
using WTDE_Launcher_V3.IO;

using System;
using System.IO;
using System.Diagnostics;
using System.Windows.Forms;
using MadMilkman.Ini;
using System.Drawing;

namespace WTDE_Launcher_V3.Managers.ScriptMods {
    /// <summary>
    ///  Makes custom gem color palette script mods. Requires GHSDK to use.
    /// </summary>
    public partial class GemThemeCreator : Form {
        /// <summary>
        ///  Makes custom gem color palette script mods. Requires GHSDK to use.
        /// </summary>
        public GemThemeCreator() {
            InitializeComponent();
            SDKPath.Text = GetSDKPath();
        }

        public string GetSDKPath() {
            string sdkPath = INIFunctions.GetINIValue("Launcher", "SDKPath", ".");

            if (File.Exists(Path.Combine(sdkPath, "sdk.js"))) return sdkPath;

            OpenFileDialog ofd = new OpenFileDialog();
            ofd.Title = "Select Guitar Hero SDK Folder";
            ofd.Filter = "Guitar Hero SDK Script|*sdk.js;*sdk.bat";
            ofd.Multiselect = false;
            ofd.ShowDialog();

            string finalPath = ofd.FileName;
            if (finalPath != "") {
                finalPath = Path.GetDirectoryName(ofd.FileName);
                INIFunctions.SaveINIValue("Launcher", "SDKPath", finalPath);
            }

            return (finalPath != "") ? finalPath : ".";
        }

        public void CompileScript() {
            // Is this SDK folder even valid?
            string sdkPath = SDKPath.Text;
            if (Directory.Exists(sdkPath) && File.Exists(Path.Combine(sdkPath, "sdk.js"))) {
                // Write the script mod itself!
                string txtROQModPath = BuildScriptMod();

                Console.WriteLine($"ROQ mod path: {txtROQModPath}");

                // Command to be passed to the SDK.
                // Command format: node sdk.js compile <in_path>
                // THIS COMPILES TO THE WORKING DIRECTORY
                string cmd = $"/C node \"{sdkPath}\" compile \"{Path.GetFullPath(txtROQModPath)}\"";
                Process.Start("cmd.exe", cmd);
            }
        }

        public void SaveGemColors() {
            SaveFileDialog sfd = new SaveFileDialog();
            sfd.Title = "Save Color Palette";
            sfd.Filter = "Color Palette Templates|*.decolors";

            sfd.ShowDialog();

            if (sfd.FileName != "") {
                using (StreamWriter sw = new StreamWriter(sfd.FileName, false)) {
                    sw.WriteLine("; ------------------------------");
                    sw.WriteLine($";  {ThemeName.Text} Gem Colors");
                    sw.WriteLine(";    Auto generated by WTDE Launcher V3");
                    sw.WriteLine("; ------------------------------\n");

                    sw.Write("[Gems]\n" +
                            $"NoteGreen={NoteGreen.BackColor.R}, {NoteGreen.BackColor.G}, {NoteGreen.BackColor.B}\n" +
                            $"IntensityG={NoteGreenIntensity.Value}\n" +
                            $"NoteRed={NoteRed.BackColor.R}, {NoteRed.BackColor.G}, {NoteRed.BackColor.B}\n" +
                            $"IntensityR={NoteRedIntensity.Value}\n" +
                            $"NoteYellow={NoteYellow.BackColor.R}, {NoteYellow.BackColor.G}, {NoteYellow.BackColor.B}\n" +
                            $"IntensityY={NoteYellowIntensity.Value}\n" +
                            $"NoteBlue={NoteBlue.BackColor.R}, {NoteBlue.BackColor.G}, {NoteBlue.BackColor.B}\n" +
                            $"IntensityB={NoteBlueIntensity.Value}\n" +
                            $"NoteOrange={NoteOrange.BackColor.R}, {NoteOrange.BackColor.G}, {NoteOrange.BackColor.B}\n" +
                            $"IntensityO={NoteOrangeIntensity.Value}\n" +
                            $"NoteKick={NoteKick.BackColor.R}, {NoteKick.BackColor.G}, {NoteKick.BackColor.B}\n" +
                            $"IntensityK={NoteKickIntensity.Value}\n" +
                            $"NoteGreenBase={NoteGreenBase.BackColor.R}, {NoteGreenBase.BackColor.G}, {NoteGreenBase.BackColor.B}\n" +
                            $"IntensityGB={NoteGreenBaseIntensity.Value}\n" +
                            $"NoteRedBase={NoteRedBase.BackColor.R}, {NoteRedBase.BackColor.G}, {NoteRedBase.BackColor.B}\n" +
                            $"IntensityRB={NoteRedBaseIntensity.Value}\n" +
                            $"NoteYellowBase={NoteYellowBase.BackColor.R}, {NoteYellowBase.BackColor.G}, {NoteYellowBase.BackColor.B}\n" +
                            $"IntensityYB={NoteYellowBaseIntensity.Value}\n" +
                            $"NoteBlueBase={NoteBlueBase.BackColor.R}, {NoteBlueBase.BackColor.G}, {NoteBlueBase.BackColor.B}\n" +
                            $"IntensityBB={NoteBlueBaseIntensity.Value}\n" +
                            $"NoteOrangeBase={NoteOrangeBase.BackColor.R}, {NoteOrangeBase.BackColor.G}, {NoteOrangeBase.BackColor.B}\n" +
                            $"IntensityOB={NoteOrangeBaseIntensity.Value}\n" +
                            $"NoteKickBase={NoteKickBase.BackColor.R}, {NoteKickBase.BackColor.G}, {NoteKickBase.BackColor.B}\n" +
                            $"IntensityKB={NoteKickBaseIntensity.Value}\n\n" +

                            // ------------------------------

                             "[Targets]\n" +
                            $"TargetGreenDark={NoteGreenNowD.BackColor.R}, {NoteGreenNowD.BackColor.G}, {NoteGreenNowD.BackColor.B}\n" +
                            $"IntensityTGD={NoteGreenNowDIntensity.Value}\n" +
                            $"TargetGreenBrite={NoteGreenNowB.BackColor.R}, {NoteGreenNowB.BackColor.G}, {NoteGreenNowB.BackColor.B}\n" +
                            $"IntensityTGB={NoteGreenNowBIntensity.Value}\n" +
                            $"TargetRedDark={NoteRedNowD.BackColor.R}, {NoteRedNowD.BackColor.G}, {NoteRedNowD.BackColor.B}\n" +
                            $"IntensityTRD={NoteRedNowDIntensity.Value}\n" +
                            $"TargetRedBrite={NoteRedNowB.BackColor.R}, {NoteRedNowB.BackColor.G}, {NoteRedNowB.BackColor.B}\n" +
                            $"IntensityTRB={NoteRedNowBIntensity.Value}\n" +
                            $"TargetYellowDark={NoteYellowNowD.BackColor.R}, {NoteYellowNowD.BackColor.G}, {NoteYellowNowD.BackColor.B}\n" +
                            $"IntensityTYD={NoteYellowNowDIntensity.Value}\n" +
                            $"TargetYellowBrite={NoteYellowNowB.BackColor.R}, {NoteYellowNowB.BackColor.G}, {NoteYellowNowB.BackColor.B}\n" +
                            $"IntensityTYB={NoteYellowNowBIntensity.Value}\n" +
                            $"TargetBlueDark={NoteBlueNowD.BackColor.R}, {NoteBlueNowD.BackColor.G}, {NoteBlueNowD.BackColor.B}\n" +
                            $"IntensityTBD={NoteBlueNowDIntensity.Value}\n" +
                            $"TargetBlueBrite={NoteBlueNowB.BackColor.R}, {NoteBlueNowB.BackColor.G}, {NoteBlueNowB.BackColor.B}\n" +
                            $"IntensityTBB={NoteBlueNowBIntensity.Value}\n" +
                            $"TargetOrangeDark={NoteOrangeNowD.BackColor.R}, {NoteOrangeNowD.BackColor.G}, {NoteOrangeNowD.BackColor.B}\n" +
                            $"IntensityTOD={NoteOrangeNowDIntensity.Value}\n" +
                            $"TargetOrangeBrite={NoteOrangeNowB.BackColor.R}, {NoteOrangeNowB.BackColor.G}, {NoteOrangeNowB.BackColor.B}\n" +
                            $"IntensityTOB={NoteOrangeNowBIntensity.Value}\n" +
                            $"TargetPurpleDark={NotePurpleNowD.BackColor.R}, {NotePurpleNowD.BackColor.G}, {NotePurpleNowD.BackColor.B}\n" +
                            $"IntensityTPD={NotePurpleNowDIntensity.Value}\n" +
                            $"TargetPurpleBrite={NotePurpleNowB.BackColor.R}, {NotePurpleNowB.BackColor.G}, {NotePurpleNowB.BackColor.B}\n" +
                            $"IntensityTPB={NotePurpleNowBIntensity.Value}\n\n" +

                            // ------------------------------

                             "[Data]\n" +
                            $"Name={ThemeName.Text}\n" +
                            $"QBKey={ThemeQBKey.Text}"
                    );
                }
            }
        }

        public Color ColorFromString(string str) {
            string[] splitString = str.Replace(" ", "").Split(',');
            return Color.FromArgb(255, byte.Parse(splitString[0]), byte.Parse(splitString[1]), byte.Parse(splitString[2]));
        }

        public void LoadGemColors() { 
            OpenFileDialog ofd = new OpenFileDialog();
            ofd.Title = "Select Gem Color Palette Profile";
            ofd.Filter = "Color Palette Templates|*.decolors";
            ofd.Multiselect = false;

            ofd.ShowDialog();

            if (ofd.FileName != "") {
                IniFile file = new IniFile();
                file.Load(ofd.FileName);

                if (file.Sections.Contains("Gems") && file.Sections.Contains("Targets") && file.Sections.Contains("Data")) {
                    try {
                        ThemeName.Text = file.Sections["Data"].Keys["Name"].Value;
                        ThemeQBKey.Text = file.Sections["Data"].Keys["QBKey"].Value;

                        // ---------------------------------------------
                        // GEM COLOR VALUES
                        // ---------------------------------------------
                        NoteGreen.BackColor = ColorFromString(file.Sections["Gems"].Keys["NoteGreen"].Value);
                        NoteGreenBase.BackColor = ColorFromString(file.Sections["Gems"].Keys["NoteGreenBase"].Value);

                        NoteRed.BackColor = ColorFromString(file.Sections["Gems"].Keys["NoteRed"].Value);
                        NoteRedBase.BackColor = ColorFromString(file.Sections["Gems"].Keys["NoteRedBase"].Value);

                        NoteYellow.BackColor = ColorFromString(file.Sections["Gems"].Keys["NoteYellow"].Value);
                        NoteYellowBase.BackColor = ColorFromString(file.Sections["Gems"].Keys["NoteYellowBase"].Value);

                        NoteBlue.BackColor = ColorFromString(file.Sections["Gems"].Keys["NoteBlue"].Value);
                        NoteBlueBase.BackColor = ColorFromString(file.Sections["Gems"].Keys["NoteBlueBase"].Value);

                        NoteOrange.BackColor = ColorFromString(file.Sections["Gems"].Keys["NoteOrange"].Value);
                        NoteOrangeBase.BackColor = ColorFromString(file.Sections["Gems"].Keys["NoteOrangeBase"].Value);

                        NoteKick.BackColor = ColorFromString(file.Sections["Gems"].Keys["NoteKick"].Value);
                        NoteKickBase.BackColor = ColorFromString(file.Sections["Gems"].Keys["NoteKickBase"].Value);

                        // ---------------------------------------------
                        // TARGET COLOR VALUES
                        // ---------------------------------------------
                        NoteGreenNowD.BackColor = ColorFromString(file.Sections["Targets"].Keys["TargetGreenDark"].Value);
                        NoteGreenNowB.BackColor = ColorFromString(file.Sections["Targets"].Keys["TargetGreenBrite"].Value);

                        NoteRedNowD.BackColor = ColorFromString(file.Sections["Targets"].Keys["TargetRedDark"].Value);
                        NoteRedNowB.BackColor = ColorFromString(file.Sections["Targets"].Keys["TargetRedBrite"].Value);

                        NoteYellowNowD.BackColor = ColorFromString(file.Sections["Targets"].Keys["TargetYellowDark"].Value);
                        NoteYellowNowB.BackColor = ColorFromString(file.Sections["Targets"].Keys["TargetYellowBrite"].Value);

                        NoteBlueNowD.BackColor = ColorFromString(file.Sections["Targets"].Keys["TargetBlueDark"].Value);
                        NoteBlueNowB.BackColor = ColorFromString(file.Sections["Targets"].Keys["TargetBlueBrite"].Value);

                        NoteOrangeNowD.BackColor = ColorFromString(file.Sections["Targets"].Keys["TargetOrangeDark"].Value);
                        NoteOrangeNowB.BackColor = ColorFromString(file.Sections["Targets"].Keys["TargetOrangeBrite"].Value);

                        NotePurpleNowD.BackColor = ColorFromString(file.Sections["Targets"].Keys["TargetPurpleDark"].Value);
                        NotePurpleNowB.BackColor = ColorFromString(file.Sections["Targets"].Keys["TargetPurpleBrite"].Value);

                        // ---------------------------------------------
                        // INTENSITY VALUES
                        // ---------------------------------------------

                        // -- GEM INTENSITY SLIDERS
                        NoteGreenIntensity.Value = int.Parse(file.Sections["Gems"].Keys["IntensityG"].Value);
                        NoteRedIntensity.Value = int.Parse(file.Sections["Gems"].Keys["IntensityR"].Value);
                        NoteYellowIntensity.Value = int.Parse(file.Sections["Gems"].Keys["IntensityY"].Value);
                        NoteBlueIntensity.Value = int.Parse(file.Sections["Gems"].Keys["IntensityB"].Value);
                        NoteOrangeIntensity.Value = int.Parse(file.Sections["Gems"].Keys["IntensityO"].Value);
                        NoteKickIntensity.Value = int.Parse(file.Sections["Gems"].Keys["IntensityK"].Value);

                        NoteGreenBaseIntensity.Value = int.Parse(file.Sections["Gems"].Keys["IntensityGB"].Value);
                        NoteRedBaseIntensity.Value = int.Parse(file.Sections["Gems"].Keys["IntensityRB"].Value);
                        NoteYellowBaseIntensity.Value = int.Parse(file.Sections["Gems"].Keys["IntensityYB"].Value);
                        NoteBlueBaseIntensity.Value = int.Parse(file.Sections["Gems"].Keys["IntensityBB"].Value);
                        NoteOrangeBaseIntensity.Value = int.Parse(file.Sections["Gems"].Keys["IntensityOB"].Value);
                        NoteKickBaseIntensity.Value = int.Parse(file.Sections["Gems"].Keys["IntensityKB"].Value);

                        // -- TARGET INTENSITY SLIDERS
                        NoteGreenNowDIntensity.Value = int.Parse(file.Sections["Targets"].Keys["IntensityTGD"].Value);
                        NoteRedNowDIntensity.Value = int.Parse(file.Sections["Targets"].Keys["IntensityTRD"].Value);
                        NoteYellowNowDIntensity.Value = int.Parse(file.Sections["Targets"].Keys["IntensityTYD"].Value);
                        NoteBlueNowDIntensity.Value = int.Parse(file.Sections["Targets"].Keys["IntensityTBD"].Value);
                        NoteOrangeNowDIntensity.Value = int.Parse(file.Sections["Targets"].Keys["IntensityTOD"].Value);
                        NotePurpleNowDIntensity.Value = int.Parse(file.Sections["Targets"].Keys["IntensityTPD"].Value);

                        NoteGreenNowBIntensity.Value = int.Parse(file.Sections["Targets"].Keys["IntensityTGB"].Value);
                        NoteRedNowBIntensity.Value = int.Parse(file.Sections["Targets"].Keys["IntensityTRB"].Value);
                        NoteYellowNowBIntensity.Value = int.Parse(file.Sections["Targets"].Keys["IntensityTYB"].Value);
                        NoteBlueNowBIntensity.Value = int.Parse(file.Sections["Targets"].Keys["IntensityTBB"].Value);
                        NoteOrangeNowBIntensity.Value = int.Parse(file.Sections["Targets"].Keys["IntensityTOB"].Value);
                        NotePurpleNowBIntensity.Value = int.Parse(file.Sections["Targets"].Keys["IntensityTPB"].Value);
                    } catch (Exception exc) {
                        V3LauncherCore.AddDebugEntry($"Issue importing gem color profile: {exc.Message}", "Gem Theme Designer");
                    }
                }
            }
        }

        public string BuildScriptMod() {
            string strippedName = ThemeName.Text.Replace('\'', ' ').Replace(" ", "");
            string outPath = $"{V3LauncherCore.GetUpdaterINIDirectory()}/DATA/MODS/{strippedName}";

            if (!Directory.Exists(outPath)) Directory.CreateDirectory(outPath);

            // Write our Mod.ini file!
            using (StreamWriter sw = new StreamWriter(Path.Combine(outPath, "Mod.ini"))) {
                string outINIInfo =  "[ModInfo]\n" +
                                    $"Name={ThemeName.Text}\n" +
                                    $"Description=Adds the {ThemeName.Text} gem theme (made with V3 launcher color creator)\n" +
                                    $"Author=V3 WTDE Launcher, GHSDK\n" +
                                    $"Version=1.0";

                sw.Write(outINIInfo);
            }

            // Now write the script mod!
            using (StreamWriter sw = new StreamWriter(Path.Combine(outPath, $"{strippedName}.txt"))) {
                // -- COMMENTS AT START
                sw.WriteLine("// ----------------------------------");
                sw.WriteLine($"//   CUSTOM GEM THEME: {ThemeName.Text.ToUpper()}");
                sw.WriteLine("//     Auto generated by WTDE Launcher V3");
                sw.WriteLine("// ----------------------------------");

                // -- SCRIPT HEADER AND START STRUCT ARRAY
                sw.Write(AddStructHeader(ThemeStructName.Text));

                // -- NORMAL COLORS
                sw.Write(AddColorStruct("col_green", NoteGreen, NoteGreenIntensity));
                sw.Write(AddColorStruct("col_red", NoteRed, NoteRedIntensity));
                sw.Write(AddColorStruct("col_yellow", NoteYellow, NoteYellowIntensity));
                sw.Write(AddColorStruct("col_blue", NoteBlue, NoteBlueIntensity));
                sw.Write(AddColorStruct("col_orange", NoteOrange, NoteOrangeIntensity));
                sw.Write(AddColorStruct("col_purple", NoteKick, NoteKickIntensity));

                // -- NOTE BASE COLORS
                sw.Write(AddColorStruct("col_base_green", NoteGreenBase, NoteGreenBaseIntensity));
                sw.Write(AddColorStruct("col_base_red", NoteRedBase, NoteRedBaseIntensity));
                sw.Write(AddColorStruct("col_base_yellow", NoteYellowBase, NoteYellowBaseIntensity));
                sw.Write(AddColorStruct("col_base_blue", NoteBlueBase, NoteBlueBaseIntensity));
                sw.Write(AddColorStruct("col_base_orange", NoteOrangeBase, NoteOrangeBaseIntensity));
                sw.Write(AddColorStruct("col_base_purple", NoteKickBase, NoteKickBaseIntensity));

                // -- TARGET COLORS (NOT HELD)
                sw.Write(AddColorStruct("col_now_green_dark", NoteGreenNowD, NoteGreenNowDIntensity));
                sw.Write(AddColorStruct("col_now_red_dark", NoteRedNowD, NoteRedNowDIntensity));
                sw.Write(AddColorStruct("col_now_yellow_dark", NoteYellowNowD, NoteYellowNowDIntensity));
                sw.Write(AddColorStruct("col_now_blue_dark", NoteBlueNowD, NoteBlueNowDIntensity));
                sw.Write(AddColorStruct("col_now_orange_dark", NoteOrangeNowD, NoteOrangeNowDIntensity));
                sw.Write(AddColorStruct("col_now_purple_dark", NotePurpleNowD, NotePurpleNowDIntensity));

                // -- TARGET COLORS (HELD DOWN)
                sw.Write(AddColorStruct("col_now_green_brite", NoteGreenNowB, NoteGreenNowBIntensity));
                sw.Write(AddColorStruct("col_now_red_brite", NoteRedNowB, NoteRedNowBIntensity));
                sw.Write(AddColorStruct("col_now_yellow_brite", NoteYellowNowB, NoteYellowNowBIntensity));
                sw.Write(AddColorStruct("col_now_blue_brite", NoteBlueNowB, NoteBlueNowBIntensity));
                sw.Write(AddColorStruct("col_now_orange_brite", NoteOrangeNowB, NoteOrangeNowBIntensity));
                sw.Write(AddColorStruct("col_now_purple_brite", NotePurpleNowB, NotePurpleNowBIntensity));

                // -- END STRUCT ARRAY
                sw.Write(AddEndOfStruct());

                // -- ADD CALL FUNCTION
                sw.Write(InsertGemThemeScript(strippedName));
            }

            return Path.Combine(outPath, $"{strippedName}.txt");
        }

        public string AddStructHeader(string themeName) {
            return $"Unknown [GHWT_HEADER]\n\nSectionArray {themeName.Replace(" ", "_")}\n{{\n    ArrayStruct\n    [\n";
        }

        public string AddEndOfStruct() {
            return "    ]\n}\n\n";
        }

        public string AddColorStruct(string name, Label main, TrackBar intensity) {
            return $"        StructHeader\n" +
                   $"        {{\n" +
                   $"            StructQBKey element = {name}\n" +
                   $"            StructArray Color\n" +
                   $"            {{\n" +
                   $"                ArrayFloat\n" +
                   $"                [\n" +
                   $"                    {((main.BackColor.R / 255M) * (intensity.Value / 255M)):0.000000}, " +
                   $"{((main.BackColor.G / 255M) * (intensity.Value / 255M)):0.000000}, " +
                   $"{((main.BackColor.B / 255M) * (intensity.Value / 255M)):0.000000}, 1.0\n" +
                   $"                ]\n" +
                   $"            }}\n" +
                   $"        }}\n";
        }

        public string InsertGemThemeScript(string strippedName) {
            string title = ThemeName.Text;
            string qbKey = ThemeQBKey.Text.Replace(" ", "_");

            return $"script {strippedName}_Load [\n" +
                   $"    :i $printf$ %s(\"Adding gem theme {title}...\")\n\n" +
                   $"    :i $new_option$ = :s{{\n" +
                   $"        :i $title$ = %s(\"{title}\")\n" +
                   $"        :i $value$ = ${qbKey}$\n" +
                   $"        :i $value_string$ = %s(\"{qbKey}\")\n" +
                   $"    :i :s}}\n\n" +
                   $"    :i $AddToGlobalArray$ $id$=$wtde_gem_options$ $element$=%GLOBAL%$new_option$\n" +
                   $"    :i $wtde_loadtoggles$\n" +
                   $"    :i endfunction\n" +
                   $"]";
        }

        public void AssignColorToLabel(Label label) {
            ColorDialog cdlg = new ColorDialog();
            cdlg.AllowFullOpen = true;
            cdlg.Color = label.BackColor;
            cdlg.ShowDialog();
            label.BackColor = cdlg.Color;
        }

        private void GemThemeCreator_Load(object sender, EventArgs e) {

        }

        private void ThemeQBKey_TextChanged(object sender, EventArgs e) {
            ThemeStructName.Text = ThemeQBKey.Text;
        }

        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        private void NoteGreen_Click(object sender, EventArgs e) {
            AssignColorToLabel(NoteGreen);
        }

        private void NoteGreenBase_Click(object sender, EventArgs e) {
            AssignColorToLabel(NoteGreenBase);
        }

        private void NoteRed_Click(object sender, EventArgs e) {
            AssignColorToLabel(NoteRed);
        }

        private void NoteRedBase_Click(object sender, EventArgs e) {
            AssignColorToLabel(NoteRedBase);
        }

        private void NoteYellow_Click(object sender, EventArgs e) {
            AssignColorToLabel(NoteYellow);
        }

        private void NoteYellowBase_Click(object sender, EventArgs e) {
            AssignColorToLabel(NoteYellowBase);
        }

        private void NoteBlue_Click(object sender, EventArgs e) {
            AssignColorToLabel(NoteBlue);
        }

        private void NoteBlueBase_Click(object sender, EventArgs e) {
            AssignColorToLabel(NoteBlueBase);
        }

        private void NoteOrange_Click(object sender, EventArgs e) {
            AssignColorToLabel(NoteOrange);
        }

        private void NoteOrangeBase_Click(object sender, EventArgs e) {
            AssignColorToLabel(NoteOrangeBase);
        }

        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        private void NoteKick_Click(object sender, EventArgs e) {
            AssignColorToLabel(NoteKick);
        }

        private void NoteKickBase_Click(object sender, EventArgs e) {
            AssignColorToLabel(NoteKickBase);
        }

        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        private void NoteGreenNowD_Click(object sender, EventArgs e) {
            AssignColorToLabel(NoteGreenNowD);
        }

        private void NoteGreenNowB_Click(object sender, EventArgs e) {
            AssignColorToLabel(NoteGreenNowB);
        }

        private void NoteRedNowD_Click(object sender, EventArgs e) {
            AssignColorToLabel(NoteRedNowD);
        }

        private void NoteRedNowB_Click(object sender, EventArgs e) {
            AssignColorToLabel(NoteRedNowB);
        }

        private void NoteYellowNowD_Click(object sender, EventArgs e) {
            AssignColorToLabel(NoteYellowNowD);
        }

        private void NoteYellowNowB_Click(object sender, EventArgs e) {
            AssignColorToLabel(NoteYellowNowB);
        }

        private void NoteBlueNowD_Click(object sender, EventArgs e) {
            AssignColorToLabel(NoteBlueNowD);
        }

        private void NoteBlueNowB_Click(object sender, EventArgs e) {
            AssignColorToLabel(NoteBlueNowB);
        }

        private void NoteOrangeNowD_Click(object sender, EventArgs e) {
            AssignColorToLabel(NoteOrangeNowD);
        }

        private void NoteOrangeNowB_Click(object sender, EventArgs e) {
            AssignColorToLabel(NoteOrangeNowB);
        }

        private void OKButton_Click(object sender, EventArgs e) {
            CompileScript();
            this.Close();
        }

        private void CancelButton_Click(object sender, EventArgs e) {
            this.Close();
        }

        private void SaveColorsButton_Click(object sender, EventArgs e) {
            SaveGemColors();
        }

        private void LoadColorsButton_Click(object sender, EventArgs e) {
            LoadGemColors();
        }

        private void SelectSDKPath_Click(object sender, EventArgs e) {
            OpenFileDialog ofd = new OpenFileDialog();
            ofd.Title = "Select Guitar Hero SDK Folder";
            ofd.Filter = "Guitar Hero SDK Script|*sdk.js;*sdk.bat";
            ofd.Multiselect = false;
            ofd.ShowDialog();

            string finalPath = ofd.FileName;
            if (finalPath != "") {
                finalPath = Path.GetDirectoryName(ofd.FileName);
                INIFunctions.SaveINIValue("Launcher", "SDKPath", finalPath);

                SDKPath.Text = finalPath;
            }
        }

        private void NotePurpleNowD_Click(object sender, EventArgs e) {
            AssignColorToLabel(NotePurpleNowD);
        }

        private void NotePurpleNowB_Click(object sender, EventArgs e) {
            AssignColorToLabel(NotePurpleNowB);
        }

        private void ResetToDefaultOptions_Click(object sender, EventArgs e) {
            // RESET ALL COLORS!
            string resetConfirmMsg = "Are you sure you want to reset all colors to their defaults? This cannot be undone!";
            string saveChangesMsg = "Do you want to save your changes before resetting?";
            if (MessageBox.Show(resetConfirmMsg, "Are You Sure?", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes) {
                if (MessageBox.Show(saveChangesMsg, "Save Changes", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) SaveGemColors();
                
                // Reset the colors back to their defaults!
                Color white = Color.White;

                // -- GEM COLORS -----------------------
                NoteGreen.BackColor = Color.FromArgb(255, 0, 255, 0);
                NoteGreenBase.BackColor = white;
                NoteRed.BackColor = Color.FromArgb(255, 255, 0, 0);
                NoteRedBase.BackColor = white;
                NoteYellow.BackColor = Color.FromArgb(255, 255, 255, 0);
                NoteYellowBase.BackColor = white;
                NoteBlue.BackColor = Color.FromArgb(255, 0, 128, 255);
                NoteBlueBase.BackColor = white;
                NoteOrange.BackColor = Color.FromArgb(255, 255, 179, 0);
                NoteOrangeBase.BackColor = white;
                NoteKick.BackColor = Color.FromArgb(255, 191, 0, 255);
                NoteKickBase.BackColor = white;

                // -- GEM COLOR INTENSITIES -----------------------
                NoteGreenIntensity.Value = 255;
                NoteRedIntensity.Value = 306;
                NoteYellowIntensity.Value = 293;
                NoteBlueIntensity.Value = 383;
                NoteOrangeIntensity.Value = 332;
                NoteKickIntensity.Value = 255;

                NoteGreenBaseIntensity.Value = 255;
                NoteRedBaseIntensity.Value = 255;
                NoteYellowBaseIntensity.Value = 255;
                NoteBlueBaseIntensity.Value = 255;
                NoteOrangeBaseIntensity.Value = 255;
                NoteKickBaseIntensity.Value = 255;

                // -- TARGET COLORS -----------------------
                Color green = Color.Lime;
                Color red = Color.Red;
                Color yellow = Color.Yellow;
                Color blue = Color.FromArgb(255, 0, 128, 255);
                Color orange = Color.FromArgb(255, 255, 128, 0);
                Color purple = Color.FromArgb(255, 128, 0, 255);

                NoteGreenNowD.BackColor = green;
                NoteRedNowD.BackColor = red;
                NoteYellowNowD.BackColor = yellow;
                NoteBlueNowD.BackColor = blue;
                NoteOrangeNowD.BackColor = orange;
                NotePurpleNowD.BackColor = purple;

                NoteGreenNowB.BackColor = green;
                NoteRedNowB.BackColor = red;
                NoteYellowNowB.BackColor = yellow;
                NoteBlueNowB.BackColor = blue;
                NoteOrangeNowB.BackColor = orange;
                NotePurpleNowB.BackColor = purple;

                // -- TARGET COLOR INTENSITIES -----------------------
                NoteGreenNowDIntensity.Value = 255;
                NoteRedNowDIntensity.Value = 255;
                NoteYellowNowDIntensity.Value = 255;
                NoteBlueNowDIntensity.Value = 255;
                NoteOrangeNowDIntensity.Value = 255;
                NotePurpleNowDIntensity.Value = 255;

                NoteGreenNowBIntensity.Value = 510;
                NoteRedNowBIntensity.Value = 510;
                NoteYellowNowBIntensity.Value = 510;
                NoteBlueNowBIntensity.Value = 510;
                NoteOrangeNowBIntensity.Value = 510;
                NotePurpleNowBIntensity.Value = 510;
            }
        }
    }
}
