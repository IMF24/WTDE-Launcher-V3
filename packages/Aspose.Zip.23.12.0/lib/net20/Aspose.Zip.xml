<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Aspose.Zip</name>
  </assembly>
  <members>
    <member name="T:Aspose.Zip.ArchiveInfo.ArchiveFormat">
      <summary>
            Supported archive formats.
            </summary>
    </member>
    <member name="F:Aspose.Zip.ArchiveInfo.ArchiveFormat.Unknown">
      <summary>
            Unknown format.
            </summary>
    </member>
    <member name="F:Aspose.Zip.ArchiveInfo.ArchiveFormat.Zip">
      <summary>
            Zip archive (<see cref="T:Aspose.Zip.Archive" />).
            </summary>
    </member>
    <member name="F:Aspose.Zip.ArchiveInfo.ArchiveFormat.Rar">
      <summary>
            Rar archive (<see cref="T:Aspose.Zip.Rar.RarArchive" />).
            </summary>
    </member>
    <member name="F:Aspose.Zip.ArchiveInfo.ArchiveFormat.SevenZip">
      <summary>
            7zip archive (<see cref="T:Aspose.Zip.SevenZip.SevenZipArchive" />).
            </summary>
    </member>
    <member name="F:Aspose.Zip.ArchiveInfo.ArchiveFormat.Bzip2">
      <summary>
            Bzip2 archive (<see cref="T:Aspose.Zip.Bzip2.Bzip2Archive" />).
            </summary>
    </member>
    <member name="F:Aspose.Zip.ArchiveInfo.ArchiveFormat.Cab">
      <summary>
            Cab archive (<see cref="T:Aspose.Zip.Cab.CabArchive" />).
            </summary>
    </member>
    <member name="F:Aspose.Zip.ArchiveInfo.ArchiveFormat.Cpio">
      <summary>
            Cpio archive (<see cref="T:Aspose.Zip.Cpio.CpioArchive" />).
            </summary>
    </member>
    <member name="F:Aspose.Zip.ArchiveInfo.ArchiveFormat.Gzip">
      <summary>
             Gzip archive (<see cref="T:Aspose.Zip.Gzip.GzipArchive" />).
            </summary>
    </member>
    <member name="F:Aspose.Zip.ArchiveInfo.ArchiveFormat.Lzip">
      <summary>
             Lzip archive (<see cref="T:Aspose.Zip.Lzip.LzipArchive" />).
            </summary>
    </member>
    <member name="F:Aspose.Zip.ArchiveInfo.ArchiveFormat.Lzma">
      <summary>
            Lzma archive (<see cref="T:Aspose.Zip.LZMA.LzmaArchive" />).
            </summary>
    </member>
    <member name="F:Aspose.Zip.ArchiveInfo.ArchiveFormat.Shar">
      <summary>
            Shar archive (<see cref="T:Aspose.Zip.Shar.SharArchive" />).
            </summary>
    </member>
    <member name="F:Aspose.Zip.ArchiveInfo.ArchiveFormat.Snappy">
      <summary>
            Snappy archive (<see cref="T:Aspose.Zip.Snappy.SnappyArchive" />).
            </summary>
    </member>
    <member name="F:Aspose.Zip.ArchiveInfo.ArchiveFormat.Tar">
      <summary>
            Tar archive (<see cref="T:Aspose.Zip.Tar.TarArchive" />).
            </summary>
    </member>
    <member name="F:Aspose.Zip.ArchiveInfo.ArchiveFormat.Wim">
      <summary>
            Wim  archive (<see cref="T:Aspose.Zip.Wim.WimArchive" />).
            </summary>
    </member>
    <member name="F:Aspose.Zip.ArchiveInfo.ArchiveFormat.Xar">
      <summary>
            Xar archive (<see cref="T:Aspose.Zip.Xar.XarArchive" />).
            </summary>
    </member>
    <member name="F:Aspose.Zip.ArchiveInfo.ArchiveFormat.Xz">
      <summary>
            Xz archive (<see cref="T:Aspose.Zip.Xz.XzArchive" />).
            </summary>
    </member>
    <member name="F:Aspose.Zip.ArchiveInfo.ArchiveFormat.Z">
      <summary>
            Z archive (<see cref="T:Aspose.Zip.Z.ZArchive" />).
            </summary>
    </member>
    <member name="T:Aspose.Zip.ArchiveInfo.ArchiveFormatDetector">
      <summary>
            Detects archive format and provides other related information.
            </summary>
    </member>
    <member name="M:Aspose.Zip.ArchiveInfo.ArchiveFormatDetector.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.ArchiveInfo.ArchiveFormatDetector" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Zip.ArchiveInfo.ArchiveFormatDetector.GetFormatInfo(System.String)">
      <summary>
            Gets format info.
            </summary>
      <param name="fileName">The filename of the archive file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="fileName" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="fileName" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="fileName" /> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="fileName" /> contains a colon (:) in the middle of the string.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <returns>Information about archive format or null if format was not detected.</returns>
    </member>
    <member name="M:Aspose.Zip.ArchiveInfo.ArchiveFormatDetector.GetFormatInfo(System.IO.Stream)">
      <summary>
            Gets format info.
            </summary>
      <param name="stream">The stream of the archive file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> is not seekable.</exception>
      <returns>Information about archive format or null if format was not detected.</returns>
    </member>
    <member name="T:Aspose.Zip.ArchiveInfo.ArchiveFormatInfo">
      <summary>
            Represents information about the archive format.
            </summary>
    </member>
    <member name="P:Aspose.Zip.ArchiveInfo.ArchiveFormatInfo.Class">
      <summary>
            Gets the class that represents the archive file.
            </summary>
    </member>
    <member name="P:Aspose.Zip.ArchiveInfo.ArchiveFormatInfo.Format">
      <summary>
            Gets the archive format.
            </summary>
    </member>
    <member name="M:Aspose.Zip.ArchiveInfo.ArchiveFormatInfo.ToString">
      <inheritdoc />
    </member>
    <member name="T:Aspose.Zip.ArchiveInfo.ArchiveInstanceInfo">
      <summary>
            Represents information about the archive instance.
            </summary>
    </member>
    <member name="M:Aspose.Zip.ArchiveInfo.ArchiveInstanceInfo.GetArchiveFormatInfo(System.String)">
      <summary>
            Gets archive format info.
            </summary>
      <param name="fileName">The filename of the archive file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="fileName" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="fileName" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="fileName" /> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="fileName" /> contains a colon (:) in the middle of the string.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <returns>Information about archive format.</returns>
    </member>
    <member name="M:Aspose.Zip.ArchiveInfo.ArchiveInstanceInfo.GetArchiveFormatInfo(System.IO.Stream)">
      <summary>
            Gets archive format info.
            </summary>
      <param name="stream">The stream of the archive file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> is not seekable.</exception>
      <returns>Information about archive format.</returns>
    </member>
    <member name="M:Aspose.Zip.ArchiveInfo.ArchiveInstanceInfo.GetArchiveInstanceInfo(System.String)">
      <summary>
            Gets archive instance info.
            </summary>
      <param name="fileName">The filename of the archive file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="fileName" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="fileName" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="fileName" /> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="fileName" /> contains a colon (:) in the middle of the string.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <returns>Information about archive instance or null if format was not detected.</returns>
    </member>
    <member name="M:Aspose.Zip.ArchiveInfo.ArchiveInstanceInfo.GetArchiveInstanceInfo(System.IO.Stream)">
      <summary>
            Gets archive instance info.
            </summary>
      <param name="stream">The stream of the archive file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> is not seekable.</exception>
      <returns>Information about archive instance or null if format was not detected.</returns>
    </member>
    <member name="P:Aspose.Zip.ArchiveInfo.ArchiveInstanceInfo.FormatInfo">
      <summary>
            Gets the archive format info.
            </summary>
    </member>
    <member name="P:Aspose.Zip.ArchiveInfo.ArchiveInstanceInfo.IsContentEncrypted">
      <summary>
             Gets a value indicating whether content of the archive is encrypted.
            </summary>
    </member>
    <member name="P:Aspose.Zip.ArchiveInfo.ArchiveInstanceInfo.AreFileNamesEncrypted">
      <summary>
            Gets a value indicating whether names of entries (files) of the archive are encrypted.
            </summary>
    </member>
    <member name="T:Aspose.Zip.ArchiveInfo.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Zip.ArchiveInfo" /> namespace contains classes which represent archive info related entities.
            </summary>
    </member>
    <member name="T:Aspose.Zip.ArchiveFactory">
      <summary>
            Detects the archive format and creates the appropriate <see cref="T:Aspose.Zip.IArchive" /> object according to the type of archive.
            </summary>
    </member>
    <member name="M:Aspose.Zip.ArchiveFactory.GetArchive(System.String)">
      <summary>
            Detects the archive format and creates the appropriate <see cref="T:Aspose.Zip.IArchive" /> object according to the type of archive specified by the given path.
            </summary>
      <param name="path">The path to the archive to be analyzed.</param>
      <returns>An <see cref="T:Aspose.Zip.IArchive" /> object representing the archive.</returns>
    </member>
    <member name="M:Aspose.Zip.ArchiveFactory.GetArchive(System.IO.Stream)">
      <summary>
            Detects the archive format and creates the appropriate <see cref="T:Aspose.Zip.IArchive" /> object according to the type of archive specified by the given stream.
            </summary>
      <param name="stream">The stream containing the archive data. It must bee seekable.</param>
      <returns>An <see cref="T:Aspose.Zip.IArchive" /> object representing the archive.</returns>
    </member>
    <member name="T:Aspose.Zip.IArchive">
      <summary>
            This interface represents an archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.IArchive.FileEntries">
      <summary>
            Gets entries of <see cref="T:Aspose.Zip.IArchiveFileEntry" /> type constituting the archive.
            </summary>
      <remarks>Archives for compression only, such as gzip, bzip2, lzip, lzma, xz, z consist of the single record - the archive itself.</remarks>
    </member>
    <member name="M:Aspose.Zip.IArchive.ExtractToDirectory(System.String)">
      <summary>
            Extracts all the files in the archive to the directory provided.
            </summary>
      <param name="destinationDirectory">The path to the directory to place the extracted files in.</param>
      <remarks>If the directory does not exist, it will be created.</remarks>
    </member>
    <member name="T:Aspose.Zip.IArchiveFileEntry">
      <summary>
            This interface represents an archive file entry.
            </summary>
    </member>
    <member name="P:Aspose.Zip.IArchiveFileEntry.Name">
      <summary>
            Gets name of the entry.
            </summary>
      <remarks>Archives for compression only, such as gzip, bzip2, lzip, lzma, xz, z has name "File.bin" unless another name can be found in headers.</remarks>
    </member>
    <member name="P:Aspose.Zip.IArchiveFileEntry.Length">
      <summary>
            Gets the length of the entry in bytes.
            </summary>
    </member>
    <member name="M:Aspose.Zip.IArchiveFileEntry.Extract(System.String)">
      <summary>
            Extracts the entry to the filesystem by the path provided.
            </summary>
      <param name="path">The path to destination file. If the file already exists, it will be overwritten.</param>
      <returns>
        <see cref="T:System.IO.FileInfo" /> instance containing extracted data.</returns>
    </member>
    <member name="M:Aspose.Zip.IArchiveFileEntry.Extract(System.IO.Stream)">
      <summary>
            Extracts the entry to the stream provided.
            </summary>
      <param name="destination">Destination stream. Must be writable.</param>
    </member>
    <member name="T:Aspose.Zip.Bzip2.Bzip2Archive">
      <summary>
            This class represents bzip2 archive file. Use it to compose or extract bzip2 archives.
            </summary>
      <remarks>
            bzip2 compresses files using the Burrows-Wheeler block sorting text compression algorithm, and Huffman coding. See more: https://en.wikipedia.org/wiki/Bzip2
            </remarks>
    </member>
    <member name="M:Aspose.Zip.Bzip2.Bzip2Archive.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Bzip2.Bzip2Archive" /> class prepared for compressing.
            </summary>
      <example>
        <para>
            The following example shows how to compress a file.
            </para>
        <code>
            using (Bzip2Archive archive = new Bzip2Archive()) 
            {
                archive.SetSource("data.bin");
                archive.Save("archive.bz2");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Bzip2.Bzip2Archive.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Bzip2.Bzip2Archive" /> class prepared for decompressing.
            </summary>
      <remarks>
            This constructor does not decompress. See <see cref="M:Aspose.Zip.Bzip2.Bzip2Archive.Open" /> method for decompressing.
            </remarks>
      <param name="sourceStream">The source of the archive.</param>
      <example>
        <para>Open an archive from a stream and extract it to a <c>MemoryStream</c></para>
        <code>
            var ms = new MemoryStream();
            using (Bzip2Archive archive = new Bzip2Archive(File.OpenRead("archive.bz2")))
              archive.Open().CopyTo(ms);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Bzip2.Bzip2Archive.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Bzip2.Bzip2Archive" /> class prepared for decompressing.
            </summary>
      <remarks>
            This constructor does not decompress. See <see cref="M:Aspose.Zip.Bzip2.Bzip2Archive.Open" /> method for decompressing.
            </remarks>
      <param name="path">The path to the archive file.</param>
      <example>
        <para>Open an archive from file by path and extract it to a <c>MemoryStream</c></para>
        <code>
            var ms = new MemoryStream();
            using (Bzip2Archive archive = new Bzip2Archive("archive.bz2"))
              archive.Open().CopyTo(ms);
            </code>
      </example>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
    </member>
    <member name="M:Aspose.Zip.Bzip2.Bzip2Archive.SetSource(System.IO.Stream)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="source">The input stream for the archive.</param>
      <example>
        <code>
            using (Bzip2Archive archive = new Bzip2Archive()) 
            {
                archive.SetSource(new MemoryStream(new byte[] { 0x00,0xFF }));
                archive.Save("archive.bz2");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Bzip2.Bzip2Archive.SetSource(System.IO.FileInfo)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="fileInfo">The reference to a file to be compressed.</param>
      <example>
        <code>
            using (Bzip2Archive archive = new Bzip2Archive()) 
            {
                archive.SetSource(new FileInfo("data.bin"));
                archive.Save("archive.bz2");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Bzip2.Bzip2Archive.SetSource(System.String)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="path">Path to file to be compressed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (Bzip2Archive archive = new Bzip2Archive()) 
            {
                archive.SetSource("data.bin");
                archive.Save("archive.bz2");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Bzip2.Bzip2Archive.SetSource(Aspose.Zip.Tar.TarArchive,Aspose.Zip.Tar.TarFormat)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="tarArchive">Tar archive to be compressed.</param>
      <param name="format">Defines tar header format.</param>
      <remarks>Use this method to compose joint tar.bz2 archive.</remarks>
      <example>
        <code>
            using (var tarArchive = new TarArchive())
            {
                tarArchive.CreateEntry("first.bin", "data1.bin");
                tarArchive.CreateEntry("second.bin", "data2.bin");
                using (var bzippedArchive = new Bzip2Archive())
                {
                    bzippedArchive.SetSource(tarArchive);
                    bzippedArchive.Save("archive.tar.bz2");
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Bzip2.Bzip2Archive.SetSource(Aspose.Zip.Cpio.CpioArchive,Aspose.Zip.Cpio.CpioFormat)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="cpioArchive">Cpio archive to be compressed.</param>
      <param name="format">Defines cpio header format.</param>
      <remarks>Use this method to compose joint cpio.bz2 archive.</remarks>
      <example>
        <code>
            using (var cpioArchive = new CpioArchive())
            {
                cpioArchive.CreateEntry("first.bin", "data1.bin");
                cpioArchive.CreateEntry("second.bin", "data2.bin");
                using (var bzippedArchive = new Bzip2Archive())
                {
                    bzippedArchive.SetSource(cpioArchive);
                    bzippedArchive.Save("archive.cpio.bz2");
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Bzip2.Bzip2Archive.Dispose">
      <inheritdoc />
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Bzip2.Bzip2Archive.Open">
      <summary>
            Opens the archive for extraction and provides a stream with archive content.
            </summary>
      <returns>The stream that represents the contents of the archive.</returns>
      <remarks>
            Read from the stream to get original content of file. See examples section.
            </remarks>
      <example>
            Usage:
            <code>Stream decompressed = archive.Open();</code><para>
            .NET 4.0 and higher - use Stream.CopyTo method:
            <code>
            decompressed.CopyTo(httpResponse.OutputStream)
            </code></para><para>
            .NET 3.5 and before - copy bytes manually:
            <code>
            byte[] buffer = new byte[8192];
            int bytesRead;
            while (0 &lt; (bytesRead = decompressed.Read(buffer, 0, buffer.Length)))
             fileStream.Write(buffer, 0, bytesRead);
            </code></para></example>
    </member>
    <member name="M:Aspose.Zip.Bzip2.Bzip2Archive.Extract(System.IO.Stream)">
      <summary>
            Extracts the archive to the stream provided.
            </summary>
      <param name="destination">Destination stream. Must be writable.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not support writing.</exception>
      <example>
        <code>
            using (Bzip2Archive archive = new Bzip2Archive("archive.bz2"))
            {
                 archive.Extract(httpResponseStream);
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Bzip2.Bzip2Archive.ExtractToDirectory(System.String)">
      <summary>
            Extracts content of the archive to the directory provided.
            </summary>
      <param name="destinationDirectory">The path to the directory to place the extracted files in.</param>
      <remarks>If the directory does not exist, it will be created.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectory" /> is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access existing directory.</exception>
      <exception cref="T:System.NotSupportedException">If directory does not exist, path contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationDirectory" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the System.IO.Path.GetInvalidPathChars method. 
            -or- path is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.IO.IOException">The directory specified by path is a file. -or- The network name is not known.</exception>
    </member>
    <member name="M:Aspose.Zip.Bzip2.Bzip2Archive.Extract(System.String)">
      <summary>
            Extracts the archive to the file by path.
            </summary>
      <param name="path">The path to destination file. If the file already exists, it will be overwritten.</param>
      <returns>Info of extracted file.</returns>
    </member>
    <member name="M:Aspose.Zip.Bzip2.Bzip2Archive.Save(System.IO.Stream,Aspose.Zip.Bzip2.Bzip2SaveOptions)">
      <summary>
            Saves archive to the stream provided.
            </summary>
      <param name="outputStream">Destination stream.</param>
      <param name="saveOptions">Options for saving a bzip2 archive. If not specified, 900 Kb block size would be used.</param>
      <remarks>
        <para>
          <paramref name="outputStream" /> must be writable.</para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">Source of data to be archived has not been provided.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outputStream" /> is not writable.</exception>
      <exception cref="T:System.UnauthorizedAccessException">File source is read-only or is a directory.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified file source path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.IO.IOException">The File source is already open.</exception>
      <example>
        <para>Writes compressed data to http response stream.</para>
        <code>
            using (var archive = new Bzip2Archive()) 
            {
                archive.SetSource(new FileInfo("data.bin"));
                archive.Save(httpResponse.OutputStream);
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Bzip2.Bzip2Archive.Save(System.String,Aspose.Zip.Bzip2.Bzip2SaveOptions)">
      <summary>
            Saves archive to destination file provided.
            </summary>
      <param name="destinationFileName">The path of the archive to be created. If the specified file name points to an existing file, it will be overwritten.</param>
      <param name="saveOptions">Options for saving a bzip2 archive. If not specified, 900 Kb block size would be used.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="destinationFileName" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="destinationFileName" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="destinationFileName" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="destinationFileName" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <para>Writes compressed data to file.</para>
        <code>
            using (var archive = new Bzip2Archive()) 
            {
                archive.SetSource(new FileInfo("data.bin"));
                archive.Save("data.bz2");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Bzip2.Bzip2Archive.Dispose(System.Boolean)">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <param name="disposing">Whether managed resources should be disposed.</param>
    </member>
    <member name="T:Aspose.Zip.Bzip2.Bzip2SaveOptions">
      <summary>
            Options for saving a bzip2 archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Bzip2.Bzip2SaveOptions.BlockSize">
      <summary>
            Block size in hundreds of kilobytes.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Bzip2.Bzip2SaveOptions.CompressionThreads">
      <summary>
            Gets or sets compression thread count. If the value greater than 1, multithreading compression will be used.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Bzip2.Bzip2SaveOptions.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Bzip2.Bzip2SaveOptions" /> class.
            </summary>
      <param name="blockSize">Block size in hundreds of kilobytes.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Block size is not in valid range.</exception>
      <example>
        <code>
            using (FileStream result = File.Open("archive.bz2"))
            {
                using (Bzip2Archive archive = new Bzip2Archive())
                {
                    archive.SetSource("data.bin");
                    archive.Save(result, new Bzip2SaveOptions(9));
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Bzip2.Bzip2SaveOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Bzip2.Bzip2SaveOptions" /> class with default block size, equals to 9 hundred of kilobytes.
            </summary>
      <example>
        <code>
            using (FileStream result = File.Open("archive.bz2"))
            {
                using (Bzip2Archive archive = new Bzip2Archive())
                {
                    archive.SetSource("data.bin");
                    archive.Save(result, new Bzip2SaveOptions());
                }
            }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Zip.Bzip2.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Zip.Bzip2" /> namespace contains classes which represent bzip2 archive related entities.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Cab.CabEntry">
      <summary>
             Represents single file within cab archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Cab.CabEntry.Name">
      <summary>
            Gets name of the entry within archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Cab.CabEntry.Length">
      <summary>
            Gets the length of the entry in bytes.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Cab.CabEntry.Open">
      <summary>
            Opens the entry for extraction and provides a stream with entry content.
            </summary>
      <returns>The stream that represents the contents of the entry.</returns>
      <remarks>
            Read from the stream to get original content of file. See examples section.
            </remarks>
      <example>
            Usage:
            <code>Stream decompressed = entry.Open();</code><para>
            .NET 4.0 and higher - use Stream.CopyTo method:
            <code>
            decompressed.CopyTo(httpResponse.OutputStream)
            </code></para><para>
            .NET 3.5 and before - copy bytes manually:
            <code>
            byte[] buffer = new byte[8192];
            int bytesRead;
            while (0 &lt; (bytesRead = decompressed.Read(buffer, 0, buffer.Length)))
             fileStream.Write(buffer, 0, bytesRead);
            </code></para></example>
    </member>
    <member name="M:Aspose.Zip.Cab.CabEntry.Extract(System.String)">
      <summary>
            Extracts the entry to the filesystem by the path provided.
            </summary>
      <param name="path">The path to destination file. If the file already exists, it will be overwritten.</param>
      <returns>The file info of composed file.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (var archive = new CabArchive("archive.cab"))
            {
                archive.Entries[0].Extract("data.bin");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Cab.CabEntry.Extract(System.IO.Stream)">
      <summary>
            Extracts the entry to the stream provided.
            </summary>
      <param name="destination">Destination stream. Must be writable.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not support writing.</exception>
      <example>
        <para>Extract an entry of cab archive.</para>
        <code>
            using (var archive = new CabArchive("archive.cab"))
            {
                archive.Entries[0].Extract(httpResponseStream);
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Cab.CabEntry.ToString">
      <inheritdoc />
    </member>
    <member name="T:Aspose.Zip.Cab.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Zip.Cab" /> namespace contains classes which represent Cab archive related entities.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Cab.CabArchive">
      <summary>
            This class represents cab archive file.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Cab.CabArchive.Entries">
      <summary>
            Gets entries of <see cref="T:Aspose.Zip.Cab.CabEntry" /> type constituting the archive.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Cab.CabArchive.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Cab.CabArchive" /> class and composes entries list can be extracted from the archive.
            </summary>
      <remarks>
            This constructor does not unpack any entry. See <see cref="M:Aspose.Zip.Cab.CabEntry.Open" /> method for unpacking.
            </remarks>
      <param name="sourceStream">The source of the archive. It must be seekable.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceStream" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceStream" /> is not seekable.</exception>
      <exception cref="T:System.IO.InvalidDataException">
        <paramref name="sourceStream" /> is not valid cab archive.</exception>
      <example>
        <para>The following example shows how to extract all of the entries to a directory.</para>
        <code>
            using (var archive = new CabArchive(File.OpenRead("archive.cab")))
            { 
               archive.ExtractToDirectory("C:\extracted");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Cab.CabArchive.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Cab.CabArchive" /> class and composes entries list can be extracted from the archive.
            </summary>
      <remarks>
            This constructor does not unpack any entry. See <see cref="M:Aspose.Zip.Cab.CabEntry.Open" /> method for unpacking.
            </remarks>
      <param name="path">The path to the archive file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <para>The following example shows how to extract all of the entries to a directory.</para>
        <code>
            using (var archive = new CabArchive("archive.cab")) 
            { 
               archive.ExtractToDirectory("C:\extracted");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Cab.CabArchive.Dispose(System.Boolean)">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <param name="disposing">Whether managed resources should be disposed.</param>
    </member>
    <member name="M:Aspose.Zip.Cab.CabArchive.ExtractToDirectory(System.String)">
      <summary>
            Extracts all the files in the archive to the directory provided.
            </summary>
      <param name="destinationDirectory">The path to the directory to place the extracted files in.</param>
      <remarks>If the directory does not exist, it will be created.</remarks>
      <exception cref="T:System.ArgumentNullException">path is null</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access existing directory.</exception>
      <exception cref="T:System.NotSupportedException">If directory does not exist, path contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the System.IO.Path.GetInvalidPathChars method. -or- path is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.IO.IOException">The directory specified by path is a file. -or- The network name is not known.</exception>
      <example>
        <code>
            using (var archive = new CabArchive("archive.cab")) 
            { 
               archive.ExtractToDirectory("C:\extracted");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Cab.CabArchive.Dispose">
      <inheritdoc />
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Saving.Bzip2CompressionSettings">
      <inheritdoc />
      <summary>
            Settings for Bzip2 compression method.
            </summary>
      <remarks>
            bzip2 compresses files using the Burrows-Wheeler block sorting text compression algorithm, and Huffman coding. See more: https://en.wikipedia.org/wiki/Bzip2
            </remarks>
    </member>
    <member name="P:Aspose.Zip.Saving.Bzip2CompressionSettings.BlockSize">
      <summary>
            Block size in hundreds of kilobytes.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Saving.Bzip2CompressionSettings.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.Bzip2CompressionSettings" /> class.
            </summary>
      <param name="blockSize">Block size in hundreds of kilobytes.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Block size is not between 1 and 9.</exception>
      <example>
        <code>
            using (Archive archive = new Archive(new ArchiveEntrySettings(new Bzip2CompressionSettings(1))))
            {
                archive.CreateEntry("data.bin", "data.bin");
                archive.Save(zipFile);
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Saving.Bzip2CompressionSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.Bzip2CompressionSettings" /> class with default block size, equals to 9 hundred of kilobytes.
            </summary>
      <example>
        <code>
            using (Archive archive = new Archive(new ArchiveEntrySettings(new Bzip2CompressionSettings())))
            {
                archive.CreateEntry("data.bin", "data.bin");
                archive.Save(zipFile);
            }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Zip.Saving.DeflateCompressionSettings">
      <inheritdoc />
      <summary>
            Settings for Deflate compression method.
            </summary>
      <remarks>
        <para>
             Deflate is a lossless data compression algorithm that uses a combination of the LZ77 algorithm and Huffman coding.
            </para>
        <para>
            See standard here: https://tools.ietf.org/html/rfc1951
            </para>
      </remarks>
    </member>
    <member name="M:Aspose.Zip.Saving.DeflateCompressionSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.DeflateCompressionSettings" /> class.
            </summary>
      <example>
        <code>
            using (Archive archive = new Archive(new ArchiveEntrySettings(new DeflateCompressionSettings())))
            {
                archive.CreateEntry("data.bin", "data.bin");                   
                archive.Save(zipFile);
            }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Zip.Saving.EncryptionSettings">
      <summary>
            Base class for settings for several zip encryption methods.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Saving.EncryptionSettings.#ctor(System.String,Aspose.Zip.Saving.EncryptionMethod)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.EncryptionSettings" /> class.
            </summary>
      <param name="password">Password for encryption or decryption.</param>
      <param name="method">Method to encrypt or decrypt with.</param>
    </member>
    <member name="P:Aspose.Zip.Saving.EncryptionSettings.Method">
      <summary>
            Gets the encryption algorithm.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.EncryptionSettings.Password">
      <summary>
            Gets or sets password for encryption or decryption.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Saving.EnhancedDeflateCompressionSettings">
      <inheritdoc />
      <summary>
            Settings for Enhanced Deflate compression method.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Saving.EnhancedDeflateCompressionSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.EnhancedDeflateCompressionSettings" /> class.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Saving.EventsBag">
      <summary>
            Events container used on <see cref="T:Aspose.Zip.Archive" /> saving.
            </summary>
      <seealso cref="T:Aspose.Zip.Saving.ArchiveSaveOptions" />
    </member>
    <member name="E:Aspose.Zip.Saving.EventsBag.EntryCompressed">
      <summary>
            Raises after an archive entry has been compressed.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Saving.LzmaCompressionSettings">
      <inheritdoc />
      <summary>
            Settings for LZMA compression method.
            </summary>
      <remarks>
        <para>
            The Lempel–Ziv–Markov chain algorithm (LZMA) is an algorithm used to perform lossless data compression.
            This algorithm uses a dictionary compression scheme somewhat similar to the LZ77 algorithm and features a high compression ratio and a variable compression-dictionary size.
            </para>
        <para>
            See more: https://en.wikipedia.org/wiki/Lempel–Ziv–Markov_chain_algorithm </para>
      </remarks>
    </member>
    <member name="M:Aspose.Zip.Saving.LzmaCompressionSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.LzmaCompressionSettings" /> class with default dictionary size, equals to 16 megabytes.
            </summary>
      <example>
        <code>
            using (Archive archive = new Archive(new ArchiveEntrySettings(new LzmaCompressionSettings())))
            {
                archive.CreateEntry("data.bin", "data.bin");
                archive.Save(zipFile);
            }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Zip.Saving.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Zip.Saving" /> namespace contains classes which are needed for operations entailing saving the archive.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Saving.CompressionSettings">
      <summary>
            Settings needed for compressor or decompressor to work.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.CompressionSettings.Bzip2">
      <summary>
            An instance of <c>Bzip2CompressionSettings</c> with default parameters.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.CompressionSettings.Deflate">
      <summary>
            An instance of <c>DeflateCompressionSettings</c> with default parameters.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.CompressionSettings.EnhancedDeflate">
      <summary>
            An instance of <c>EnhancedDeflateCompressionSettings</c> with default parameters.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.CompressionSettings.Store">
      <summary>
            An instance of <c>StoreCompressionSettings</c> with default parameters.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.CompressionSettings.Lzma">
      <summary>
            An instance of <c>LzmaCompressionSettings</c> with default parameters.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.CompressionSettings.Xz">
      <summary>
            An instance of <c>Xz</c> with default parameters.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.CompressionSettings.PPMd">
      <summary>
            An instance of <c>PPMdCompressionSettings</c> with default parameters.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Saving.PPMdCompressionSettings">
      <inheritdoc />
      <summary>
            Settings for PPMd compression method.
            </summary>
      <remarks>
        <para>
            PPMd is a data compression algorithm developed by Dmitry Shkarin.
            This algorithm is based on predictive phrase matching on multiple order contexts.
            </para>
      </remarks>
    </member>
    <member name="P:Aspose.Zip.Saving.PPMdCompressionSettings.ModelOrder">
      <summary>
            Gets the order of the model.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.PPMdCompressionSettings.SuballocatorSize">
      <summary>
            Gets the sub-allocator size in MB.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Saving.PPMdCompressionSettings.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.PPMdCompressionSettings" /> class.
            </summary>
      <param name="modelOrder">Order of the model.</param>
      <param name="suballocatorSize">Memory size in MB suballocator may consume.</param>
      <remarks>
        <para>Bigger model orders almost surely results in better compression and surely more memory and CPU usage.</para>
        <para>The PPMd algorithm might need a lot of memory, especially when used on large files and/or used with large model order.
            If ppmd needs more memory than you give it, the compression will be worse.</para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="modelOrder" /> is not between 2 and 16. - or - <paramref name="suballocatorSize" /> is not between 1 and 256.</exception>
      <example>
        <code>
            using (Archive archive = new Archive(new ArchiveEntrySettings(new PPMdCompressionSettings(4, 10))))
            {
                archive.CreateEntry("data.bin", "data.bin");                   
                archive.Save(zipFile);
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Saving.PPMdCompressionSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.PPMdCompressionSettings" /> class with default model order and sub-allocator size.
            </summary>
      <remarks>
            Default model order is 8 and sub-allocator size is 50MB.
            </remarks>
      <example>
        <code>
            using (Archive archive = new Archive(new ArchiveEntrySettings(new PPMdCompressionSettings())))
            {
                archive.CreateEntry("data.bin", "data.bin");                   
                archive.Save(zipFile);
            }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Zip.Saving.StoreCompressionSettings">
      <inheritdoc />
      <summary>
            Settings for Store compression method.
            </summary>
      <remarks>
            This method stores original data as it is.
            </remarks>
    </member>
    <member name="M:Aspose.Zip.Saving.StoreCompressionSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.StoreCompressionSettings" /> class.
            </summary>
      <example>
        <code>
            using (Archive archive = new Archive(new ArchiveEntrySettings(new StoreCompressionSettings())))
            {
                archive.CreateEntry("data.bin", "data.bin");                   
                archive.Save(zipFile);
            }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Zip.Saving.XzCompressionSettings">
      <inheritdoc />
      <summary>
            Settings for Xz compression method.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Saving.XzCompressionSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.XzCompressionSettings" /> class.
            </summary>
      <example>
        <code>
            using (Archive archive = new Archive(new ArchiveEntrySettings(new XzCompressionSettings())))
            {
                archive.CreateEntry("data.bin", "data.bin");
                archive.Save(zipFile);
            }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Zip.Saving.ZstandardCompressionSettings">
      <summary>
            Settings for Zstandard compression method.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Saving.EncryptionMethod">
      <summary>
            Encryption/decryption methods can be used with zip archive.
            </summary>
    </member>
    <member name="F:Aspose.Zip.Saving.EncryptionMethod.Traditional">
      <summary>
            Traditional PKWARE encryption.
            </summary>
    </member>
    <member name="F:Aspose.Zip.Saving.EncryptionMethod.AES128">
      <summary>
            Advanced Encryption Standard with key length 128 bits.
            </summary>
    </member>
    <member name="F:Aspose.Zip.Saving.EncryptionMethod.AES192">
      <summary>
            Advanced Encryption Standard with key length 192 bits.
            </summary>
    </member>
    <member name="F:Aspose.Zip.Saving.EncryptionMethod.AES256">
      <summary>
            Advanced Encryption Standard with key length 256 bits.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Saving.SevenZipAESEncryptionSettings">
      <inheritdoc />
      <summary>
            Settings for AES encryption or decryption algorithm.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Saving.SevenZipAESEncryptionSettings.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.SevenZipAESEncryptionSettings" /> class.
            </summary>
      <param name="password">Password for encryption or decryption.</param>
      <example>
        <code>
             using (var archive = new SevenZipArchive(new SevenZipEntrySettings(null, new SevenZipAESEncryptionSettings("p@s$"))))
             {
                archive.CreateEntry("data.bin", "data.bin");
                archive.Save("archive.7z");
             }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Saving.SevenZipAESEncryptionSettings.#ctor(Aspose.Zip.Crypto.SevenZipCipher)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.SevenZipAESEncryptionSettings" /> class with external cipher.
            </summary>
      <param name="cipher">Custom AES implementation.</param>
      <example>
        <code>
             SevenZipCipher cipher = ComposeMyCipher();
             using (var archive = new SevenZipArchive(new SevenZipEntrySettings(null, new SevenZipAESEncryptionSettings(cipher))))
             {
                archive.CreateEntry("data.bin", "data.bin");
                archive.Save("archive.7z");
             }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Zip.Saving.SevenZipBZip2CompressionSettings">
      <inheritdoc />
      <summary>
            Settings for BZip2 compression method within 7z archive.
            </summary>
      <remarks>
        <para>
             Bzip2 compresses files using the Burrows-Wheeler block sorting text compression algorithm, and Huffman coding.
            </para>
        <para>
            See more: https://en.wikipedia.org/wiki/Bzip2 </para>
      </remarks>
    </member>
    <member name="P:Aspose.Zip.Saving.SevenZipBZip2CompressionSettings.BlockSize">
      <summary>
            Block size in hundreds of kilobytes.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.SevenZipBZip2CompressionSettings.Method">
      <inheritdoc />
      <summary>
            Gets compression or decompression method.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Saving.SevenZipBZip2CompressionSettings.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.SevenZipBZip2CompressionSettings" /> class.
            </summary>
      <param name="blockSize">Block size in hundreds of kilobytes.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="blockSize" /> is too big or too small.</exception>
    </member>
    <member name="M:Aspose.Zip.Saving.SevenZipBZip2CompressionSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.SevenZipBZip2CompressionSettings" /> class with default block size, equals to 9 hundred of kilobytes.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Saving.SevenZipCompressionMethod">
      <summary>
            Methods of compression that 7Z format support.
            </summary>
    </member>
    <member name="F:Aspose.Zip.Saving.SevenZipCompressionMethod.Store">
      <summary>
            The file is stored (no compression).
            </summary>
    </member>
    <member name="F:Aspose.Zip.Saving.SevenZipCompressionMethod.LZMA">
      <summary>
            File is compressed using LZMA.
            </summary>
    </member>
    <member name="F:Aspose.Zip.Saving.SevenZipCompressionMethod.LZMA2">
      <summary>
            File is compressed using LZMA2.
            </summary>
    </member>
    <member name="F:Aspose.Zip.Saving.SevenZipCompressionMethod.PPMd">
      <summary>
            File is compressed using PPMd.
            </summary>
    </member>
    <member name="F:Aspose.Zip.Saving.SevenZipCompressionMethod.BZip2">
      <summary>
            File is compressed using Bzip2.
            </summary>
    </member>
    <member name="F:Aspose.Zip.Saving.SevenZipCompressionMethod.BCJ">
      <summary>
            Technique that improves the compression of machine code.
            </summary>
    </member>
    <member name="F:Aspose.Zip.Saving.SevenZipCompressionMethod.AES">
      <summary>
            File is encrypted.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Saving.SevenZipCompressionSettings">
      <summary>
            Settings needed for 7z compressor or decompressor to work.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.SevenZipCompressionSettings.Method">
      <summary>
            Gets compression or decompression method.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Saving.SevenZipEncryptionSettings">
      <summary>
            Base class for settings for several 7z encryption methods.
            </summary>
      <remarks>
            The AES-256 is the only possible encryption method for 7z archive. So the <see cref="T:Aspose.Zip.Saving.SevenZipAESEncryptionSettings" /> is the only implementation.
            </remarks>
    </member>
    <member name="M:Aspose.Zip.Saving.SevenZipEncryptionSettings.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.SevenZipEncryptionSettings" /> class.
            </summary>
      <param name="password">Password for encryption or decryption.</param>
    </member>
    <member name="M:Aspose.Zip.Saving.SevenZipEncryptionSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.SevenZipEncryptionSettings" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.SevenZipEncryptionSettings.Password">
      <summary>
            Gets or sets password for encryption or decryption.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Saving.SevenZipEntrySettings">
      <summary>
            Settings used to compress or decompress 7Z entries.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.SevenZipEntrySettings.CompressionSettings">
      <summary>
            Gets settings for compression or decompression routine.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.SevenZipEntrySettings.EncryptionSettings">
      <summary>
            Gets settings for encryption or decryption. Settings of particular entry may vary.
            </summary>
      <remarks>
            The <see cref="T:Aspose.Zip.Saving.SevenZipAESEncryptionSettings" /> is only option of 7Z archives.
            </remarks>
    </member>
    <member name="P:Aspose.Zip.Saving.SevenZipEntrySettings.CompressHeader">
      <summary>
            Gets or sets value indicating whether to compress archive header.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Saving.SevenZipEntrySettings.#ctor(Aspose.Zip.Saving.SevenZipCompressionSettings,Aspose.Zip.Saving.SevenZipEncryptionSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.SevenZipEntrySettings" /> class.
            </summary>
      <param name="compressionSettings">Settings for compression. Pass null for default LZMA settings.
            <para>
            Can be one of these:
            <list type="bullet"><item><term><see cref="T:Aspose.Zip.Saving.SevenZipLZMACompressionSettings" /></term></item><item><term><see cref="T:Aspose.Zip.Saving.SevenZipLZMA2CompressionSettings" /></term></item><item><term><see cref="T:Aspose.Zip.Saving.SevenZipBZip2CompressionSettings" /></term></item><item><term><see cref="T:Aspose.Zip.Saving.SevenZipStoreCompressionSettings" /></term></item></list></para></param>
      <param name="encryptionSettings">Settings for encryption. Pass null if no need to encrypt or decrypt.
            <para>Can be only one:
            <list type="bullet"><item><term><see cref="T:Aspose.Zip.Saving.SevenZipAESEncryptionSettings" /></term></item></list></para></param>
    </member>
    <member name="T:Aspose.Zip.Saving.SevenZipLZMA2CompressionSettings">
      <inheritdoc />
      <summary>
            Settings for LZMA2 compression method within 7z archive.
            </summary>
      <remarks>
        <para>
            LZMA2 supports multiple runs of compressed LZMA data and uncompressed data.
            </para>
        <para>
            See more: https://en.wikipedia.org/wiki/Lempel–Ziv–Markov_chain_algorithm </para>
      </remarks>
    </member>
    <member name="M:Aspose.Zip.Saving.SevenZipLZMA2CompressionSettings.#ctor(System.Int32)">
      <summary>
            Instantiates settings for LZMA2 compression method within 7z archive.
            </summary>
      <param name="dictionarySize">Size of history buffer, must be between 4096 and 1073741824.</param>
      <remarks>The bigger the dictionary, the better the compression ratio usually is, but dictionaries bigger than the uncompressed data are waste of RAM. </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dictionarySize" /> is too big or too small.</exception>
    </member>
    <member name="M:Aspose.Zip.Saving.SevenZipLZMA2CompressionSettings.#ctor(System.Int32,System.Int32)">
      <summary>
            Instantiates settings for LZMA2 compression method within 7z archive.
            </summary>
      <param name="dictionarySize">Size of history buffer, must be between 4096 and 1073741824.</param>
      <param name="fastBytes">Controls number of fast bytes used by the LZMA2 compressors. A larger number of fast bytes can provide a better compression ratio at the expense of compression speed.</param>
      <remarks>The bigger the dictionary, the better the compression ratio usually is, but dictionaries bigger than the uncompressed data are waste of RAM. </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dictionarySize" /> is too big or too small, or <paramref name="fastBytes" /> is too big or too small.</exception>
    </member>
    <member name="P:Aspose.Zip.Saving.SevenZipLZMA2CompressionSettings.Method">
      <inheritdoc />
      <summary>
            Gets compression or decompression method.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.SevenZipLZMA2CompressionSettings.CompressionThreads">
      <summary>
            Gets or sets compression thread count. If the value greater than 1, multithreading compression will be used.
            </summary>
      <remarks>Do not set this number more than CPU cores.</remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of threads is more than 32.</exception>
    </member>
    <member name="P:Aspose.Zip.Saving.SevenZipLZMA2CompressionSettings.DictionarySize">
      <summary>
            Dictionary (history buffer) size indicates how many bytes of the recently processed uncompressed data is kept in memory.
            </summary>
      <remarks>The bigger the dictionary, the better the compression ratio usually is, but dictionaries bigger than the uncompressed data are waste of RAM. </remarks>
    </member>
    <member name="P:Aspose.Zip.Saving.SevenZipLZMA2CompressionSettings.FastBytes">
      <summary>
            Gets the controls number of fast bytes used by the LZMA2 compressor.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Saving.SevenZipLZMACompressionSettings">
      <inheritdoc />
      <summary>
            Settings for LZMA compression method within 7z archive.
            </summary>
      <remarks>
        <para>
            The Lempel–Ziv–Markov chain algorithm (LZMA) is an algorithm used to perform lossless data compression.
            This algorithm uses a dictionary compression scheme somewhat similar to the LZ77 algorithm and features a high compression ratio and a variable compression-dictionary size.
            </para>
        <para>
            See more: https://en.wikipedia.org/wiki/Lempel–Ziv–Markov_chain_algorithm </para>
      </remarks>
    </member>
    <member name="P:Aspose.Zip.Saving.SevenZipLZMACompressionSettings.Method">
      <inheritdoc />
      <summary>
            Gets compression or decompression method.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.SevenZipLZMACompressionSettings.DictionarySize">
      <summary>
            Dictionary (history buffer) size indicates how many bytes of the recently processed uncompressed data is kept in memory.
            If not set, will be chosen accordingly to entry size.
            </summary>
      <remarks>The bigger the dictionary, the better the compression ratio usually is, but dictionaries bigger than the uncompressed data are waste of RAM. </remarks>
    </member>
    <member name="T:Aspose.Zip.Saving.SevenZipPPMdCompressionSettings">
      <inheritdoc />
      <summary>
            Settings for PPMd compression method within 7z archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.SevenZipPPMdCompressionSettings.Method">
      <inheritdoc />
      <summary>
             Gets compression or decompression method.
             </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.SevenZipPPMdCompressionSettings.MaxOrder">
      <summary>
            Gets the maximum order.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.SevenZipPPMdCompressionSettings.SuballocatorSize">
      <summary>
            Gets the sub-allocator size in MB.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Saving.SevenZipPPMdCompressionSettings.#ctor(System.Byte,System.Int32)">
      <summary>
            Instantiates settings for PPMd compression method within 7z archive.
            </summary>
      <remarks>
        <para>Bigger model orders almost surely results in better compression and surely more memory and CPU usage.</para>
        <para>The PPMd algorithm might need a lot of memory, especially when used on large files and/or used with large model order.
            If ppmd needs more memory than you give it, the compression will be worse.</para>
      </remarks>
      <param name="maxOrder">Maximum order.</param>
      <param name="suballocatorSize">Memory size in MB suballocator may consume.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxOrder" /> is not between 2 and 32, or <paramref name="suballocatorSize" /> is not between 1 and 1024.</exception>
      <example>
        <code>
            using (SevenZipArchive archive = new SevenZipArchive(new SevenZipEntrySettings(new SevenZipPPMdCompressionSettings(4, 32))))
            {
                archive.CreateEntry("data.bin", "data.bin");                        
                archive.Save(sevenZipFile);
             }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Saving.SevenZipPPMdCompressionSettings.#ctor">
      <summary>
            Instantiates settings for PPMd compression method within 7z archive with default model order and sub-allocator size.
            </summary>
      <remarks>
            Default model order is 6 and sub-allocator size is 16MB.
            </remarks>
      <example>
        <code>
            using (SevenZipArchive archive = new SevenZipArchive(new SevenZipEntrySettings(new SevenZipPPMdCompressionSettings())))
            {
                archive.CreateEntry("data.bin", "data.bin");                        
                archive.Save(sevenZipFile);
             }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Zip.Saving.SevenZipStoreCompressionSettings">
      <inheritdoc />
      <summary>
            Settings for Store compression method within 7z archive.
            </summary>
      <remarks>
            This method stores original data as it is.
            </remarks>
    </member>
    <member name="P:Aspose.Zip.Saving.SevenZipStoreCompressionSettings.Method">
      <inheritdoc />
      <summary>
            Gets compression or decompression method.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Saving.SplitSevenZipArchiveSaveOptions">
      <summary>
            Options for saving a multi-volume 7-zip archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.SplitSevenZipArchiveSaveOptions.SegmentSize">
      <summary>
            Gets the size of segment.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.SplitSevenZipArchiveSaveOptions.FileName">
      <summary>
            Gets the name of segments without extension.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Saving.SplitSevenZipArchiveSaveOptions.#ctor(System.String,System.UInt32)">
      <summary>
            Instantiates settings for saving a multi-volume 7z archive.
            </summary>
      <param name="fileName">Name for volumes. May be with or without .7z extension.</param>
      <param name="segmentSize">Size of volume.</param>
      <remarks>
        <para>Some volumes may be less than <paramref name="segmentSize" />. In most cases the last segment will be less but rarely regular segments might be too.</para>
        <para>Names of files will be as follows: <paramref name="fileName" />.7z.001, <paramref name="fileName" />.7z.002, ...,  <paramref name="fileName" />.7z.(n).</para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="segmentSize" /> is less than 100.</exception>
    </member>
    <member name="T:Aspose.Zip.Saving.AesEcryptionSettings">
      <inheritdoc />
      <summary>
            Settings for AES encryption or decryption algorithm.
            </summary>
      <remarks>
            See more at https://www.winzip.com/win/en/aes_info.html
            </remarks>
    </member>
    <member name="M:Aspose.Zip.Saving.AesEcryptionSettings.#ctor(System.String,Aspose.Zip.Saving.EncryptionMethod)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.AesEcryptionSettings" /> class.
            </summary>
      <param name="password">Password for encryption or decryption.</param>
      <param name="method">Algorithm option indicating block size of cipher.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="method" /> is not one of <see cref="F:Aspose.Zip.Saving.EncryptionMethod.AES128" />, <see cref="F:Aspose.Zip.Saving.EncryptionMethod.AES192" />, or <see cref="F:Aspose.Zip.Saving.EncryptionMethod.AES256" />.</exception>
      <example>
        <code>
             using (var archive = new Archive(new ArchiveEntrySettings(null, new AesEcryptionSettings("p@s$", EncryptionMethod.AES256))))
             {
                archive.CreateEntry("data.bin", "data.bin");
                archive.Save("archive.zip");
             }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Saving.AesEcryptionSettings.#ctor(Aspose.Zip.Saving.EncryptionMethod)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.AesEcryptionSettings" /> class without a password.
            </summary>
      <param name="method">Algorithm option indicating block size of cipher.</param>
    </member>
    <member name="T:Aspose.Zip.Saving.ArchiveEntrySettings">
      <summary>
            Settings used to compress or decompress entries.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Saving.ArchiveEntrySettings.#ctor(Aspose.Zip.Saving.CompressionSettings,Aspose.Zip.Saving.EncryptionSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.ArchiveEntrySettings" /> class.
            </summary>
      <param name="compressionSettings">Settings for compression. Pass null for default deflate settings.
            <para>
            Can be one of these:
            <list type="bullet"><item><term><see cref="T:Aspose.Zip.Saving.DeflateCompressionSettings" /></term></item><item><term><see cref="T:Aspose.Zip.Saving.StoreCompressionSettings" /></term></item><item><term><see cref="T:Aspose.Zip.Saving.Bzip2CompressionSettings" /></term></item><item><term><see cref="T:Aspose.Zip.Saving.LzmaCompressionSettings" /></term></item><item><term><see cref="T:Aspose.Zip.Saving.PPMdCompressionSettings" /></term></item></list></para></param>
      <param name="encryptionSettings">Settings for encryption. Pass null if no need to encrypt or decrypt.
            <para>Can be one of these:
            <list type="bullet"><item><term><see cref="T:Aspose.Zip.Saving.TraditionalEncryptionSettings" /></term></item><item><term><see cref="T:Aspose.Zip.Saving.AesEcryptionSettings" /></term></item></list></para></param>
    </member>
    <member name="P:Aspose.Zip.Saving.ArchiveEntrySettings.CompressionSettings">
      <summary>
            Gets settings for compression or decompression routine.
            </summary>
      <remarks>
            Can be one of these:
            <list type="bullet"><item><term><see cref="T:Aspose.Zip.Saving.DeflateCompressionSettings" /></term></item><item><term><see cref="T:Aspose.Zip.Saving.StoreCompressionSettings" /></term></item><item><term><see cref="T:Aspose.Zip.Saving.Bzip2CompressionSettings" /></term></item><item><term><see cref="T:Aspose.Zip.Saving.LzmaCompressionSettings" /></term></item><item><term><see cref="T:Aspose.Zip.Saving.PPMdCompressionSettings" /></term></item></list></remarks>
    </member>
    <member name="P:Aspose.Zip.Saving.ArchiveEntrySettings.EncryptionSettings">
      <summary>
            Gets settings for encryption or decryption. Settings of particular entry may vary.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <term>
              <see cref="T:Aspose.Zip.Saving.TraditionalEncryptionSettings" />
            </term>
          </item>
          <item>
            <term>
              <see cref="T:Aspose.Zip.Saving.AesEcryptionSettings" />
            </term>
          </item>
        </list>
      </remarks>
    </member>
    <member name="T:Aspose.Zip.Saving.ArchiveSaveOptions">
      <summary>
            Options for saving a zip archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.ArchiveSaveOptions.Encoding">
      <summary>
            Gets or sets encoding for converting file names and other strings to bytes.
            </summary>
      <remarks>
            If not set, code page 437 will be used.
            </remarks>
    </member>
    <member name="P:Aspose.Zip.Saving.ArchiveSaveOptions.ArchiveComment">
      <summary>
            Gets or sets optional comment for the Zip file.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.ArchiveSaveOptions.ParallelOptions">
      <summary>
            Gets or sets settings for parallel compression.
            </summary>
      <remarks>
            Assign it if you want to utilize several CPU cores while compressing several archive entries.
            </remarks>
    </member>
    <member name="P:Aspose.Zip.Saving.ArchiveSaveOptions.SelfExtractorOptions">
      <summary>
            Gets or sets settings for self extracted archive.
            </summary>
      <remarks>Assign it if you need to compose executable program to extract an archive without any software installed on the target computer.</remarks>
    </member>
    <member name="P:Aspose.Zip.Saving.ArchiveSaveOptions.EventsBag">
      <summary>
            Gets or sets container of events raising on archive saving.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.ArchiveSaveOptions.EncryptionOptions">
      <summary>
            Gets of sets encryption settings for saving existing zip archive.
            </summary>
      <remarks>
            Do not use this options for regular composition of encrypted archive.
            </remarks>
      <example>
        <code>
            using (var archive = new Archive("plain.zip"))
            {                   
                 archive.Save("encrypted.zip", new ArchiveSaveOptions() { EncryptionOptions = new AesEcryptionSettings("p@s$", EncryptionMethod.AES256) });
            }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Zip.Saving.ParallelCompressionMode">
      <summary>
            Options of usage parallel compression facility.
            </summary>
    </member>
    <member name="F:Aspose.Zip.Saving.ParallelCompressionMode.Never">
      <summary>
            Do not compress in parallel.
            </summary>
      <example>
        <code>
            using (Archive archive = new Archive())
            {
                archive.CreateEntry("filename.bin", "filename.bin");
                archive.CreateEntry("filename1.bin", "filename1.bin");
                archive.CreateEntry("filename2.bin", "filename2.bin");
                archive.Save(destination, new ArchiveSaveOptions() { ParallelOptions = new ParallelOptions { ParallelCompressInMemory = ParallelCompressionMode.Never }});
            }
            </code>
      </example>
    </member>
    <member name="F:Aspose.Zip.Saving.ParallelCompressionMode.Always">
      <summary>
            Do compress in parallel. Beware out of memory.
            </summary>
      <example>
        <code>
            using (Archive archive = new Archive())
            {
                archive.CreateEntry("filename.bin", "filename.bin");
                archive.CreateEntry("filename1.bin", "filename1.bin");
                archive.CreateEntry("filename2.bin", "filename2.bin");
                archive.Save(destination, new ArchiveSaveOptions() { ParallelOptions = new ParallelOptions { ParallelCompressInMemory = ParallelCompressionMode.Always }});
            }
            </code>
      </example>
    </member>
    <member name="F:Aspose.Zip.Saving.ParallelCompressionMode.Auto">
      <summary>
            Decide if use parallel compression or not upon the entries.
            This option may compress in parallel some entries only.
            </summary>
      <example>
        <code>
            using (Archive archive = new Archive())
            {
                archive.CreateEntry("filename.bin", "filename.bin");
                archive.CreateEntry("filename1.bin", "filename1.bin");
                archive.CreateEntry("filename2.bin", "filename2.bin");
                archive.Save(destination, new ArchiveSaveOptions() { ParallelOptions = new ParallelOptions { ParallelCompressInMemory = ParallelCompressionMode.Auto }});
            }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Zip.Saving.ParallelOptions">
      <summary>
            Options for parallel compression.
            </summary>
      <remarks>
            These options manage simultaneous compression by several CPU cores.
            </remarks>
      <example>
        <code>
            using (var archive = new Archive())
            {
                archive.CreateEntries("DirToCompress");
                archive.Save("archive.zip", new ArchiveSaveOptions() { ParallelOptions = new ParallelOptions { ParallelCompressInMemory = mode, AvailableMemorySize = 4000 } });
            }
            </code>
      </example>
    </member>
    <member name="P:Aspose.Zip.Saving.ParallelOptions.ParallelCompressInMemory">
      <summary>
            Gets or sets value indicating how parallel approach to be used.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.ParallelOptions.AvailableMemorySize">
      <summary>
            Gets or sets memory estimate in megabytes available to accomodate compressed entries without swap to disk.
            This value only makes sense if <see cref="P:Aspose.Zip.Saving.ParallelOptions.ParallelCompressInMemory" /> setting is in <see cref="F:Aspose.Zip.Saving.ParallelCompressionMode.Auto" /> mode.
            </summary>
      <remarks>
            This value is used to calculate biggest size of entry that can be compressed in parallel with others. All entries above the calculated threshold will be compressed sequentially.
            It is safe to have <see cref="P:Aspose.Zip.Saving.ParallelOptions.AvailableMemorySize" /> property as big as free RAM and even bigger. By default it is assumed you have at least 200MB per CPU core.
            </remarks>
    </member>
    <member name="T:Aspose.Zip.Saving.SelfExtractorOptions">
      <summary>
            Options for creation of self-extracting executable archive.
            </summary>
      <remarks>
            Self-extracting archive can not be composed with metered license: <see cref="!:MeteredLicense" />.
            </remarks>
      <example>
        <code>
            using (FileStream zipFile = File.Open("archive.exe", FileMode.Create))
            {
                using (var archive = new Archive())
                {
                    archive.CreateEntry("entry.bin", "data.bin");
                    var sfxOptions = new SelfExtractorOptions() { ExtractorTitle = "Extractor", CloseWindowOnExtraction = true, TitleIcon = "C:\pictorgam.ico" };
                    archive.Save(zipFile, new ArchiveSaveOptions() { SelfExtractorOptions = sfxOptions });
                }
            }
            </code>
      </example>
    </member>
    <member name="P:Aspose.Zip.Saving.SelfExtractorOptions.ExtractorTitle">
      <summary>
            Gets or sets the title of extractor's window.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.SelfExtractorOptions.TitleIcon">
      <summary>
            Gets or sets path to title icon for main windows of extractor application.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.SelfExtractorOptions.CloseWindowOnExtraction">
      <summary>
            Gets or sets a value indicating whether extractor window must be closed upon extraction or not.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.SelfExtractorOptions.RunAfterExtraction">
      <summary>
            Gets or sets a program to be executed after the archive extraction is completed. 
            </summary>
    </member>
    <member name="T:Aspose.Zip.Saving.SplitArchiveSaveOptions">
      <summary>
            Options for saving a multi-volume zip archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.SplitArchiveSaveOptions.SegmentSize">
      <summary>
            Gets the size of segment.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.SplitArchiveSaveOptions.FileName">
      <summary>
            Gets the name of segments without extension.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.SplitArchiveSaveOptions.ArchiveComment">
      <summary>
            Gets or sets optional comment for the Zip file.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Saving.SplitArchiveSaveOptions.Encoding">
      <summary>
            Gets or sets encoding for converting file names and other strings to bytes.
            </summary>
      <remarks>
            If not set, code page 437 will be used.
            </remarks>
    </member>
    <member name="M:Aspose.Zip.Saving.SplitArchiveSaveOptions.#ctor(System.String,System.UInt32)">
      <summary>
            Instantiates settings for saving a multi-volume zip archive.
            </summary>
      <param name="fileName">Name for volumes. May be with or without .zip extension.</param>
      <param name="segmentSize">Size of volume.</param>
      <remarks>
        <para>Some volumes may be less than <paramref name="segmentSize" />. In most cases the last segment will be less but rarely regular segments might be too.</para>
        <para>Names of files will be as follows: <paramref name="fileName" />.z01, <paramref name="fileName" />.z02, ...,  <paramref name="fileName" />.z(n-1),  <paramref name="fileName" />.zip.</para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">Segment size is less than 65536 bytes.</exception>
    </member>
    <member name="T:Aspose.Zip.Saving.TraditionalEncryptionSettings">
      <inheritdoc />
      <summary>
            Settings for traditional ZipCrypto algorithm.
            </summary>
      <remarks>
            See section 6.0 at ZIP format description: https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT
            </remarks>
    </member>
    <member name="M:Aspose.Zip.Saving.TraditionalEncryptionSettings.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.TraditionalEncryptionSettings" /> class.
            </summary>
      <param name="password">Password for encryption.</param>
      <example>
        <code>
            using (var archive = new Archive(new ArchiveEntrySettings(null, new TraditionalEncryptionSettings("p@s$"))))
            {
                archive.CreateEntry("data.bin", "data.bin");
                archive.Save(zipFile);
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Saving.TraditionalEncryptionSettings.#ctor(System.String,System.Text.Encoding)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.TraditionalEncryptionSettings" /> class with user defined encoding.
            </summary>
      <remarks>Usage of this constructor is discouraged. Setting the encoding may contradict the standard and produce incompatible archive.</remarks>
      <param name="password">Password for encryption.</param>
      <param name="encoding">Encoding for password characters.</param>
      <example>
        <code>
            using (var archive = new Archive(new ArchiveEntrySettings(null, new TraditionalEncryptionSettings("p£s$", System.Text.Encoding.ASCII))))
            {
                archive.CreateEntry("data.bin", "data.bin");
                archive.Save(zipFile);
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Saving.TraditionalEncryptionSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Saving.TraditionalEncryptionSettings" /> class without a password.
            </summary>
    </member>
    <member name="T:Aspose.Zip.ComHelper">
      <summary>
            Provides methods for COM clients to load archives into Aspose.Zip.
            </summary>
      <remarks>
            Use the ComHelper class to load an archive from a file or stream.
            Particular classes provide a default constructor to create a new archive
            and also provides overloaded constructors to load an archive from a file or stream.
            If you are using Aspose.Zip from a .NET application, you can use all of the archives
            constructors directly, but if you are using Aspose.Zip from a COM application,
            only the default archive constructor is available.
            </remarks>
    </member>
    <member name="M:Aspose.Zip.ComHelper.#ctor">
      <summary>
            Initializes a new instance of this class.
            </summary>
    </member>
    <member name="M:Aspose.Zip.ComHelper.OpenGzip(System.IO.Stream)">
      <summary>
            Allows a COM application to load a gzip archive from a stream.
            </summary>
      <param name="stream">A .NET stream object that contains the archive to load.</param>
      <returns>A <see cref="T:Aspose.Zip.Gzip.GzipArchive" /> object that represents the archive.</returns>
    </member>
    <member name="M:Aspose.Zip.ComHelper.OpenGzip(System.String)">
      <summary>
            Allows a COM application to load a gzip archive from a file.        
            </summary>
      <param name="fileName">Filename of the archive to load.</param>
      <returns>A <see cref="T:Aspose.Zip.Gzip.GzipArchive" /> object that represents the archive.</returns>
    </member>
    <member name="M:Aspose.Zip.ComHelper.OpenZip(System.IO.Stream)">
      <summary>
            Allows a COM application to load a zip archive from a stream.
            </summary>
      <param name="stream">A .NET stream object that contains the archive to load.</param>
      <returns>A <see cref="T:Aspose.Zip.Archive" /> object that represents the archive.</returns>
    </member>
    <member name="M:Aspose.Zip.ComHelper.OpenZip(System.String)">
      <summary>
            Allows a COM application to load a zip archive from a file.        
            </summary>
      <param name="fileName">Filename of the archive to load.</param>
      <returns>A <see cref="T:Aspose.Zip.Archive" /> object that represents the archive.</returns>
    </member>
    <member name="M:Aspose.Zip.ComHelper.OpenRar(System.IO.Stream)">
      <summary>
            Allows a COM application to load a rar archive from a stream.
            </summary>
      <param name="stream">A .NET stream object that contains the archive to load.</param>
      <returns>A <see cref="T:Aspose.Zip.Rar.RarArchive" /> object that represents the archive.</returns>
    </member>
    <member name="M:Aspose.Zip.ComHelper.OpenRar(System.String)">
      <summary>
            Allows a COM application to load a rar archive from a file.        
            </summary>
      <param name="fileName">Filename of the archive to load.</param>
      <returns>A <see cref="T:Aspose.Zip.Rar.RarArchive" /> object that represents the archive.</returns>
    </member>
    <member name="M:Aspose.Zip.ComHelper.OpenBzip2(System.IO.Stream)">
      <summary>
            Allows a COM application to load a bzip2 archive from a stream.
            </summary>
      <param name="stream">A .NET stream object that contains the archive to load.</param>
      <returns>A <see cref="T:Aspose.Zip.Bzip2.Bzip2Archive" /> object that represents the archive.</returns>
    </member>
    <member name="M:Aspose.Zip.ComHelper.OpenBzip2(System.String)">
      <summary>
            Allows a COM application to load a bzip2 archive from a file.        
            </summary>
      <param name="fileName">Filename of the archive to load.</param>
      <returns>A <see cref="T:Aspose.Zip.Bzip2.Bzip2Archive" /> object that represents the archive.</returns>
    </member>
    <member name="T:Aspose.Zip.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Zip" /> namespace contains classes which represent zip archive and common archive related entities.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Gzip.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Zip.Gzip" /> namespace contains classes which represent gzip archive.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Gzip.GzipArchive">
      <summary>
            This class represents gzip archive file. Use it to compose or extract gzip archives.
            </summary>
      <remarks>Gzip compression algorithm is based on the DEFLATE algorithm, which is a combination of LZ77 and Huffman coding.</remarks>
    </member>
    <member name="M:Aspose.Zip.Gzip.GzipArchive.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Gzip.GzipArchive" /> class prepared for compressing.
            </summary>
      <example>
        <para>
            The following example shows how to compress a file.
            </para>
        <code>
            using (GzipArchive archive = new GzipArchive()) 
            {
                archive.SetSource("data.bin");
                archive.Save("archive.gz");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Gzip.GzipArchive.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Gzip.GzipArchive" /> class prepared for decompressing.
            </summary>
      <remarks>
            This constructor does not decompress. See <see cref="M:Aspose.Zip.Gzip.GzipArchive.Open" /> method for decompressing.
            </remarks>
      <param name="sourceStream">The source of the archive.</param>
      <param name="parseHeader">Whether to parse stream header to figure out properties, including name. Makes sense for seekable stream only.</param>
      <example>
        <para>Open an archive from a stream and extract it to a <c>MemoryStream</c></para>
        <code>
            var ms = new MemoryStream();
            using (GzipArchive archive = new GzipArchive(File.OpenRead("archive.gz")))
              archive.Open().CopyTo(ms);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Gzip.GzipArchive.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Gzip.GzipArchive" /> class.
            </summary>
      <remarks>
            This constructor does not decompress. See <see cref="M:Aspose.Zip.Gzip.GzipArchive.Open" /> method for decompressing.
            </remarks>
      <param name="path">The path to the archive file.</param>
      <param name="parseHeader">Whether to parse stream header to figure out properties, including name. Makes sense for seekable stream only.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <para>Open an archive from file by path and extract it to a <c>MemoryStream</c></para>
        <code>
            var ms = new MemoryStream();
            using (GzipArchive archive = new GzipArchive("archive.gz"))
              archive.Open().CopyTo(ms);
            </code>
      </example>
    </member>
    <member name="P:Aspose.Zip.Gzip.GzipArchive.Name">
      <summary>
            Name of original file.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Gzip.GzipArchive.SetSource(System.IO.Stream)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="source">The input stream for the archive.</param>
      <example>
        <code>
            using (var archive = new GzipArchive())
            {
                archive.SetSource(new MemoryStream(new byte[] { 0x00, 0xFF }));
                archive.Save("archive.gz");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Gzip.GzipArchive.SetSource(System.IO.FileInfo)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="fileInfo">The reference to a file to be compressed.</param>
      <example>
        <para>Open an archive from a stream and extract it to a <c>MemoryStream</c></para>
        <code>
            using (var archive = new GzipArchive()) 
            {
                archive.SetSource(new FileInfo("data.bin"));
                archive.Save("archive.gz");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Gzip.GzipArchive.SetSource(System.String)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="path">Path to file to be compressed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <para>Open an archive from file by path and extract it to a <c>MemoryStream</c></para>
        <code>
            using (var archive = new GzipArchive()) 
            {
                archive.SetSource("data.bin");
                archive.Save("archive.gz");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Gzip.GzipArchive.SetSource(Aspose.Zip.Tar.TarArchive)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="tarArchive">Tar archive to be compressed.</param>
      <remarks>Use this method to compose joint tar.gz archive.</remarks>
      <example>
        <code>
            using (var tarArchive = new TarArchive())
            {
                tarArchive.CreateEntry("first.bin", "data1.bin");
                tarArchive.CreateEntry("second.bin", "data2.bin");
                using (var gzippedArchive = new GzipArchive())
                {
                       gzippedArchive.SetSource(tarArchive);
                       gzippedArchive.Save("archive.tar.gz");
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Gzip.GzipArchive.Dispose">
      <inheritdoc />
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Gzip.GzipArchive.Open">
      <summary>
            Opens the archive for extraction and provides a stream with archive content.
            </summary>
      <returns>The stream that represents the contents of the archive.</returns>
      <remarks>
            Read from the stream to get original content of file. See examples section.
            </remarks>
      <example>
        <para>Extracts the archive and copies extracted content to file stream.</para>
        <code>        
            using (var archive = new GzipArchive("archive.gz"))
            {
                using (var extracted = File.Create("data.bin"))
                {
                    var unpacked = archive.Open();
                    byte[] b = new byte[8192];
                    int bytesRead;
                    while (0 &lt; (bytesRead = unpacked.Read(b, 0, b.Length)))
                        extracted.Write(b, 0, bytesRead);
                }            
            }
            </code>
        <para>
            You may use Stream.CopyTo method for .NET 4.0 and higher:
            <code>
            unpacked.CopyTo(extracted);
            </code></para>
      </example>
    </member>
    <member name="M:Aspose.Zip.Gzip.GzipArchive.Extract(System.IO.Stream)">
      <summary>
            Extracts the archive to the stream provided.
            </summary>
      <param name="destination">Destination stream. Must be writable.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not support writing.</exception>
      <example>
        <code>
            using (var archive = new GzipArchive("archive.gz"))
            {
                 archive.Extract(httpResponseStream);
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Gzip.GzipArchive.Save(System.IO.Stream)">
      <summary>
            Saves archive to the stream provided.
            </summary>
      <param name="outputStream">Destination stream.</param>
      <remarks>
        <para>
          <paramref name="outputStream" /> must be writable.</para>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="outputStream" /> is not writable.</exception>
      <exception cref="T:System.InvalidOperationException">Source has not been supplied.</exception>
      <example>
        <para>Writes compressed data to http response stream.</para>
        <code>
            using (var archive = new GzipArchive()) 
            {
                archive.SetSource(new FileInfo("data.bin"));
                archive.Save(httpResponse.OutputStream);
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Gzip.GzipArchive.Save(System.String)">
      <summary>
            Saves archive to destination file provided.
            </summary>
      <param name="destinationFileName">The path of the archive to be created. If the specified file name points to an existing file, it will be overwritten.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="destinationFileName" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="destinationFileName" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="destinationFileName" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="destinationFileName" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (var archive = new GzipArchive())
            {
                archive.SetSource("data.bin");
                archive.Save("archive.gz");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Gzip.GzipArchive.Dispose(System.Boolean)">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <param name="disposing">Whether managed resources should be disposed.</param>
    </member>
    <member name="M:Aspose.Zip.Gzip.GzipArchive.ExtractToDirectory(System.String)">
      <summary>
            Extracts content of the archive to the directory provided.
            </summary>
      <param name="destinationDirectory">The path to the directory to place the extracted files in.</param>
      <remarks>If the directory does not exist, it will be created.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectory" /> is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access existing directory.</exception>
      <exception cref="T:System.NotSupportedException">If directory does not exist, path contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationDirectory" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the System.IO.Path.GetInvalidPathChars method. 
            -or- path is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.IO.IOException">The directory specified by path is a file. -or- The network name is not known.</exception>
    </member>
    <member name="M:Aspose.Zip.Gzip.GzipArchive.Extract(System.String)">
      <summary>
            Extracts the archive to the file by path.
            </summary>
      <param name="path">The path to destination file. If the file already exists, it will be overwritten.</param>
      <returns>Info of extracted file.</returns>
    </member>
    <member name="T:Aspose.Zip.FastLZ.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Zip.FastLZ" /> namespace contains classes which represent FastLZ related entities.
            </summary>
    </member>
    <member name="T:Aspose.Zip.FastLZ.FastLZStream">
      <summary>
            A stream wrapper that compresses data with FastLZ. Implements decorator pattern.
            </summary>
    </member>
    <member name="M:Aspose.Zip.FastLZ.FastLZStream.#ctor(System.IO.Stream,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.FastLZ.FastLZStream" /> class prepared for compression.
            </summary>
      <param name="stream">The stream for saving compressed data.</param>
      <param name="compressionLevel">Use 1 for faster compression, use 2 for better compression ratio.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> does not support writing.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="compressionLevel" /> is more than 2 or less than 1.</exception>
    </member>
    <member name="M:Aspose.Zip.FastLZ.FastLZStream.Write(System.Byte[],System.Int32,System.Int32)">
      <inheritdoc />
      <summary>
            Writes a sequence of bytes to the compressing stream and advances the current position within this stream by the number of bytes written.
            </summary>
      <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
      <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
      <param name="count">The number of bytes to be written to the current stream.</param>
    </member>
    <member name="M:Aspose.Zip.FastLZ.FastLZStream.Flush">
      <inheritdoc />
      <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
    </member>
    <member name="M:Aspose.Zip.FastLZ.FastLZStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <inheritdoc />
      <summary>
            Sets the position within the current stream.
            </summary>
      <param name="offset">A byte offset relative to the origin parameter.</param>
      <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
      <returns>The new position within the current stream.</returns>
    </member>
    <member name="M:Aspose.Zip.FastLZ.FastLZStream.SetLength(System.Int64)">
      <inheritdoc />
      <summary>
            Sets the length of the current stream.
            </summary>
      <param name="value">The desired length of the current stream in bytes.</param>
    </member>
    <member name="M:Aspose.Zip.FastLZ.FastLZStream.Read(System.Byte[],System.Int32,System.Int32)">
      <inheritdoc />
      <summary>
            Reads a sequence of bytes from the stream and advances the position within the stream by the number of bytes read. Not supported.
            </summary>
      <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
      <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
      <param name="count">The maximum number of bytes to be read from the current stream.</param>
      <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
    </member>
    <member name="P:Aspose.Zip.FastLZ.FastLZStream.CanRead">
      <inheritdoc />
      <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
    </member>
    <member name="P:Aspose.Zip.FastLZ.FastLZStream.CanSeek">
      <inheritdoc />
      <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
    </member>
    <member name="P:Aspose.Zip.FastLZ.FastLZStream.CanWrite">
      <inheritdoc />
      <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
    </member>
    <member name="P:Aspose.Zip.FastLZ.FastLZStream.Length">
      <inheritdoc />
      <summary>
            Gets the length in bytes of the stream.
            </summary>
    </member>
    <member name="P:Aspose.Zip.FastLZ.FastLZStream.Position">
      <summary>
            Gets or sets the position within the current stream.
            </summary>
    </member>
    <member name="M:Aspose.Zip.FastLZ.FastLZStream.Close">
      <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Tar.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Zip.Tar" /> namespace contains classes which represent tar archive related entities.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Tar.TarArchive">
      <summary>
            This class represents tar archive file. Use it to compose, extract, or update tar archives.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Tar.TarArchive" /> class.
            </summary>
      <example>
        <para>The following example shows how to compress a file.</para>
        <code>
            using (var archive = new TarArchive())
            {
                archive.CreateEntry("first.bin", "data.bin");
                archive.Save("archive.tar");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Archive" /> class and composes entries list can be extracted from the archive.
            </summary>
      <remarks>
            This constructor does not unpack any entry. See <see cref="M:Aspose.Zip.Tar.TarEntry.Open" /> method for unpacking.
            </remarks>
      <param name="sourceStream">The source of the archive. It must be seekable.</param>
      <exception cref="T:System.IO.InvalidDataException">
        <paramref name="sourceStream" /> is not seekable.</exception>
      <example>
        <para>The following example shows how to extract all of the entries to a directory.</para>
        <code>
            using (var archive = new TarArchive(File.OpenRead("archive.tar")))
            { 
               archive.ExtractToDirectory("C:\extracted");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Tar.TarArchive" /> class and composes entries list can be extracted from the archive.
            </summary>
      <remarks>
            This constructor does not unpack any entry. See <see cref="M:Aspose.Zip.Tar.TarEntry.Open" /> method for unpacking.
            </remarks>
      <param name="path">The path to the archive file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <para>The following example shows how to extract all of the entries to a directory.</para>
        <code>
            using (var archive = new TarArchive("archive.tar")) 
            { 
               archive.ExtractToDirectory("C:\extracted");
            }
            </code>
      </example>
    </member>
    <member name="P:Aspose.Zip.Tar.TarArchive.Entries">
      <summary>
            Gets entries of <see cref="T:Aspose.Zip.Tar.TarEntry" /> type constituting the archive.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.CreateEntry(System.String,System.IO.Stream,System.IO.FileSystemInfo)">
      <summary>
            Create single entry within the archive.
            </summary>
      <param name="name">The name of the entry.</param>
      <param name="source">The input stream for the entry.</param>
      <param name="fileInfo">The metadata of file or folder to be compressed.</param>
      <returns>Tar entry instance.</returns>
      <remarks>
        <para>The entry name is solely set within <paramref name="name" /> parameter. The file name provided in <paramref name="fileInfo" /> parameter does not affect the entry name.</para>
        <para>
          <paramref name="fileInfo" /> can refer to <see cref="T:System.IO.DirectoryInfo" /> if the entry is directory.</para>
      </remarks>
      <example>
        <code>        
             using (var archive = new TarArchive())
             {
                archive.CreateEntry("bytes", new MemoryStream(new byte[] {0x00, 0xFF}));
                archive.Save(tarFile);
             }
            </code>
      </example>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="name" /> is too long for tar as of IEEE 1003.1-1998 standard.</exception>
      <exception cref="T:System.ArgumentException">File name, as a part of <paramref name="name" />, exceeds 100 symbols.</exception>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.CreateEntry(System.String,System.IO.FileInfo,System.Boolean)">
      <summary>
            Create single entry within the archive.
            </summary>
      <param name="name">The name of the entry.</param>
      <param name="fileInfo">The metadata of file or folder to be compressed.</param>
      <param name="openImmediately">True if open the file immediately, otherwise open the file on archive saving.</param>
      <returns>Tar entry instance.</returns>
      <remarks>
        <para>The entry name is solely set within <paramref name="name" /> parameter. The file name provided in <paramref name="fileInfo" /> parameter does not affect the entry name.</para>
        <para>
          <paramref name="fileInfo" /> can refer to <see cref="T:System.IO.DirectoryInfo" /> if the entry is directory.</para>
        <para>If the file is opened immediately with <paramref name="openImmediately" /> parameter it becomes blocked until archive is disposed.</para>
      </remarks>
      <example>
        <code>
             FileInfo fi = new FileInfo("data.bin");
             using (var archive = new TarArchive())
             {
                archive.CreateEntry("data.bin", fi);
                archive.Save(tarFile);
             }
            </code>
      </example>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="name" /> is too long for tar as of IEEE 1003.1-1998 standard.</exception>
      <exception cref="T:System.ArgumentException">File name, as a part of <paramref name="name" />, exceeds 100 symbols.</exception>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.CreateEntry(System.String,System.String,System.Boolean)">
      <summary>
            Create single entry within the archive.
            </summary>
      <param name="name">The name of the entry.</param>
      <param name="path">Path to file to be compressed.</param>
      <param name="openImmediately">True if open the file immediately, otherwise open the file on archive saving.</param>
      <returns>Tar entry instance.</returns>
      <remarks>
        <para>The entry name is solely set within <paramref name="name" /> parameter. The file name provided in <paramref name="path" /> parameter does not affect the entry name.</para>
        <para>If the file is opened immediately with <paramref name="openImmediately" /> parameter it becomes blocked until archive is disposed.</para>
      </remarks>
      <example>
        <code>
            using (var archive = new TarArchive())
            {
                archive.CreateEntry("first.bin", "data.bin");
                archive.Save(outputTarFile);
            }
            </code>
      </example>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters. - or - File name, as a part of <paramref name="name" />, exceeds 100 symbols.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. - or - <paramref name="name" /> is too long for tar as of IEEE 1003.1-1998 standard.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.CreateEntries(System.IO.DirectoryInfo,System.Boolean)">
      <summary>
            Adds to the archive all the files and directories recursively in the directory given.
            </summary>
      <param name="directory">Directory to compress.</param>
      <param name="includeRootDirectory">Indicates whether to include the root directory itself or not.</param>
      <returns>The archive with entries composed.</returns>
      <example>
        <code>
            using (FileStream tarFile = File.Open("archive.tar", FileMode.Create))
            {
                using (var archive = new TarArchive())
                {
                    archive.CreateEntries(new DirectoryInfo("C:\folder"), false);
                    archive.Save(tarFile);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.CreateEntries(System.String,System.Boolean)">
      <summary>
            Adds to the archive all the files and directories recursively in the directory given.
            </summary>
      <param name="sourceDirectory">Directory to compress.</param>
      <param name="includeRootDirectory">Indicates whether to include the root directory itself or not.</param>
      <returns>The archive with entries composed.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirectory" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access <paramref name="sourceDirectory" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceDirectory" /> contains invalid characters such as ", &lt;, &gt;, or |.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.</exception>
      <example>
        <code>
            using (FileStream tarFile = File.Open("archive.tar", FileMode.Create))
            {
                using (var archive = new TarArchive())
                {
                    archive.CreateEntries("C:\folder", false);
                    archive.Save(tarFile);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.DeleteEntry(Aspose.Zip.Tar.TarEntry)">
      <summary>
            Removes the first occurrence of a specific entry from the entries list.
            </summary>
      <param name="entry">The entry to remove from the entries list.</param>
      <returns>The archive with the entry deleted.</returns>
      <example>
        <para>Here is how you can remove all entries except the last one:</para>
        <code>
            using (var archive = new TarArchive("archive.tar"))
            {
                while (archive.Entries.Count &gt; 1)
                    archive.DeleteEntry(archive.Entries[0]);
                archive.Save(outputTarFile);
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.DeleteEntry(System.Int32)">
      <summary>
            Removes the entry from the entries list by index.
            </summary>
      <param name="entryIndex">The zero-based index of the entry to remove.</param>
      <returns>The archive with the entry deleted.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="entryIndex" /> is less than 0.-or- <paramref name="entryIndex" /> is equal to or greater than <c>Entries</c> count.</exception>
      <example>
        <code>
            using (var archive = new TarArchive("two_files.tar"))
            {
                archive.DeleteEntry(0);
                archive.Save("single_file.tar");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.ExtractToDirectory(System.String)">
      <summary>
            Extracts all the files in the archive to the directory provided.
            </summary>
      <param name="destinationDirectory">The path to the directory to place the extracted files in.</param>
      <remarks>If the directory does not exist, it will be created.</remarks>
      <exception cref="T:System.ArgumentNullException">path is null</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access existing directory.</exception>
      <exception cref="T:System.NotSupportedException">If directory does not exist, path contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the System.IO.Path.GetInvalidPathChars method. -or- path is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.IO.IOException">The directory specified by path is a file. -or- The network name is not known.</exception>
      <example>
        <code>
            using (var archive = new TarArchive("archive.tar")) 
            { 
               archive.ExtractToDirectory("C:\extracted");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.Save(System.IO.Stream,System.Nullable{Aspose.Zip.Tar.TarFormat})">
      <summary>
            Saves archive to the stream provided.
            </summary>
      <param name="output">Destination stream.</param>
      <param name="format">Defines tar header format. Null value will be treated as USTar when possible.</param>
      <remarks>
        <para>
          <paramref name="output" /> must be writable.</para>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="output" /> is not writable. - or - <paramref name="output" /> is the same stream we extract from.
            - OR -
            It is impossible to save archive in <paramref name="format" /> due to format restrictions.</exception>
      <example>
        <code>
            using (FileStream tarFile = File.Open("archive.tar", FileMode.Create))
            {
                using (var archive = new TarArchive())
                {
                    archive.CreateEntry("entry1", "data.bin");        
                    archive.Save(tarFile);
                }
            }       
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.Save(System.String,System.Nullable{Aspose.Zip.Tar.TarFormat})">
      <summary>
            Saves archive to destination file provided.
            </summary>
      <param name="destinationFileName">The path of the archive to be created. If the specified file name points to an existing file, it will be overwritten.</param>
      <param name="format">Defines tar header format. Null value will be treated as USTar when possible.</param>
      <remarks>
        <para>It is possible to save an archive to the same path as it was loaded from.
            However, this is not recommended because this approach uses copying to temporary file.</para>
      </remarks>
      <example>
        <code>
            using (var archive = new TarArchive())
            {
                archive.CreateEntry("entry1", "data.bin");        
                archive.Save("myarchive.tar");
            }       
            </code>
      </example>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationFileName" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified <paramref name="destinationFileName" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified <paramref name="destinationFileName" /> is invalid, (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="destinationFileName" /> specified a file that is read-only and access is not Read.-or- path specified a directory.-or- The caller does not have the required permission.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="destinationFileName" /> is in an invalid format.</exception>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.SaveGzipped(System.IO.Stream,System.Nullable{Aspose.Zip.Tar.TarFormat})">
      <summary>
            Saves archive to the stream with gzip compression.
            </summary>
      <param name="output">Destination stream.</param>
      <param name="format">Defines tar header format. Null value will be treated as USTar when possible.</param>
      <remarks>
        <para>
          <paramref name="output" /> must be writable.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="output" /> is not writable.</exception>
      <example>
        <code>
            using (FileStream result = File.OpenWrite("result.tar.gz"))
            {
                using (FileStream source = File.Open("data.bin", FileMode.Open, FileAccess.Read))
                {
                    using (var archive = new TarArchive())
                    {
                        archive.CreateEntry("entry.bin", source);
                        archive.SaveGzipped(result);
                    }
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.SaveGzipped(System.String,System.Nullable{Aspose.Zip.Tar.TarFormat})">
      <summary>
            Saves archive to the file by path with gzip compression.
            </summary>
      <param name="path">The path of the archive to be created. If the specified file name points to an existing file, it will be overwritten.</param>
      <param name="format">Defines tar header format. Null value will be treated as USTar when possible.</param>
      <example>
        <code>
            using (FileStream source = File.Open("data.bin", FileMode.Open, FileAccess.Read))
            {
                using (var archive = new TarArchive())
                {
                    archive.CreateEntry("entry.bin", source);
                    archive.SaveGzipped("result.tar.gz");
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.SaveZstandard(System.IO.Stream,System.Nullable{Aspose.Zip.Tar.TarFormat})">
      <summary>
            Saves archive to the stream with Zstandard compression.
            </summary>
      <param name="output">Destination stream.</param>
      <param name="format">Defines tar header format. Null value will be treated as USTar when possible.</param>
      <remarks>
        <para>
          <paramref name="output" /> must be writable.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="output" /> is not writable.</exception>
      <example>
        <code>
            using (FileStream result = File.OpenWrite("result.tar.zst"))
            {
                using (FileStream source = File.Open("data.bin", FileMode.Open, FileAccess.Read))
                {
                    using (var archive = new TarArchive())
                    {
                        archive.CreateEntry("entry.bin", source);
                        archive.SaveZstandard(result);
                    }
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.SaveZstandard(System.String,System.Nullable{Aspose.Zip.Tar.TarFormat})">
      <summary>
            Saves archive to the file by path with Zstandard compression.
            </summary>
      <param name="path">The path of the archive to be created. If the specified file name points to an existing file, it will be overwritten.</param>
      <param name="format">Defines tar header format. Null value will be treated as USTar when possible.</param>
      <example>
        <code>
            using (FileStream source = File.Open("data.bin", FileMode.Open, FileAccess.Read))
            {
                using (var archive = new TarArchive())
                {
                    archive.CreateEntry("entry.bin", source);
                    archive.SaveZstandard("result.tar.zst");
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.SaveLzipped(System.IO.Stream,System.Nullable{Aspose.Zip.Tar.TarFormat})">
      <summary>
            Saves archive to the stream with lzip compression.
            </summary>
      <param name="output">Destination stream.</param>
      <param name="format">Defines tar header format. Null value will be treated as USTar when possible.</param>
      <remarks>
        <para>
          <paramref name="output" /> must be writable.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="output" /> is not writable.</exception>
      <example>
        <code>
            using (FileStream result = File.OpenWrite("result.tar.lz"))
            {
                using (FileStream source = File.Open("data.bin", FileMode.Open, FileAccess.Read))
                {
                    using (var archive = new TarArchive())
                    {
                        archive.CreateEntry("entry.bin", source);
                        archive.SaveLzipped(result);
                    }
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.SaveLzipped(System.String,System.Nullable{Aspose.Zip.Tar.TarFormat})">
      <summary>
            Saves archive to the file by path with lzip compression.
            </summary>
      <param name="path">The path of the archive to be created. If the specified file name points to an existing file, it will be overwritten.</param>
      <param name="format">Defines tar header format. Null value will be treated as USTar when possible.</param>
      <example>
        <code>
            using (FileStream source = File.Open("data.bin", FileMode.Open, FileAccess.Read))
            {
                using (var archive = new TarArchive())
                {
                    archive.CreateEntry("entry.bin", source);
                    archive.SaveGzipped("result.tar.lz");
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.SaveXzCompressed(System.IO.Stream,System.Nullable{Aspose.Zip.Tar.TarFormat},Aspose.Zip.Xz.Settings.XzArchiveSettings)">
      <summary>
            Saves archive to the stream with xz compression.
            </summary>
      <param name="output">Destination stream.</param>
      <param name="format">Defines tar header format. Null value will be treated as USTar when possible.</param>
      <param name="settings">Set of setting particular xz archive: dictionary size, block size, check type.</param>
      <remarks>
        <para>
          <paramref name="output" />The stream must be writable.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="output" /> is not writable.</exception>
      <example>
        <code>
            using (FileStream result = File.OpenWrite("result.tar.xz"))
            {
                using (FileStream source = File.Open("data.bin", FileMode.Open, FileAccess.Read))
                {
                    using (var archive = new TarArchive())
                    {
                        archive.CreateEntry("entry.bin", source);
                        archive.SaveXzCompressed(result);
                    }
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.SaveXzCompressed(System.String,System.Nullable{Aspose.Zip.Tar.TarFormat},Aspose.Zip.Xz.Settings.XzArchiveSettings)">
      <summary>
            Saves archive to the path by path with xz compression.
            </summary>
      <param name="path">The path of the archive to be created. If the specified file name points to an existing file, it will be overwritten.</param>
      <param name="format">Defines tar header format. Null value will be treated as USTar when possible.</param>
      <param name="settings">Set of setting particular xz archive: dictionary size, block size, check type.</param>
      <example>
        <code>
                using (FileStream source = File.Open("data.bin", FileMode.Open, FileAccess.Read))
                {
                    using (var archive = new TarArchive())
                    {
                        archive.CreateEntry("entry.bin", source);
                        archive.SaveXzCompressed("result.tar.xz");
                    }
                }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.SaveZCompressed(System.IO.Stream,System.Nullable{Aspose.Zip.Tar.TarFormat})">
      <summary>
            Saves archive to the stream with Z compression.
            </summary>
      <param name="output">Destination stream.</param>
      <param name="format">Defines tar header format. Null value will be treated as USTar when possible.</param>
      <remarks>
        <para>
          <paramref name="output" /> must be writable.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="output" /> is not writable.</exception>
      <example>
        <code>
            using (FileStream result = File.OpenWrite("result.tar.Z"))
            {
                using (FileStream source = File.Open("data.bin", FileMode.Open, FileAccess.Read))
                {
                    using (var archive = new TarArchive())
                    {
                        archive.CreateEntry("entry.bin", source);
                        archive.SaveZCompressed(result);
                    }
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.SaveZCompressed(System.String,System.Nullable{Aspose.Zip.Tar.TarFormat})">
      <summary>
            Saves archive to the path by path with Z compression.
            </summary>
      <param name="path">The path of the archive to be created. If the specified file name points to an existing file, it will be overwritten.</param>
      <param name="format">Defines tar header format. Null value will be treated as USTar when possible.</param>
      <example>
        <code>
                using (FileStream source = File.Open("data.bin", FileMode.Open, FileAccess.Read))
                {
                    using (var archive = new TarArchive())
                    {
                        archive.CreateEntry("entry.bin", source);
                        archive.SaveZCompressed("result.tar.Z");
                    }
                }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.Dispose">
      <inheritdoc />
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.FromGZip(System.IO.Stream)">
      <summary>
            Extracts supplied gzip archive and composes <see cref="T:Aspose.Zip.Tar.TarArchive" /> from extracted data.
            <para>
            Important: gzip archive is fully extracted within this method, its content is kept internally. Beware of memory consumption.
            </para></summary>
      <param name="source">The source of the archive.</param>
      <returns>An instance of <see cref="T:Aspose.Zip.Tar.TarArchive" /></returns>
      <remarks>GZip extraction stream is not seekable by the nature of compression algorithm.
            Tar archive provides facility to extract arbitrary record, so it has to operate seekable stream under the hood. 
            </remarks>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.FromGZip(System.String)">
      <summary>
            Extracts supplied gzip archive and composes <see cref="T:Aspose.Zip.Tar.TarArchive" /> from extracted data.
            <para>
            Important: gzip archive is fully extracted within this method, its content is kept internally. Beware of memory consumption.
            </para></summary>
      <param name="path">The path to the archive file.</param>
      <returns>An instance of <see cref="T:Aspose.Zip.Tar.TarArchive" /></returns>
      <remarks>GZip extraction stream is not seekable by the nature of compression algorithm.
            Tar archive provides facility to extract arbitrary record, so it has to operate seekable stream under the hood. 
            </remarks>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.FromZstandard(System.IO.Stream)">
      <summary>
            Extracts supplied Zstandard archive and composes <see cref="T:Aspose.Zip.Tar.TarArchive" /> from extracted data.
            <para>
            Important: Zstandard archive is fully extracted within this method, its content is kept internally. Beware of memory consumption.
            </para></summary>
      <param name="source">The source of the archive.</param>
      <returns>An instance of <see cref="T:Aspose.Zip.Tar.TarArchive" /></returns>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.FromZstandard(System.String)">
      <summary>
            Extracts supplied Zstandard archive and composes <see cref="T:Aspose.Zip.Tar.TarArchive" /> from extracted data.
            <para>
            Important: Zstandard archive is fully extracted within this method, its content is kept internally. Beware of memory consumption.
            </para></summary>
      <param name="path">The path to the archive file.</param>
      <returns>An instance of <see cref="T:Aspose.Zip.Tar.TarArchive" /></returns>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.FromLZip(System.IO.Stream)">
      <summary>
            Extracts supplied lzip archive and composes <see cref="T:Aspose.Zip.Tar.TarArchive" /> from extracted data.
            <para>
            Important: lzip archive is fully extracted within this method, its content is kept internally. Beware of memory consumption.
            </para></summary>
      <param name="source">The source of the archive.</param>
      <returns>An instance of <see cref="T:Aspose.Zip.Tar.TarArchive" /></returns>
      <remarks>Lzip extraction stream is not seekable by the nature of compression algorithm.  Tar archive provides facility to extract arbitrary record, so it has to operate seekable stream under the hood. 
            </remarks>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.FromLZip(System.String)">
      <summary>
            Extracts supplied lzip archive and composes <see cref="T:Aspose.Zip.Tar.TarArchive" /> from extracted data.
            <para>
            Important: lzip archive is fully extracted within this method, its content is kept internally. Beware of memory consumption.
            </para></summary>
      <param name="path">The path to the archive file.</param>
      <returns>An instance of <see cref="T:Aspose.Zip.Tar.TarArchive" /></returns>
      <remarks>Lzip extraction stream is not seekable by the nature of compression algorithm.  Tar archive provides facility to extract arbitrary record, so it has to operate seekable stream under the hood. 
            </remarks>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.FromXz(System.IO.Stream)">
      <summary>
            Extracts supplied xz format archive and composes <see cref="T:Aspose.Zip.Tar.TarArchive" /> from extracted data.
            <para>
            Important: xz archive is fully extracted within this method, its content is kept internally. Beware of memory consumption.
            </para></summary>
      <param name="source">The source of the archive.</param>
      <returns>An instance of <see cref="T:Aspose.Zip.Tar.TarArchive" /></returns>
      <remarks>
            Tar archive provides facility to extract arbitrary record, so it has to operate seekable stream under the hood. 
            </remarks>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.FromXz(System.String)">
      <summary>
            Extracts supplied xz format archive and composes <see cref="T:Aspose.Zip.Tar.TarArchive" /> from extracted data.
            <para>
            Important: xz archive is fully extracted within this method, its content is kept internally. Beware of memory consumption.
            </para></summary>
      <param name="path">The path to the archive file.</param>
      <returns>An instance of <see cref="T:Aspose.Zip.Tar.TarArchive" /></returns>
      <remarks>
            Tar archive provides facility to extract arbitrary record, so it has to operate seekable stream under the hood. 
            </remarks>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.FromZ(System.IO.Stream)">
      <summary>
            Extracts supplied Z format archive and composes <see cref="T:Aspose.Zip.Tar.TarArchive" /> from extracted data.
            <para>
            Important: Z archive is fully extracted within this method, its content is kept internally. Beware of memory consumption.
            </para></summary>
      <param name="source">The source of the archive.</param>
      <returns>An instance of <see cref="T:Aspose.Zip.Tar.TarArchive" /></returns>
      <remarks>
            Tar archive provides facility to extract arbitrary record, so it has to operate seekable stream under the hood. 
            </remarks>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.FromZ(System.String)">
      <summary>
            Extracts supplied Z format archive and composes <see cref="T:Aspose.Zip.Tar.TarArchive" /> from extracted data.
            <para>
            Important: Z archive is fully extracted within this method, its content is kept internally. Beware of memory consumption.
            </para></summary>
      <param name="path">The path to the archive file.</param>
      <returns>An instance of <see cref="T:Aspose.Zip.Tar.TarArchive" /></returns>
      <remarks>
            Tar archive provides facility to extract arbitrary record, so it has to operate seekable stream under the hood. 
            </remarks>
    </member>
    <member name="M:Aspose.Zip.Tar.TarArchive.Dispose(System.Boolean)">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <param name="disposing">Whether managed resources should be disposed.</param>
    </member>
    <member name="T:Aspose.Zip.Tar.TarEntry">
      <summary>
             Represents single file within tar archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Tar.TarEntry.Name">
      <summary>
            Gets or sets name of the entry within archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Tar.TarEntry.Length">
      <summary>
            Get length of entry in bytes.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Tar.TarEntry.IsDirectory">
      <summary>
            Gets a value indicating whether the entry represents directory.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Tar.TarEntry.Open">
      <summary>
            Opens the entry for extraction and provides a stream with entry content.
            </summary>
      <returns>The stream that represents the contents of the entry.</returns>
      <remarks>
            Read from the stream to get original content of file. See examples section.
            </remarks>
      <example>
            Usage:
            <code>Stream decompressed = entry.Open();</code><para>
            .NET 4.0 and higher - use Stream.CopyTo method:
            <code>
            decompressed.CopyTo(httpResponse.OutputStream)
            </code></para><para>
            .NET 3.5 and before - copy bytes manually:
            <code>
            byte[] buffer = new byte[8192];
            int bytesRead;
            while (0 &lt; (bytesRead = decompressed.Read(buffer, 0, buffer.Length)))
             fileStream.Write(buffer, 0, bytesRead);
            </code></para></example>
    </member>
    <member name="M:Aspose.Zip.Tar.TarEntry.Extract(System.String)">
      <summary>
            Extracts the entry to the filesystem by the path provided.
            </summary>
      <param name="path">The path to destination file. If the file already exists, it will be overwritten.</param>
      <returns>The file info of composed file.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (var archive = new TarArchive("archive.tar"))
            {
                archive.Entries[0].Extract("data.bin");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Tar.TarEntry.Extract(System.IO.Stream)">
      <summary>
            Extracts the entry to the stream provided.
            </summary>
      <param name="destination">Destination stream. Must be writable.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not support writing.</exception>
      <example>
        <para>Extract an entry of tar archive.</para>
        <code>
            using (var archive = new TarArchive("archive.tar"))
            {
                archive.Entries[0].Extract(httpResponseStream);
            }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Zip.Tar.TarFormat">
      <summary>
            Enumeration with supported formats of <see cref="T:Aspose.Zip.Tar.TarArchive" />.
            </summary>
    </member>
    <member name="F:Aspose.Zip.Tar.TarFormat.UsTar">
      <summary>
            Format extends the header block from the v7 format. Widespread and supported in many utilities for Windows.
            </summary>
    </member>
    <member name="F:Aspose.Zip.Tar.TarFormat.Gnu">
      <summary>
            GNU tar is based on the early draft of POSIX.1. This format is implemented as default tar format in many Linux systems.
            </summary>
    </member>
    <member name="F:Aspose.Zip.Tar.TarFormat.Pax">
      <summary>
            Format defined in POSIX.1-2001 standard.
            </summary>
    </member>
    <member name="T:Aspose.Zip.SevenZip.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Zip.SevenZip" /> namespace contains classes which represent 7z archive related entities.
            </summary>
    </member>
    <member name="T:Aspose.Zip.SevenZip.SevenZipArchive">
      <summary>
            This class represents 7z archive file. Use it to compose and extract 7z archives.
            </summary>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchive.#ctor(Aspose.Zip.Saving.SevenZipEntrySettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.SevenZip.SevenZipArchive" /> class with optional settings for its entries.
            </summary>
      <param name="newEntrySettings">Compression and encryption settings used for newly added <see cref="T:Aspose.Zip.SevenZip.SevenZipArchiveEntry" /> items.
            If not specified, LZMA compression without encryption would be used.</param>
      <example>
        <para>
            The following example shows how to compress a single file with default settings: LZMA compression without encryption.
            </para>
        <code>
            using (FileStream sevenZipFile = File.Open("archive.7z", FileMode.Create))
            {
                using (var archive = new SevenZipArchive())
                {
                    archive.CreateEntry("data.bin", "file.dat");
                    archive.Save(sevenZipFile);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchive.#ctor(System.IO.Stream,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.SevenZip.SevenZipArchive" /> class and composes entries list can be extracted from the archive.
            </summary>
      <remarks>
            This constructor does not decompress any entry. See <see cref="M:Aspose.Zip.SevenZip.SevenZipArchive.ExtractToDirectory(System.String,System.String)" /> method for decompressing.
            </remarks>
      <param name="sourceStream">The source of the archive.</param>
      <param name="password">Optional password for decryption. If file names are encrypted it must be present.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceStream" /> is not seekable.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceStream" /> is null.</exception>
      <exception cref="T:System.NotImplementedException">Archive contains more than one coder. Now only LZMA compression supported.</exception>
      <example>
        <code>
            using (SevenZipArchive archive = new SevenZipArchive(File.OpenRead("archive.7z")))
            {
                archive.ExtractToDirectory("C:\\extracted");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchive.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.SevenZip.SevenZipArchive" /> class and composes entries list can be extracted from the archive.
            </summary>
      <remarks>
            This constructor does not decompress any entry. See <see cref="M:Aspose.Zip.SevenZip.SevenZipArchive.ExtractToDirectory(System.String,System.String)" /> method for decompressing.
            </remarks>
      <param name="path">The fully qualified or the relative path to the archive file.</param>
      <param name="password">Optional password for decryption. If file names are encrypted it must be present.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (SevenZipArchive archive = new SevenZipArchive("archive.7z"))
            {
                archive.ExtractToDirectory("C:\\extracted");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchive.#ctor(System.String[],System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.SevenZip.SevenZipArchive" /> class from multi-volume 7z archive and composes entries list can be extracted from the archive.
            </summary>
      <param name="parts">Pathes to each segment of multi-volume 7z archive respecting order</param>
      <param name="password">Optional password for decryption. If file names are encrypted it must be present.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parts" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parts" /> has no entries.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The path to a file is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to a file is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified path to a part, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at path contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (SevenZipArchive archive = new SevenZipArchive(new string[] { "multi.7z.001", "multi.7z.002", "multi.7z.003" } ))
            {
                archive.ExtractToDirectory("C:\\extracted");
            }
            </code>
      </example>
    </member>
    <member name="P:Aspose.Zip.SevenZip.SevenZipArchive.NewEntrySettings">
      <summary>
            Compression and encryption settings used for newly added <see cref="T:Aspose.Zip.SevenZip.SevenZipArchiveEntry" /> items.
            </summary>
    </member>
    <member name="P:Aspose.Zip.SevenZip.SevenZipArchive.Entries">
      <summary>
            Gets entries of <see cref="T:Aspose.Zip.SevenZip.SevenZipArchiveEntry" /> type constituting the archive.
            </summary>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchive.CreateEntry(System.String,System.IO.FileInfo,System.Boolean,Aspose.Zip.Saving.SevenZipEntrySettings)">
      <summary>
            Create single entry within the archive.
            </summary>
      <param name="name">The name of the entry.</param>
      <param name="fileInfo">The metadata of file to be compressed.</param>
      <param name="openImmediately">True if open the file immediately, otherwise open the file on archive saving.</param>
      <param name="newEntrySettings">Compression and encryption settings used for added <see cref="T:Aspose.Zip.SevenZip.SevenZipArchiveEntry" /> item.</param>
      <returns>Seven Zip entry instance.</returns>
      <remarks>
        <para>The entry name is solely set within <paramref name="name" /> parameter. The file name provided in <paramref name="fileInfo" /> parameter does not affect the entry name.</para>
        <para>If the file is opened immediately with <paramref name="openImmediately" /> parameter it becomes blocked until archive is saved.</para>
      </remarks>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="fileInfo" /> is read-only or is a directory.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.IO.IOException">The file is already open.</exception>
      <example>
        <para>Compose archive with entries encrypted with different passwords each.</para>
        <code>
            using (FileStream sevenZipFile = File.Open("archive.7z", FileMode.Create))
            {
                FileInfo fi1 = new FileInfo("data1.bin");
                FileInfo fi2 = new FileInfo("data2.bin");
                FileInfo fi3 = new FileInfo("data3.bin");
                using (var archive = new SevenZipArchive())
                {
                    archive.CreateEntry("entry1.bin", fi1, false, new SevenZipEntrySettings(new SevenZipStoreCompressionSettings(), new SevenZipAESEncryptionSettings("test1")));
                    archive.CreateEntry("entry2.bin", fi2, false, new SevenZipEntrySettings(new SevenZipStoreCompressionSettings(), new SevenZipAESEncryptionSettings("test2")));
                    archive.CreateEntry("entry3.bin", fi3, false, new SevenZipEntrySettings(new SevenZipStoreCompressionSettings(), new SevenZipAESEncryptionSettings("test3")));
                    archive.Save(sevenZipFile);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchive.CreateEntry(System.String,System.IO.Stream,Aspose.Zip.Saving.SevenZipEntrySettings,System.IO.FileSystemInfo)">
      <summary>
            Create single entry within the archive.
            </summary>
      <param name="name">The name of the entry.</param>
      <param name="source">The input stream for the entry.</param>
      <param name="newEntrySettings">Compression and encryption settings used for added <see cref="T:Aspose.Zip.SevenZip.SevenZipArchiveEntry" /> item.</param>
      <param name="fileInfo">The metadata of file or folder to be compressed.</param>
      <returns>SevenZip entry instance.</returns>
      <remarks>
        <para>The entry name is solely set within <paramref name="name" /> parameter. The file name provided in <paramref name="fileInfo" /> parameter does not affect the entry name.</para>
        <para>
          <paramref name="fileInfo" /> can refer to <see cref="T:System.IO.DirectoryInfo" /> if the entry is directory.</para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">Both <paramref name="source" /> and <paramref name="fileInfo" /> are null or <paramref name="source" /> is null and <paramref name="fileInfo" /> stands for directory.</exception>
      <example>
        <para>Compose archive with LZMA2 compressed encrypted entry.</para>
        <code>
            using (FileStream sevenZipFile = File.Open("archive.7z", FileMode.Create))
            {
                using (var archive = new SevenZipArchive())
                {
                    archive.CreateEntry("entry1.bin", new MemoryStream(new byte[] {0x00, 0xFF}), new SevenZipEntrySettings(new SevenZipLZMA2CompressionSettings(), new SevenZipAESEncryptionSettings("test1")), new FileInfo("data1.bin")); 
                    archive.Save(sevenZipFile);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchive.CreateEntry(System.String,System.IO.Stream,Aspose.Zip.Saving.SevenZipEntrySettings)">
      <summary>
            Create single entry within the archive.
            </summary>
      <param name="name">The name of the entry.</param>
      <param name="source">The input stream for the entry.</param>
      <param name="newEntrySettings">Compression and encryption settings used for added <see cref="T:Aspose.Zip.SevenZip.SevenZipArchiveEntry" /> item.</param>
      <returns>Zip entry instance.</returns>
      <example>
        <para>Compose 7z archive with LZMA2 compression and encryption of all entries.</para>
        <code>
            using (var archive = new SevenZipArchive(new SevenZipEntrySettings(new SevenZipLZMA2CompressionSettings(), new SevenZipAESEncryptionSettings("p@s$"))))
            {
                archive.CreateEntry("data.bin", new MemoryStream(new byte[] {0x00, 0xFF} ));
                archive.Save("archive.7z");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchive.CreateEntry(System.String,System.String,System.Boolean,Aspose.Zip.Saving.SevenZipEntrySettings)">
      <summary>
            Create single entry within the archive.
            </summary>
      <param name="name">The name of the entry.</param>
      <param name="path">The fully qualified name of the new file, or the relative file name to be compressed.</param>
      <param name="openImmediately">True if open the file immediately, otherwise open the file on archive saving.</param>
      <param name="newEntrySettings">Compression and encryption settings used for added <see cref="T:Aspose.Zip.SevenZip.SevenZipArchiveEntry" /> item.</param>
      <returns>Zip entry instance.</returns>
      <remarks>
        <para>The entry name is solely set within <paramref name="name" /> parameter. The file name provided in <paramref name="path" /> parameter does not affect the entry name.</para>
        <para>If the file is opened immediately with <paramref name="openImmediately" /> parameter it becomes blocked until archive is saved.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (FileStream sevenZipFile = File.Open("archive.7z", FileMode.Create))
            {
                using (var archive = new SevenZipArchive(new SevenZipEntrySettings(new SevenZipLZMA2CompressionSettings())))
                {
                    archive.CreateEntry("data.bin", "file.dat");
                    archive.Save(sevenZipFile);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchive.CreateEntries(System.IO.DirectoryInfo,System.Boolean)">
      <summary>
            Adds to the archive all files and directories recursively in the directory given.
            </summary>
      <param name="directory">Directory to compress.</param>
      <param name="includeRootDirectory">Indicates whether to include the root directory itself or not.</param>
      <returns>The archive with entries composed.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path to <paramref name="directory" /> is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access <paramref name="directory" />.</exception>
      <example>
        <code>
            using (SevenZipArchive archive = new SevenZipArchive())
            {
                DirectoryInfo folder = new DirectoryInfo("C:\folder");
                archive.CreateEntries(folder);
                archive.Save("folder.7z");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchive.CreateEntries(System.String,System.Boolean)">
      <summary>
            Adds to the archive all files and directories recursively in the directory given.
            </summary>
      <param name="sourceDirectory">Directory to compress.</param>
      <param name="includeRootDirectory">Indicates whether to include the root directory itself or not.</param>
      <returns>The archive with entries composed.</returns>
      <example>
        <para>Compose 7z archive with LZMA2 compression.</para>
        <code>
            using (SevenZipArchive archive = new SevenZipArchive(new SevenZipEntrySettings(new SevenZipLZMACompressionSettings())))
            {
                archive.CreateEntries("C:\folder");
                archive.Save("folder.7z");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchive.Dispose">
      <inheritdoc />
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchive.Save(System.IO.Stream)">
      <summary>
            Saves 7z archive to the stream provided.
            </summary>
      <param name="output">Destination stream.</param>
      <remarks>
        <para>
          <paramref name="output" /> must be seekable.</para>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="output" /> does not support seeking.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Encoder failed to compress data.</exception>
      <example>
        <code>
            using (FileStream sevenZipFile = File.Open("archive.7z", FileMode.Create))
            {
              using (FileStream source = File.Open("data.bin", FileMode.Open, FileAccess.Read))
              {
                using (var archive = new SevenZipArchive())
                {
                  archive.CreateEntry("data", source);
                  archive.Save(sevenZipFile);
                }
              }
            }
             </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchive.Save(System.String)">
      <summary>
            Saves archive to destination file provided.
            </summary>
      <param name="destinationFileName">The path of the archive to be created. If the specified file name points to an existing file, it will be overwritten.</param>
      <remarks>
        <para>It is possible to save an archive to the same path as it was loaded from.
            However, this is not recommended because this approach uses copying to temporary file.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="destinationFileName" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="destinationFileName" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="destinationFileName" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="destinationFileName" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
             using (FileStream source = File.Open("data.bin", FileMode.Open, FileAccess.Read))
             {
                using (var archive = new SevenZipArchive(new SevenZipEntrySettings(new SevenZipLZMACompressionSettings())))
                {
                   archive.CreateEntry("data", source);
                   archive.Save("archive.7z");
                }
             }
             </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchive.SaveSplit(System.String,Aspose.Zip.Saving.SplitSevenZipArchiveSaveOptions)">
      <summary>
             Saves multi-volume archive to destination directory provided.
            </summary>
      <remarks>
        <para>This method compose several (<c>n</c>) files filename.7z.001, filename.7z.002, ..., filename.7z.(n).</para>
        <para>Can not make existing archive multi-volume.</para>
      </remarks>
      <param name="destinationDirectory">The path to the directory where archive segments to be created.</param>
      <param name="options">Options for archive saving, including file name.</param>
      <example>
        <code>        
            using (SevenZipArchive archive = new SevenZipArchive())
            {
                archive.CreateEntry("entry.bin", "data.bin");
                archive.SaveSplit(@"C:\Folder",  new SplitSevenZipArchiveSaveOptions("volume", 65536));
            }
             </code>
      </example>
      <exception cref="T:System.InvalidOperationException">This archive was opened from existing source.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectory" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access the directory.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationDirectory" /> contains invalid characters such as ", &gt;, &lt;, or |.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path exceeds the system-defined maximum length.</exception>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchive.ExtractToDirectory(System.String,System.String)">
      <summary>
            Extracts all the files in the archive to the directory provided.
            </summary>
      <param name="destinationDirectory">The path to the directory to place the extracted files in.</param>
      <param name="password">Optional password for content decryption.</param>
      <remarks>
        <para>If the directory does not exist, it will be created.</para>
        <para>
          <paramref name="password" /> is used for content decryption only. If file names are encrypted provide password in <see cref="M:Aspose.Zip.SevenZip.SevenZipArchive.#ctor(System.String,System.String)" /> or <see cref="M:Aspose.Zip.SevenZip.SevenZipArchive.#ctor(System.IO.Stream,System.String)" /> constructor.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectory" /> is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access existing directory.</exception>
      <exception cref="T:System.NotSupportedException">If directory does not exist, path contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationDirectory" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the System.IO.Path.GetInvalidPathChars method. -or- path is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.IO.IOException">The directory specified by path is a file. -or- The network name is not known.</exception>
      <example>
        <code>
            using (var archive = new SevenZipArchive("archive.7z")) 
            { 
               archive.ExtractToDirectory("C:\extracted");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchive.Dispose(System.Boolean)">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <param name="disposing">Whether managed resources should be disposed.</param>
    </member>
    <member name="T:Aspose.Zip.SevenZip.SevenZipArchiveEntry">
      <summary>
            Represents single file within 7z archive.
            </summary>
      <remarks>
            Cast an <see cref="T:Aspose.Zip.SevenZip.SevenZipArchiveEntry" /> instance to <see cref="T:Aspose.Zip.SevenZip.SevenZipArchiveEntryEncrypted" /> to determine whether the entry encrypted or not.
            </remarks>
    </member>
    <member name="P:Aspose.Zip.SevenZip.SevenZipArchiveEntry.Name">
      <summary>
            Gets name of the entry within archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.SevenZip.SevenZipArchiveEntry.ModificationTime">
      <summary>
            Gets last modified date and time.
            </summary>
    </member>
    <member name="P:Aspose.Zip.SevenZip.SevenZipArchiveEntry.UncompressedSize">
      <summary>
            Gets size of original file.
            </summary>
    </member>
    <member name="P:Aspose.Zip.SevenZip.SevenZipArchiveEntry.CompressedSize">
      <summary>
            Gets size of compressed file.
            </summary>
    </member>
    <member name="P:Aspose.Zip.SevenZip.SevenZipArchiveEntry.IsDirectory">
      <summary>
            Gets a value indicating whether the entry represents directory.
            </summary>
    </member>
    <member name="P:Aspose.Zip.SevenZip.SevenZipArchiveEntry.CompressionSettings">
      <summary>
            Gets settings for compression or decompression.
            </summary>
    </member>
    <member name="E:Aspose.Zip.SevenZip.SevenZipArchiveEntry.CompressionProgressed">
      <summary>
            Raises when a portion of raw stream compressed.
            </summary>
      <remarks>
        <para>Event sender is an <see cref="T:Aspose.Zip.SevenZip.SevenZipArchiveEntry" /> instance.</para>
        <para>Does not invoke in multi-threaded mode for LZMA2 entries.</para>
      </remarks>
      <example>
        <code>
            archive.Entries[0].CompressionProgressed += (s, e) =&gt; { int percent = (int)((100 * (long)e.ProceededBytes) / entrySourceStream.Length); };
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchiveEntry.#ctor(Aspose.Zip.SevenZip.SevenZipArchive,System.String,Aspose.Zip.Saving.SevenZipCompressionSettings,System.IO.Stream,System.IO.FileAttributes,System.IO.FileSystemInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.SevenZip.SevenZipArchiveEntry" /> class.
            </summary>
      <param name="parent">
      </param>
      <param name="name">Entry name.</param>
      <param name="compressionSettings">Settings for compression or decompression.</param>
      <param name="source">Stream with entry data either to be compressed or to be decompressed.</param>
      <param name="fileAttributes">Attributes from file system.</param>
      <param name="fileInfo">File or directory info the entry based on.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> is null or empty.</exception>
    </member>
    <member name="P:Aspose.Zip.SevenZip.SevenZipArchiveEntry.Source">
      <summary>
            Gets the data source stream for the entry.
            </summary>
    </member>
    <member name="P:Aspose.Zip.SevenZip.SevenZipArchiveEntry.FileAttributes">
      <summary>
            Gets file attributes from host system.
            </summary>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchiveEntry.GetDestinationStream(System.IO.Stream)">
      <summary>
            Destination stream for the entry, may be decorated.
            </summary>
      <param name="outputStream">Output stream for the entry.</param>
      <returns>The destination stream for entry compression.</returns>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchiveEntry.FinalizeCompressedData(System.IO.Stream,System.Byte[])">
      <summary>
            Write to output stream any headers that follow compressed data.
            </summary>
      <param name="outputStream">Output stream for the entry.</param>
      <param name="encoderProperties">Properties of compressor.</param>
      <returns>Number of "technical" bytes that were added after entry significant data block.</returns>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchiveEntry.Extract(System.String,System.String)">
      <summary>
            Extracts the entry to the filesystem by the path provided.
            </summary>
      <param name="path">The path to destination file. If the file already exists, it will be overwritten.</param>
      <param name="password">Optional password for decryption.</param>
      <returns>The file info of composed file.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (var archive = new SevenZipArchive("archive.7z"))
            {
                archive.Entries[0].Extract("data.bin");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchiveEntry.Extract(System.IO.Stream,System.String)">
      <summary>
            Extracts the entry to the stream provided.
            </summary>
      <param name="destination">Destination stream. Must be writable.</param>
      <param name="password">Optional password for decryption.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not support writing.</exception>
      <exception cref="T:System.InvalidOperationException">The archive is not opened for extraction. - or - This entry is a directory.</exception>
      <exception cref="T:System.IO.InvalidDataException">Wrong data within the entry.</exception>
      <example>
        <para>Extract an entry of zip archive with password.</para>
        <code>
            using (var archive = new SevenZipArchive("archive.7z"))
            {
                archive.Entries[0].Extract(httpResponseStream);
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchiveEntry.Open(System.String)">
      <summary>
            Opens the entry for extraction and provides a stream with entry content.
            </summary>
      <param name="password">Optional password for decryption.</param>
      <exception cref="T:System.InvalidOperationException">The archive is not opened for extraction. - or - This entry is a directory.</exception>
      <exception cref="T:System.IO.InvalidDataException">Wrong data within the entry.</exception>
      <returns>The stream that represents the contents of the entry.</returns>
      <remarks>
            Read from the stream to get original content of file. See examples section.
            </remarks>
      <example>
            Usage:
            <code>Stream decompressed = entry.Open();</code><para>
            .NET 4.0 and higher - use Stream.CopyTo method:
            <code>
            decompressed.CopyTo(httpResponse.OutputStream)
            </code></para><para>
            .NET 3.5 and before - copy bytes manually:
            <code>
            byte[] buffer = new byte[8192];
            int bytesRead;
            while (0 &lt; (bytesRead = decompressed.Read(buffer, 0, buffer.Length)))
             fileStream.Write(buffer, 0, bytesRead);
            </code></para></example>
    </member>
    <member name="T:Aspose.Zip.SevenZip.SevenZipArchiveEntryEncrypted">
      <inheritdoc />
      <summary>
            SevenZip archive entry that needs to be compressed with encryption or decompressed with decryption.
            </summary>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchiveEntryEncrypted.FinalizeCompressedData(System.IO.Stream,System.Byte[])">
      <inheritdoc />
      <summary>
            Write to output stream any headers that follow compressed data.
            </summary>
      <param name="outputStream">Output stream for the entry.</param>
      <param name="encoderProperties">Properties of compressor.</param>
      <returns>Number of "technical" bytes that were added after entry significant data block.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key is corrupt which can cause invalid padding to the stream.</exception>
      <exception cref="T:System.NotSupportedException">The final block has already been transformed.</exception>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchiveEntryEncrypted.GetDestinationStream(System.IO.Stream)">
      <inheritdoc />
      <summary>
            Destination stream for the entry, decorated with crypto stream.
            </summary>
      <param name="outputStream">Output stream for the entry.</param>
      <returns>Encryption stream.</returns>
    </member>
    <member name="T:Aspose.Zip.SevenZip.SevenZipArchiveEntryPlain">
      <inheritdoc />
      <summary>
            SevenZip entry that needs to be compressed without encryption or decompressed without decryption.
            </summary>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchiveEntryPlain.FinalizeCompressedData(System.IO.Stream,System.Byte[])">
      <summary>
            Write to output stream any headers that follow compressed data.
            </summary>
      <param name="outputStream">Output stream for the entry.</param>
      <param name="encoderProperties">Properties of compressor.</param>
      <returns>Number of "technical" bytes that were added after entry significant data block.</returns>
    </member>
    <member name="M:Aspose.Zip.SevenZip.SevenZipArchiveEntryPlain.GetDestinationStream(System.IO.Stream)">
      <inheritdoc />
      <summary>
            Destination stream for the entry, may be decorated.
            </summary>
      <param name="outputStream">Output stream for the entry.</param>
      <returns>The destination stream for entry compression.</returns>
    </member>
    <member name="T:Aspose.Zip.Rar.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Zip.Rar" /> namespace contains classes which represent RAR archive related entities.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Rar.RarArchive">
      <summary>
            This class represents RAR archive file. Use it to extract RAR archives.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Rar.RarArchive.Entries">
      <summary>
            Gets entries of <see cref="T:Aspose.Zip.Rar.RarArchiveEntry" /> type constituting the rar archive.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Rar.RarArchive.#ctor(System.String,Aspose.Zip.Rar.RarArchiveLoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Rar.RarArchive" /> class and composes entries list can be extracted from the archive.
            </summary>
      <remarks>
            This constructor does not decompress any entry. See <see cref="M:Aspose.Zip.Rar.RarArchiveEntry.Open(System.String)" /> method for decompressing.
            </remarks>
      <param name="path">The fully qualified or the relative path to the archive file.</param>
      <param name="loadOptions">Options to load existing archive with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <para>The following example extract an archive, then decompress first entry to a <c>MemoryStream</c>.</para>
        <code>        
            var extracted = new MemoryStream();
            using (RarArchive archive = new RarArchive("data.rar"))
            {
                using (var decompressed = archive.Entries[0].Open())
                {
                    byte[] b = new byte[8192];
                    int bytesRead;
                    while (0 &lt; (bytesRead = decompressed.Read(b, 0, b.Length)))
                        extracted.Write(b, 0, bytesRead);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Rar.RarArchive.#ctor(System.IO.Stream,Aspose.Zip.Rar.RarArchiveLoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Rar.RarArchive" /> class and composes entries list can be extracted from the archive.
            </summary>
      <remarks>
            This constructor does not decompress any entry. See <see cref="M:Aspose.Zip.Rar.RarArchiveEntry.Open(System.String)" /> method for decompressing.
            </remarks>
      <param name="sourceStream">The source of the archive.</param>
      <param name="loadOptions">Options to load existing archive with.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceStream" /> is not seekable.</exception>
      <exception cref="T:System.IO.InvalidDataException">Wrong signature for archive. - or - The file is not a RAR archive.</exception>
      <exception cref="T:System.InvalidOperationException">
      </exception>
      <example>
        <para>The following example decipher and decompress first entry to a <c>MemoryStream</c>.</para>
        <code>
            var fs = File.OpenRead("encrypted.rar");
            var extracted = new MemoryStream();
            using (RarArchive archive = new RarArchive(fs, new RarArchiveLoadOptions() { DecryptionPassword = "p@s$" }))
            {
                using (var decompressed = archive.Entries[0].Open())
                {
                    byte[] b = new byte[8192];
                    int bytesRead;
                    while (0 &lt; (bytesRead = decompressed.Read(b, 0, b.Length)))
                        extracted.Write(b, 0, bytesRead);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Rar.RarArchive.ExtractToDirectory(System.String,System.String)">
      <summary>
            Extracts all the files in the archive to the directory provided.
            </summary>
      <param name="destinationDirectory">The path to the directory to place the extracted files in.</param>
      <param name="password">Optional password for decryption.</param>
      <remarks>If the directory does not exist, it will be created.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectory" /> is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access existing directory.</exception>
      <exception cref="T:System.NotSupportedException">If directory does not exist, path contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationDirectory" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the System.IO.Path.GetInvalidPathChars method. -or- path is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.IO.IOException">The directory specified by path is a file. -or- The network name is not known.</exception>
      <example>
        <code>
            using (var archive = new RarArchive("archive.rar")) 
            { 
               archive.ExtractToDirectory("C:\extracted", "$ecRet");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Rar.RarArchive.ExtractToDirectory(System.String)">
      <summary>
            Extracts all the files in the archive to the directory provided.
            </summary>
      <param name="destinationDirectory">The path to the directory to place the extracted files in.</param>
      <remarks>If the directory does not exist, it will be created.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectory" /> is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access existing directory.</exception>
      <exception cref="T:System.NotSupportedException">If directory does not exist, path contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationDirectory" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the System.IO.Path.GetInvalidPathChars method. -or- path is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.IO.IOException">The directory specified by path is a file. -or- The network name is not known.</exception>
      <example>
        <code>
            using (var archive = new RarArchive("archive.rar")) 
            { 
               archive.ExtractToDirectory("C:\extracted");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Rar.RarArchive.Dispose(System.Boolean)">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <param name="disposing">Whether managed resources should be disposed.</param>
    </member>
    <member name="M:Aspose.Zip.Rar.RarArchive.Dispose">
      <inheritdoc />
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Rar.RarArchiveEntry">
      <summary>
            Represents single file within archive.
            </summary>
      <remarks>
            Cast a <see cref="T:Aspose.Zip.Rar.RarArchiveEntry" /> instance to <see cref="T:Aspose.Zip.Rar.RarArchiveEntryEncrypted" /> to determine whether the entry encrypted or not.
            </remarks>
    </member>
    <member name="P:Aspose.Zip.Rar.RarArchiveEntry.Name">
      <summary>
            Gets name of the entry within archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Rar.RarArchiveEntry.CompressedSize">
      <summary>
            Gets size of compressed file.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Rar.RarArchiveEntry.UncompressedSize">
      <summary>
            Gets size of original file.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Rar.RarArchiveEntry.ModificationTime">
      <summary>
            Gets last modified date and time.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Rar.RarArchiveEntry.CreationTime">
      <summary>
            Gets creation date and time.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Rar.RarArchiveEntry.LastAccessTime">
      <summary>
            Gets last access date and time.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Rar.RarArchiveEntry.IsDirectory">
      <summary>
            Gets a value indicating whether the entry represents directory.
            </summary>
    </member>
    <member name="E:Aspose.Zip.Rar.RarArchiveEntry.ExtractionProgressed">
      <summary>
            Raises when a portion of raw stream extracted.
            </summary>
      <remarks>Event sender is an <see cref="T:Aspose.Zip.Rar.RarArchiveEntry" /> instance.</remarks>
      <example>
        <code>
            archive.Entries[0].ExtractionProgressed += (s, e) =&gt; {  int percent = (int)((100 * e.ProceededBytes) / ((RarArchiveEntry)s).UncompressedSize); };
            </code>
      </example>
    </member>
    <member name="P:Aspose.Zip.Rar.RarArchiveEntry.Source">
      <summary>
            Gets the data source stream for the entry.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Rar.RarArchiveEntry.Open(System.String)">
      <summary>
            Opens the entry for extraction and provides a stream with decompressed entry content.
            </summary>
      <param name="password">Optional password for decryption. It can also be set within <see cref="P:Aspose.Zip.Rar.RarArchiveLoadOptions.DecryptionPassword" />.</param>
      <returns>The stream that represents the contents of the entry.</returns>
      <remarks>
        <para>Read from the stream to get original content of file. See examples section.</para>
      </remarks>
      <example>
            Usage:
            <code>Stream decompressed = entry.Open();</code><para>
            .NET 4.0 and higher - use Stream.CopyTo method:
            <code>
            decompressed.CopyTo(httpResponse.OutputStream)
            </code></para><para>
            .NET 3.5 and before - copy bytes manually:
            <code>
            byte[] buffer = new byte[8192];
            int bytesRead;
            while (0 &lt; (bytesRead = decompressed.Read(buffer, 0, buffer.Length)))
             fileStream.Write(buffer, 0, bytesRead);
            </code></para></example>
    </member>
    <member name="M:Aspose.Zip.Rar.RarArchiveEntry.Extract(System.String,System.String)">
      <summary>
            Extracts the entry to the filesystem by the path provided.
            </summary>
      <param name="path">The path to destination file. If the file already exists, it will be overwritten.</param>
      <param name="password">Optional password for decryption.</param>
      <returns>The file info of composed file.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <exception cref="T:System.IO.InvalidDataException">CRC or MAC verification failed for the entry.</exception>
      <example>
        <para>Extract two entries of rar archive.</para>
        <code>
            using (FileStream rarFile = File.Open("archive.rar", FileMode.Open))
            {
                using (RarArchive archive = new RarArchive(rarFile))
                {
                    archive.Entries[0].Extract("first.bin", "pass");
                    archive.Entries[1].Extract("second.bin", "pass");
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Rar.RarArchiveEntry.Extract(System.IO.Stream,System.String)">
      <summary>
            Extracts the entry to the stream provided.
            </summary>
      <param name="destination">Destination stream. Must be writable.</param>
      <param name="password">Optional password for decryption.</param>
      <exception cref="T:System.IO.InvalidDataException">CRC or MAC verification failed for the entry.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not support writing.</exception>
      <example>
        <para>Extract an entry of rar archive with password.</para>
        <code>
            using (FileStream rarFile = File.Open("archive.zip", FileMode.Open))
            {
                using (RarArchive archive = new RarArchive(rarFile))
                {
                    archive.Entries[0].Extract(httpResponseStream, "p@s$");
                }
            }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Zip.Rar.RarArchiveEntryEncrypted">
      <inheritdoc />
      <summary>
            Zip entry that needs to be decompressed with decryption.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Rar.RarArchiveEntryPlain">
      <inheritdoc />
      <summary>
            Rar entry that needs to be decompressed without decryption.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Rar.RarArchiveLoadOptions">
      <summary>
            Options with which <see cref="T:Aspose.Zip.Rar.RarArchive" /> is loaded from compressed file.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Rar.RarArchiveLoadOptions.DecryptionPassword">
      <summary>
            Gets or sets the password to decrypt entries and entry names.
            </summary>
      <example>
        <para>You can provide decryption password once on archive extraction.</para>
        <code>
            using (FileStream fs = File.OpenRead("encrypted_archive.rar"))
            {
                using (var extracted = File.Create("extracted.bin"))
                {
                    using (RarArchive archive = new RarArchive(fs, new ArchiveLoadOptions() { DecryptionPassword = "p@s$" }))
                    {
                        using (var decompressed = archive.Entries[0].Open())
                        {
                            byte[] b = new byte[8192];
                            int bytesRead;
                            while (0 &lt; (bytesRead = decompressed.Read(b, 0, b.Length)))
                                extracted.Write(b, 0, bytesRead);
                            
                        }
                    }
                }
            }
            </code>
      </example>
      <seealso cref="M:Aspose.Zip.Rar.RarArchiveEntry.Open(System.String)" />
    </member>
    <member name="T:Aspose.Zip.Xz.NamespaceGroupDoc">
      <summary>
            The <see cref="N:Aspose.Zip.Xz" /> namespace contains classes which represent xz archive related entities.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Xz.Settings.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Zip.Xz.Settings" /> namespace contains classes which represent xz archive settings.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Xz.Settings.XzCheckType">
      <summary>
            The enumeration defines checksum calculation approach for xz archive.
            </summary>
    </member>
    <member name="F:Aspose.Zip.Xz.Settings.XzCheckType.None">
      <summary>
            Checksum will not be calculated.
            </summary>
    </member>
    <member name="F:Aspose.Zip.Xz.Settings.XzCheckType.Crc32">
      <summary>
            Checksum will be calculated using CRC32 algorithm.
            </summary>
    </member>
    <member name="F:Aspose.Zip.Xz.Settings.XzCheckType.Crc64">
      <summary>
            Checksum will be calculated using CRC64 algorithm.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Xz.Settings.XzBcjX86FilterSettings">
      <summary>
            Settings for xz Bcj X86 filter.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Xz.Settings.XzBcjX86FilterSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Xz.Settings.XzBcjX86FilterSettings" />. Use it to compress executable files and libraries within <see cref="T:Aspose.Zip.Xz.XzArchive" />.
            </summary>
      <example>
        <code>
            XzLZMA2FilterSettings lzma2 = new XzLZMA2FilterSettings(5242880);
            XzBcjX86FilterSettings bcj = new XzBcjX86FilterSettings();
            XzArchiveSettings settings = new XzArchiveSettings(new XzFilterSettings[] {bcj,lzma2}, 10485760, XzCheckType.Crc32);
            using (XzArchive archive = new XzArchive(settings))
            {
                archive.SetSource("data.bin");
                archive.Save("archive.xz");
            }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Zip.Xz.Settings.XzFilterSettings">
      <summary>
            Base class for set of settings of particular xz format filter.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Xz.Settings.XzLZMA2FilterSettings">
      <summary>
            Set of settings for xz LZMA2 filter.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Xz.Settings.XzLZMA2FilterSettings.DictionarySize">
      <summary>
            Size of dictionary are used by LZMA2 filter.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Xz.Settings.XzLZMA2FilterSettings.#ctor(System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Xz.Settings.XzLZMA2FilterSettings" />.
            </summary>
      <param name="dictionarySize">Size of dictionary are used by LZMA2 filter, must be between 4096 and 1073741824.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Dictionary size is not in valid range.</exception>
    </member>
    <member name="T:Aspose.Zip.Xz.Settings.XzArchiveSettings">
      <summary>
            The class contains set of setting particular xz archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Xz.Settings.XzArchiveSettings.CompressionThreads">
      <summary>
            Gets or sets compression thread count. If the value greater than 1, multithreading compression will be used.
            </summary>
      <remarks>Do not set this number more than CPU cores.</remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of threads is more than 100.</exception>
    </member>
    <member name="P:Aspose.Zip.Xz.Settings.XzArchiveSettings.FastestSpeed">
      <summary>
            Gets the instance of the <see cref="T:Aspose.Zip.Xz.Settings.XzArchiveSettings" /> class
            with dictionary size equals to 65536 bytes in LZMA2 filter, block size equals to 1 megabyte and CRC32 checksum.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Xz.Settings.XzArchiveSettings.FastSpeed">
      <summary>
            Gets the instance of the <see cref="T:Aspose.Zip.Xz.Settings.XzArchiveSettings" /> class
            with dictionary size equals to 1 megabyte in LZMA2 filter, block size equals to 4 megabytes and CRC32 checksum.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Xz.Settings.XzArchiveSettings.Normal">
      <summary>
            Gets the instance of the <see cref="T:Aspose.Zip.Xz.Settings.XzArchiveSettings" /> class
            with dictionary size equals to 16 megabytes in LZMA2 filter, block size equals to 64 megabytes and CRC32 checksum.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Xz.Settings.XzArchiveSettings.HighCompression">
      <summary>
            Gets the instance of the <see cref="T:Aspose.Zip.Xz.Settings.XzArchiveSettings" /> class
            with dictionary size equals to 32 megabytes in LZMA2 filter, block size equals to 128 megabytes and CRC32 checksum.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Xz.Settings.XzArchiveSettings.MaximumCompression">
      <summary>
            Gets the instance of the <see cref="T:Aspose.Zip.Xz.Settings.XzArchiveSettings" /> class
            with dictionary size equals to 64 megabytes in LZMA2 filter, block size equals to 256 megabytes and CRC32 checksum.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Xz.Settings.XzArchiveSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Xz.Settings.XzArchiveSettings" /> class using single LZMA2 compression.
            </summary>
      <remarks>
            Default dictionary in LZMA2 filter size equals to 16 megabyte, default block size equals to 64 megabytes, default checksum type is CRC32.
            </remarks>
    </member>
    <member name="M:Aspose.Zip.Xz.Settings.XzArchiveSettings.#ctor(Aspose.Zip.Xz.Settings.XzFilterSettings[],System.Int64,Aspose.Zip.Xz.Settings.XzCheckType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Xz.Settings.XzArchiveSettings" /> class with custom parameters.
            </summary>
      <param name="filters">Filters (compressors) to be sequentially applied to create <see cref="T:Aspose.Zip.Xz.XzArchive" />. It can be either single <see cref="T:Aspose.Zip.Xz.Settings.XzLZMA2FilterSettings" /> 
            or pair of <see cref="T:Aspose.Zip.Xz.Settings.XzBcjX86FilterSettings" /> and <see cref="T:Aspose.Zip.Xz.Settings.XzLZMA2FilterSettings" /></param>
      <param name="blockSize">Size xz archive block.</param>
      <param name="checkType">Type of checksum calculation for uncompressed data.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="blockSize" /> is negative.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filters" /> is null</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="filters" /> has less than one or more than two filter, or last filter is not <see cref="T:Aspose.Zip.Xz.Settings.XzLZMA2FilterSettings" />.</exception>
      <example>
        <code>
            using (FileStream xzFile = File.Open("archive.xz", FileMode.Create))
            {
                XzLZMA2FilterSettings filter = new XzLZMA2FilterSettings(5242880);
                XzArchiveSettings settings = new XzArchiveSettings(new XzFilterSettings[] {filter}, 10485760, XzCheckType.Crc32);
                using (var archive = new XzArchive(settings))
                {
                    archive.SetSource("data.bin");
                    archive.Save(xzFile);
                 }
            }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Zip.Xz.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Zip.Xz" /> namespace contains classes which represent xz archive related entities.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Xz.XzArchive">
      <summary>
            This class represents xz archive file. Use it to compose and extract xz archives.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Xz.XzArchive.#ctor(Aspose.Zip.Xz.Settings.XzArchiveSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Xz.XzArchive" /> class and composes the archive in xz format.
            </summary>
      <param name="settings">Set of setting particular xz archive: dictionary size, block size, check type.</param>
    </member>
    <member name="M:Aspose.Zip.Xz.XzArchive.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Xz.XzArchive" /> class prepared for decompressing.
            </summary>
      <param name="source">The source of the archive.</param>
      <remarks>
            This constructor does not decompress. See <see cref="M:Aspose.Zip.Xz.XzArchive.Extract(System.IO.Stream)" /> method for decompressing.
            </remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> is not seekable.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:Aspose.Zip.Xz.XzArchive.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Xz.XzArchive" /> class prepared for decompressing.
            </summary>
      <param name="path">Path to the source of the archive.</param>
      <remarks>
            This constructor does not decompress. See <see cref="M:Aspose.Zip.Xz.XzArchive.Extract(System.IO.Stream)" /> method for decompressing.
            </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
    </member>
    <member name="M:Aspose.Zip.Xz.XzArchive.Dispose">
      <inheritdoc />
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Xz.XzArchive.Extract(System.IO.Stream)">
      <summary>
            Extracts xz archive to a stream.
            </summary>
      <param name="destination">Stream for storing decompressed data.</param>
      <exception cref="T:System.InvalidOperationException">Archive headers and service information were not read.</exception>
      <example>
        <code>
            using (FileStream xzFile = File.Open(sourceFileName, FileMode.Open))
            {
                using (FileStream extractedFile = File.Open(extractedFileName, FileMode.Create))
                {
                    using (var archive = new XzArchive(xzFile))
                    {
                        archive.Extract(extractedFile);
                    }
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Xz.XzArchive.Extract(System.IO.FileInfo)">
      <summary>
            Extracts xz archive to a file.
            </summary>
      <param name="fileInfo">FileInfo for storing decompressed data.</param>
      <exception cref="T:System.InvalidOperationException">Archive headers and service information were not read.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to open the <paramref name="fileInfo" />.</exception>
      <exception cref="T:System.ArgumentException">File path is empty or contains only white spaces.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Path to file is read-only or is a directory.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileInfo" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.IO.IOException">The file is already open.</exception>
      <example>
        <code>
            using (FileStream xzFile = File.Open(sourceFileName, FileMode.Open))
            {
                using (var archive = new XzArchive(xzFile))
                {
                    archive.Extract(new FileInfo("extracted.bin"));
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Xz.XzArchive.ExtractToDirectory(System.String)">
      <summary>
            Extracts content of the archive to the directory provided.
            </summary>
      <param name="destinationDirectory">The path to the directory to place the extracted files in.</param>
      <remarks>If the directory does not exist, it will be created.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectory" /> is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access existing directory.</exception>
      <exception cref="T:System.NotSupportedException">If directory does not exist, path contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationDirectory" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the System.IO.Path.GetInvalidPathChars method. 
            -or- path is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.IO.IOException">The directory specified by path is a file. -or- The network name is not known.</exception>
    </member>
    <member name="M:Aspose.Zip.Xz.XzArchive.Extract(System.String)">
      <summary>
            Extracts xz archive to a file by path.
            </summary>
      <param name="path">Path to file which will store decompressed data.</param>
      <returns>
        <see cref="T:System.IO.FileInfo" /> instance containing extracted data.</returns>
      <exception cref="T:System.InvalidOperationException">Archive headers and service information were not read.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (FileStream xzFile = File.Open(sourceFileName, FileMode.Open))
            {
                using (var archive = new XzArchive(xzFile))
                {
                    archive.Extract("extracted.bin");
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Xz.XzArchive.SetSource(System.IO.Stream)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="source">The input stream for the archive.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="source" /> stream is unseekable.</exception>
      <example>
        <code>
            using (var archive = new XzArchive())
            {
                archive.SetSource(new MemoryStream(new byte[] { 0x00, 0xFF }));
                archive.Save("archive.xz");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Xz.XzArchive.SetSource(System.IO.FileInfo)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="fileInfo">FileInfo which will be opened as input stream.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to open the <paramref name="fileInfo" />.</exception>
      <exception cref="T:System.ArgumentException">File path is empty or contains only white spaces.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Path to file is read-only or is a directory.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileInfo" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.IO.IOException">The file is already open.</exception>
      <example>
        <code>
            using (var archive = new XzArchive()) 
            {
                archive.SetSource(new FileInfo("data.bin"));
                archive.Save("archive.xz");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Xz.XzArchive.SetSource(System.String)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="sourcePath">Path to file which will be opened as input stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePath" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="sourcePath" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="sourcePath" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="sourcePath" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="sourcePath" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (var archive = new XzArchive()) 
            {
                archive.SetSource("data.bin");
                archive.Save("archive.xz");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Xz.XzArchive.Save(System.IO.Stream)">
      <summary>
            Saves xz archive to the stream provided.
            </summary>
      <param name="output">Destination stream.</param>
      <remarks>
        <para>
          <paramref name="output" /> must be seekable.</para>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="output" /> does not support seeking.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> is null.</exception>
      <example>
        <code>
            using (FileStream xzFile = File.Open("archive.xz", FileMode.Create))
            {
                using (var archive = new XzArchive())
                {
                    archive.SetSource("data.bin");
                    archive.Save(xzFile);
                 }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Xz.XzArchive.Save(System.String)">
      <summary>
            Saves xz archive to destination file provided.
            </summary>
      <param name="destinationFileName">The path of the archive to be created. If the specified file name points to an existing file, it will be overwritten.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="destinationFileName" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="destinationFileName" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="destinationFileName" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="destinationFileName" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (var archive = new XzArchive()) 
            {
                archive.SetSource(new FileInfo("data.bin"));
                archive.Save("result.xz");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Xz.XzArchive.Dispose(System.Boolean)">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <param name="disposing">Whether managed resources should be disposed.</param>
    </member>
    <member name="T:Aspose.Zip.Lzip.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Zip.Lzip" /> namespace contains classes which represent lzip archive related entities.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Lzip.LzipArchive">
      <summary>
            This class represents Lzip archive file. Use it to compose or extract Lzip archives.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Lzip.LzipArchive.Settings">
      <summary>
            Gets the setting of particular lzip archive.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Lzip.LzipArchive.#ctor(Aspose.Zip.Lzip.LzipArchiveSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Lzip.LzipArchive" />.
            </summary>
      <param name="settings">Setting of particular lzip archive with definition of dictionary size.</param>
    </member>
    <member name="M:Aspose.Zip.Lzip.LzipArchive.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Lzip.LzipArchive" /> class prepared for decompressing.
            </summary>
      <param name="sourceStream">The source of the archive.</param>
      <remarks>
            This constructor does not decompress. See <see cref="M:Aspose.Zip.Lzip.LzipArchive.Extract(System.IO.Stream)" /> method for decompressing.
            </remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceStream" /> is not seekable.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceStream" /> is null.</exception>
      <exception cref="T:System.IO.InvalidDataException">Headers do not match lzip type of archive.</exception>
    </member>
    <member name="M:Aspose.Zip.Lzip.LzipArchive.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Lzip.LzipArchive" /> class prepared for decompressing.
            </summary>
      <param name="path">Path to the source of the archive.</param>
      <remarks>
            This constructor does not decompress. See <see cref="M:Aspose.Zip.Lzip.LzipArchive.Extract(System.IO.Stream)" /> method for decompressing.
            </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <exception cref="T:System.IO.InvalidDataException">Headers do not match lzip type of archive.</exception>
      <example>
        <code> 
            using (FileStream extractedFile = File.Open(extractedFileName, FileMode.Create))
            {
                using (var archive = new LzipArchive(sourceLzipFile))
                {
                     archive.Extract(extractedFile);
                   }
               }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Lzip.LzipArchive.Extract(System.IO.Stream)">
      <summary>
            Extracts lzip archive to a stream.
            </summary>
      <param name="destination">Stream for storing decompressed data.</param>
      <exception cref="T:System.InvalidOperationException">Archive headers and service information were not read.</exception>
      <exception cref="T:System.IO.InvalidDataException">Error in data in header or checksum.</exception>
      <exception cref="T:System.ArgumentNullException">Destination stream is null.</exception>
      <exception cref="T:System.ArgumentException">Destination stream does not support writing.</exception>
      <example>
        <code>
            using (FileStream sourceLzipFile = File.Open(sourceFileName, FileMode.Open))
            {
               using (FileStream extractedFile = File.Open(extractedFileName, FileMode.Create))
               {
                    using (var archive = new LzipArchive(sourceLzipFile))
                    {
                           archive.Extract(extractedFile);
                    }
               }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Lzip.LzipArchive.Extract(System.IO.FileInfo)">
      <summary>
            Extracts lzip archive to a file.
            </summary>
      <param name="fileInfo">FileInfo for storing decompressed data.</param>
      <exception cref="T:System.InvalidOperationException">Archive headers and service information were not read.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to open the <paramref name="fileInfo" />.</exception>
      <exception cref="T:System.ArgumentException">File path is empty or contains only white spaces.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Path to file is read-only or is a directory.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileInfo" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.IO.IOException">The file is already open.</exception>
      <example>
        <code>
            using (FileStream lzipFile = File.Open(sourceFileName, FileMode.Open))
            {
                using (var archive = new LzipArchive(lzipFile))
                {
                    archive.Extract(new FileInfo("extracted.bin"));
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Lzip.LzipArchive.Extract(System.String)">
      <summary>
            Extracts lzip archive to a file by path.
            </summary>
      <param name="path">Path to file which will store decompressed data.</param>
      <exception cref="T:System.InvalidOperationException">Archive headers and service information were not read.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (FileStream lzipFile = File.Open(sourceFileName, FileMode.Open))
            {
                using (var archive = new LzipArchive(xzFile))
                {
                    archive.Extract("extracted.bin");
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Lzip.LzipArchive.ExtractToDirectory(System.String)">
      <summary>
            Extracts content of the archive to the directory provided.
            </summary>
      <param name="destinationDirectory">The path to the directory to place the extracted files in.</param>
      <remarks>If the directory does not exist, it will be created.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectory" /> is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access existing directory.</exception>
      <exception cref="T:System.NotSupportedException">If directory does not exist, path contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationDirectory" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the System.IO.Path.GetInvalidPathChars method. 
            -or- path is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.IO.IOException">The directory specified by path is a file. -or- The network name is not known.</exception>
    </member>
    <member name="M:Aspose.Zip.Lzip.LzipArchive.Save(System.IO.Stream)">
      <summary>
            Saves lzip archive to the stream provided.
            </summary>
      <param name="outputStream">Destination stream.</param>
      <remarks>
        <para>
          <paramref name="outputStream" /> must be seekable.</para>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="outputStream" /> does not support seeking.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outputStream" /> is null.</exception>
      <example>
        <code>
            using (FileStream lzFile = File.Open("archive.lz", FileMode.Create))
            {
                using (var archive = new LzipArchive())
                {
                    archive.SetSource("data.bin");
                    archive.Save(lzFile);
                 }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Lzip.LzipArchive.SetSource(System.IO.Stream)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="source">The input stream for the archive.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="source" /> stream is unseekable.</exception>
      <example>
        <code>
               using (var archive = new LzipArchive())
               {
                   archive.SetSource(new MemoryStream(new byte[] { 0x00, 0xFF }));
                   archive.Save("archive.lz");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Lzip.LzipArchive.SetSource(System.IO.FileInfo)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="fileInfo">FileInfo which will be opened as input stream.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to open the <paramref name="fileInfo" />.</exception>
      <exception cref="T:System.ArgumentException">File path is empty or contains only white spaces.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Path to file is read-only or is a directory.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileInfo" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.IO.IOException">The file is already open.</exception>
      <example>
        <code>
            using (var archive = new LzipArchive()) 
            {
                archive.SetSource(new FileInfo("data.bin"));
                archive.Save("archive.lz");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Lzip.LzipArchive.SetSource(System.String)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="path">Path to file to be compressed..</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (var archive = new LzipArchive()) 
            {
                archive.SetSource("data.bin");
                archive.Save("archive.lz");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Lzip.LzipArchive.Save(System.String)">
      <summary>
            Saves lzip archive to destination file provided.
            </summary>
      <param name="destinationFileName">The path of the archive to be created. If the specified file name points to an existing file, it will be overwritten.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="destinationFileName" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="destinationFileName" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="destinationFileName" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="destinationFileName" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (var archive = new LzipArchive()) 
            {
                archive.SetSource(new FileInfo("data.bin"));
                archive.Save("result.lz");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Lzip.LzipArchive.Save(System.IO.FileInfo)">
      <summary>
            Saves lzip archive to destination file provided.
            </summary>
      <param name="destination">FileInfo which will be opened as destination stream.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to open the <paramref name="destination" />.</exception>
      <exception cref="T:System.ArgumentException">File path is empty or contains only white spaces.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Path to file is read-only or is a directory.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.IO.IOException">The file is already open.</exception>
      <example>
        <code>
            using (var archive = new LzipArchive()) 
            {
                archive.SetSource(new FileInfo("data.bin"));
                archive.Save(new FileInfo("archive.lz"));
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Lzip.LzipArchive.Dispose">
      <inheritdoc />
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Lzip.LzipArchive.Dispose(System.Boolean)">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <param name="disposing">Whether managed resources should be disposed.</param>
    </member>
    <member name="T:Aspose.Zip.Lzip.LzipArchiveSettings">
      <summary>
            The class contains setting of particular lzip archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Lzip.LzipArchiveSettings.FastestSpeed">
      <summary>
            Gets the instance of the <see cref="T:Aspose.Zip.Lzip.LzipArchiveSettings" /> class
            with dictionary size equals to 65536 bytes in LZMA filter.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Lzip.LzipArchiveSettings.FastSpeed">
      <summary>
            Gets the instance of the <see cref="T:Aspose.Zip.Lzip.LzipArchiveSettings" /> class
            with dictionary size equals to 1 megabyte in LZMA filter.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Lzip.LzipArchiveSettings.Normal">
      <summary>
            Gets the instance of the <see cref="T:Aspose.Zip.Lzip.LzipArchiveSettings" /> class
            with dictionary size equals to 16 megabytes in LZMA filter.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Lzip.LzipArchiveSettings.HighCompression">
      <summary>
            Gets the instance of the <see cref="T:Aspose.Zip.Lzip.LzipArchiveSettings" /> class
            with dictionary size equals to 32 megabytes in LZMA filter.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Lzip.LzipArchiveSettings.MaximumCompression">
      <summary>
            Gets the instance of the <see cref="T:Aspose.Zip.Lzip.LzipArchiveSettings" /> class
            with dictionary size equals to 64 megabytes in LZMA filter.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Lzip.LzipArchiveSettings.DictionarySize">
      <summary>
            Gets the size of dictionary which used by LZMA compression.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Lzip.LzipArchiveSettings.MaxMemberSize">
      <summary>
            Gets the maximum size of one member in lzip archive presented in bytes.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Lzip.LzipArchiveSettings.CompressionThreads">
      <summary>
            Gets or sets compression thread count. If the value greater than 1, multithreading compression will be used.
            </summary>
      <remarks>Do not set this number more than CPU cores.</remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of threads is more than 100.</exception>
    </member>
    <member name="M:Aspose.Zip.Lzip.LzipArchiveSettings.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Lzip.LzipArchiveSettings" /> with particular dictionary size.
            </summary>
      <param name="dictionarySize">Dictionary size for LZMA compression in bytes.</param>
      <param name="maxMemberSize">Maximum size of one member in lzip archive presented in bytes. Default value is 60 MB.</param>
    </member>
    <member name="T:Aspose.Zip.Cpio.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Zip.Cpio" /> namespace contains classes which represent cpio archive related entities.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Cpio.CpioArchive">
      <summary>
            This class represents cpio archive file.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Cpio.CpioArchive.Entries">
      <summary>
            Gets entries of <see cref="T:Aspose.Zip.Cpio.CpioEntry" /> type constituting the archive.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioArchive.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Cpio.CpioArchive" /> class.
            </summary>
      <example>
        <para>The following example shows how to compress a file.</para>
        <code>
            using (var archive = new CpioArchive())
            {
                archive.CreateEntry("first.bin", "data.bin");
                archive.Save("archive.cpio");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioArchive.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Cpio.CpioArchive" /> class and composes entries list can be extracted from the archive.
            </summary>
      <remarks>
            This constructor does not unpack any entry. See <see cref="M:Aspose.Zip.Cpio.CpioEntry.Open" /> method for unpacking.
            </remarks>
      <param name="sourceStream">The source of the archive. It must be seekable.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceStream" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceStream" /> is not seekable.</exception>
      <exception cref="T:System.IO.InvalidDataException">
        <paramref name="sourceStream" /> is not valid cpio archive.</exception>
      <example>
        <para>The following example shows how to extract all of the entries to a directory.</para>
        <code>
            using (var archive = new CpioArchive(File.OpenRead("archive.cpio")))
            { 
               archive.ExtractToDirectory("C:\extracted");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioArchive.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Cpio.CpioArchive" /> class and composes entries list can be extracted from the archive.
            </summary>
      <remarks>
            This constructor does not unpack any entry. See <see cref="M:Aspose.Zip.Cpio.CpioEntry.Open" /> method for unpacking.
            </remarks>
      <param name="path">The path to the archive file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <para>The following example shows how to extract all of the entries to a directory.</para>
        <code>
            using (var archive = new CpioArchive("archive.cpio")) 
            { 
               archive.ExtractToDirectory("C:\extracted");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioArchive.CreateEntries(System.String,System.Boolean)">
      <summary>
            Adds to the archive all the files and directories recursively in the directory given.
            </summary>
      <param name="sourceDirectory">Directory to compress.</param>
      <param name="includeRootDirectory">Indicates whether to include the root directory itself or not.</param>
      <returns>Cpio entry instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirectory" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access <paramref name="sourceDirectory" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceDirectory" /> contains invalid characters such as ", &lt;, &gt;, or |.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="sourceDirectory" /> stands for a file, not for a directory.</exception>
      <example>
        <code>
            using (FileStream cpioFile = File.Open("archive.cpio", FileMode.Create))
            {
                using (var archive = new CpioArchive())
                {
                    archive.CreateEntries("C:\folder", false);
                    archive.Save(cpioFile);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioArchive.CreateEntries(System.IO.DirectoryInfo,System.Boolean)">
      <summary>
            Adds to the archive all the files and directories recursively in the directory given.
            </summary>
      <param name="directory">Directory to compress.</param>
      <param name="includeRootDirectory">Indicates whether to include the root directory itself or not.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access <paramref name="directory" />.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="directory" /> stands for a file, not for a directory.</exception>
      <returns>Cpio entry instance.</returns>
      <example>
        <code>
            using (FileStream cpioFile = File.Open("archive.cpio", FileMode.Create))
            {
                using (var archive = new CpioArchive())
                {
                    archive.CreateEntries(new DirectoryInfo("C:\folder"), false);
                    archive.Save(cpioFile);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioArchive.CreateEntry(System.String,System.IO.FileInfo,System.Boolean)">
      <summary>
            Create single entry within the archive.
            </summary>
      <param name="name">The name of the entry.</param>
      <param name="fileInfo">The metadata of file or folder to be compressed.</param>
      <param name="openImmediately">True if open the file immediately, otherwise open the file on archive saving.</param>
      <returns>Cpio entry instance.</returns>
      <remarks>
        <para>If the file is opened immediately with <paramref name="openImmediately" /> parameter it becomes blocked until archive is disposed.</para>
      </remarks>
      <example>
        <code>
            FileInfo fileInfo = new FileInfo("data.bin");
            using (var archive = new CpioArchive())
            {
                archive.CreateEntry("test.bin", fileInfo);
                archive.Save("archive.cpio");
            }
            </code>
      </example>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileInfo" /> is null.</exception>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioArchive.CreateEntry(System.String,System.String,System.Boolean)">
      <summary>
            Create single entry within the archive.
            </summary>
      <param name="name">The name of the entry.</param>
      <param name="sourcePath">Path to file to be compressed.</param>
      <param name="openImmediately">True if open the file immediately, otherwise open the file on archive saving.</param>
      <returns>Cpio entry instance.</returns>
      <remarks>
        <para>The entry name is solely set within <paramref name="name" /> parameter. The file name provided in <paramref name="sourcePath" /> parameter does not affect the entry name.</para>
        <para>If the file is opened immediately with <paramref name="openImmediately" /> parameter it becomes blocked until archive is disposed.</para>
      </remarks>
      <example>
        <code>
            using (var archive = new CpioArchive())
            {
                archive.CreateEntry("first.bin", "data.bin");
                archive.Save("archive.cpio");
            }
            </code>
      </example>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePath" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="sourcePath" /> is empty, contains only white spaces, or contains invalid characters. - or - File name, as a part of <paramref name="name" />, exceeds 100 symbols.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="sourcePath" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="sourcePath" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. - or - <paramref name="name" /> is too long for cpio.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="sourcePath" /> contains a colon (:) in the middle of the string.</exception>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioArchive.CreateEntry(System.String,System.IO.Stream)">
      <summary>
            Create single entry within the archive.
            </summary>
      <param name="name">The name of the entry.</param>
      <param name="source">The input stream for the entry.</param>
      <returns>Cpio entry instance.</returns>
      <example>
        <code>
            using (var archive = new CpioArchive())
            {
                archive.CreateEntry("data.bin", File.OpenRead("data.bin"));
                archive.Save("archive.cpio");
            }
            </code>
      </example>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.</exception>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioArchive.DeleteEntry(Aspose.Zip.Cpio.CpioEntry)">
      <summary>
            Removes the first occurrence of a specific entry from the entries list.
            </summary>
      <param name="entry">The entry to remove from the entries list.</param>
      <returns>Cpio entry instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entry" /> is null.</exception>
      <example>
        <para>Here is how you can remove all entries except the last one:</para>
        <code>
            using (var archive = new CpioArchive("archive.cpio"))
            {
                while (archive.Entries.Count &gt; 1)
                    archive.DeleteEntry(archive.Entries[0]);
                archive.Save(outputCpioFile);
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioArchive.DeleteEntry(System.Int32)">
      <summary>
            Removes the entry from the entries list by index.
            </summary>
      <param name="entryIndex">The zero-based index of the entry to remove.</param>
      <returns>The archive with the entry deleted.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="entryIndex" /> is less than 0.-or- <paramref name="entryIndex" /> is equal to or greater than <c>Entries</c> count.</exception>
      <example>
        <code>
            using (var archive = new CpioArchive("two_files.cpio"))
            {
                archive.DeleteEntry(0);
                archive.Save("single_file.cpio");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioArchive.ExtractToDirectory(System.String)">
      <summary>
            Extracts all the files in the archive to the directory provided.
            </summary>
      <param name="destinationDirectory">The path to the directory to place the extracted files in.</param>
      <remarks>If the directory does not exist, it will be created.</remarks>
      <exception cref="T:System.ArgumentNullException">path is null</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access existing directory.</exception>
      <exception cref="T:System.NotSupportedException">If directory does not exist, path contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the System.IO.Path.GetInvalidPathChars method. -or- path is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.IO.IOException">The directory specified by path is a file. -or- The network name is not known.</exception>
      <example>
        <code>
            using (var archive = new CpioArchive("archive.cpio")) 
            { 
               archive.ExtractToDirectory("C:\extracted");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioArchive.Save(System.String,Aspose.Zip.Cpio.CpioFormat)">
      <summary>
            Saves archive to destination file provided.
            </summary>
      <param name="destinationFileName">The path of the archive to be created. If the specified file name points to an existing file, it will be overwritten.</param>
      <param name="cpioFormat">Defines cpio header format.</param>
      <remarks>
        <para>It is possible to save an archive to the same path as it was loaded from.
            However, this is not recommended because this approach uses copying to temporary file.</para>
      </remarks>
      <example>
        <code>
            using (var archive = new CpioArchive())
            {
                archive.CreateEntry("entry1", "data.bin");        
                archive.Save("archive.cpio");
            }       
            </code>
      </example>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationFileName" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified <paramref name="destinationFileName" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified <paramref name="destinationFileName" /> is invalid, (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="destinationFileName" /> specified a file that is read-only and access is not Read.-or- path specified a directory.-or- The caller does not have the required permission.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="destinationFileName" /> is in an invalid format.</exception>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioArchive.Save(System.IO.Stream,Aspose.Zip.Cpio.CpioFormat)">
      <summary>
            Saves archive to the stream provided.
            </summary>
      <param name="output">Destination stream.</param>
      <param name="cpioFormat">Defines cpio header format.</param>
      <remarks>
        <para>
          <paramref name="output" /> must be writable.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="output" /> is not writable. - or - <paramref name="output" /> is the same stream we extract from.
            - OR -
            It is impossible to save archive in <paramref name="cpioFormat" /> due to format restrictions.</exception>
      <example>
        <code>
            using (FileStream cpioFile = File.Open("archive.cpio", FileMode.Create))
            {
                using (var archive = new CpioArchive())
                {
                    archive.CreateEntry("entry1", "data.bin");        
                    archive.Save(cpioFile);
                }
            }       
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioArchive.SaveGzipped(System.IO.Stream,Aspose.Zip.Cpio.CpioFormat)">
      <summary>
            Saves archive to the stream with gzip compression.
            </summary>
      <param name="output">Destination stream.</param>
      <param name="cpioFormat">Defines cpio header format.</param>
      <remarks>
        <para>
          <paramref name="output" /> must be writable.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="output" /> is not writable.</exception>
      <example>
        <code>
            using (FileStream result = File.OpenWrite("result.cpio.gz"))
            {
                using (FileStream source = File.Open("data.bin", FileMode.Open, FileAccess.Read))
                {
                    using (var archive = new CpioArchive())
                    {
                        archive.CreateEntry("entry.bin", source);
                        archive.SaveGzipped(result);
                    }
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioArchive.SaveGzipped(System.String,Aspose.Zip.Cpio.CpioFormat)">
      <summary>
            Saves archive to the file by path with gzip compression.
            </summary>
      <param name="path">The path of the archive to be created. If the specified file name points to an existing file, it will be overwritten.</param>
      <param name="cpioFormat">Defines cpio header format.</param>
      <example>
        <code>
            using (FileStream source = File.Open("data.bin", FileMode.Open, FileAccess.Read))
            {
                using (var archive = new CpioArchive())
                {
                    archive.CreateEntry("entry.bin", source);
                    archive.SaveGzipped("result.cpio.gz");
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioArchive.SaveXzCompressed(System.IO.Stream,Aspose.Zip.Cpio.CpioFormat,Aspose.Zip.Xz.Settings.XzArchiveSettings)">
      <summary>
            Saves archive to the stream with xz compression.
            </summary>
      <param name="output">Destination stream.</param>
      <param name="cpioFormat">Defines cpio header format.</param>
      <param name="settings">Set of setting particular xz archive: dictionary size, block size, check type.</param>
      <remarks>
        <para>
          <paramref name="output" />The stream must be writable.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="output" /> is not writable.</exception>
      <example>
        <code>
            using (FileStream result = File.OpenWrite("result.cpio.xz"))
            {
                using (FileStream source = File.Open("data.bin", FileMode.Open, FileAccess.Read))
                {
                    using (var archive = new CpioArchive())
                    {
                        archive.CreateEntry("entry.bin", source);
                        archive.SaveXzCompressed(result);
                    }
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioArchive.SaveXzCompressed(System.String,Aspose.Zip.Cpio.CpioFormat,Aspose.Zip.Xz.Settings.XzArchiveSettings)">
      <summary>
            Saves archive to the path by path with xz compression.
            </summary>
      <param name="path">The path of the archive to be created. If the specified file name points to an existing file, it will be overwritten.</param>
      <param name="cpioFormat">Defines cpio header format.</param>
      <param name="settings">Set of setting particular xz archive: dictionary size, block size, check type.</param>
      <example>
        <code>
                using (FileStream source = File.Open("data.bin", FileMode.Open, FileAccess.Read))
                {
                    using (var archive = new CpioArchive())
                    {
                        archive.CreateEntry("entry.bin", source);
                        archive.SaveXzCompressed("result.cpio.xz");
                    }
                }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioArchive.Dispose">
      <inheritdoc />
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioArchive.Dispose(System.Boolean)">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <param name="disposing">Whether managed resources should be disposed.</param>
    </member>
    <member name="T:Aspose.Zip.Cpio.CpioEntry">
      <summary>
             Represents single file within cpio archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Cpio.CpioEntry.Name">
      <summary>
            Gets name of the entry within archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Cpio.CpioEntry.Parent">
      <summary>
            Gets the archive the entry belongs to.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Cpio.CpioEntry.Length">
      <summary>
            Gets the length of the entry in bytes.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Cpio.CpioEntry.IsDirectory">
      <summary>
            Gets a value indicating whether the entry represents directory.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Cpio.CpioEntry.LastWriteTimeUtc">
      <summary>
            Gets the last write time.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioEntry.Open">
      <summary>
            Opens the entry for extraction and provides a stream with entry content.
            </summary>
      <returns>The stream that represents the contents of the entry.</returns>
      <remarks>
            Read from the stream to get original content of file. See examples section.
            </remarks>
      <example>
            Usage:
            <code>Stream decompressed = entry.Open();</code><para>
            .NET 4.0 and higher - use Stream.CopyTo method:
            <code>
            decompressed.CopyTo(httpResponse.OutputStream)
            </code></para><para>
            .NET 3.5 and before - copy bytes manually:
            <code>
            byte[] buffer = new byte[8192];
            int bytesRead;
            while (0 &lt; (bytesRead = decompressed.Read(buffer, 0, buffer.Length)))
             fileStream.Write(buffer, 0, bytesRead);
            </code></para></example>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioEntry.Extract(System.String)">
      <summary>
            Extracts the entry to the filesystem by the path provided.
            </summary>
      <param name="path">The path to destination file. If the file already exists, it will be overwritten.</param>
      <returns>The file info of composed file.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (var archive = new CpioArchive("archive.cpio"))
            {
                archive.Entries[0].Extract("data.bin");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioEntry.Extract(System.IO.Stream)">
      <summary>
            Extracts the entry to the stream provided.
            </summary>
      <param name="destination">Destination stream. Must be writable.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not support writing.</exception>
      <example>
        <para>Extract an entry of cpio archive.</para>
        <code>
            using (var archive = new CpioArchive("archive.cpio"))
            {
                archive.Entries[0].Extract(httpResponseStream);
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Cpio.CpioEntry.ToString">
      <inheritdoc />
    </member>
    <member name="T:Aspose.Zip.Cpio.CpioFormat">
      <summary>
            Enumeration with supported formats of cpio.
            </summary>
    </member>
    <member name="F:Aspose.Zip.Cpio.CpioFormat.OldBinary">
      <summary>
            Old Binary Format.
            </summary>
    </member>
    <member name="F:Aspose.Zip.Cpio.CpioFormat.OldAscii">
      <summary>
            Portable ASCII Format.
            </summary>
    </member>
    <member name="F:Aspose.Zip.Cpio.CpioFormat.NewAscii">
      <summary>
            New ASCII Format.
            </summary>
    </member>
    <member name="F:Aspose.Zip.Cpio.CpioFormat.NewAsciiCrc">
      <summary>
            New ASCII CRC Format.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Z.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Zip.Z" /> namespace contains classes which represent Z archive related entities.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Z.ZArchive">
      <summary>
            This class represents Z (compress) archive file. Use it to compose or extract Z archives.
            </summary>
      <remarks>
            See https://docs.fileformat.com/compression/z/
            </remarks>
    </member>
    <member name="M:Aspose.Zip.Z.ZArchive.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Z.ZArchive" /> class prepared for compressing.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Z.ZArchive.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Z.ZArchive" /> class prepared for decompressing.
            </summary>
      <param name="source">The source of the archive.</param>
      <remarks>
            This constructor does not decompress. See <see cref="M:Aspose.Zip.Z.ZArchive.Extract(System.IO.Stream)" /> method for decompressing.
            </remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> is not seekable.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:Aspose.Zip.Z.ZArchive.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Z.ZArchive" /> class prepared for decompressing.
            </summary>
      <param name="path">Path to the source of the archive.</param>
      <remarks>
            This constructor does not decompress. See <see cref="M:Aspose.Zip.Z.ZArchive.Extract(System.IO.Stream)" /> method for decompressing.
            </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
    </member>
    <member name="M:Aspose.Zip.Z.ZArchive.Dispose">
      <inheritdoc />
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Z.ZArchive.Extract(System.IO.Stream)">
      <summary>
            Extracts Z archive to a stream.
            </summary>
      <param name="destination">Stream for storing decompressed data.</param>
      <exception cref="T:System.IO.InvalidDataException">Data can not be decompressed.</exception>
      <example>
        <code>
            using (FileStream zFile = File.Open(sourceFileName, FileMode.Open))
            {
                using (FileStream extractedFile = File.Open(extractedFileName, FileMode.Create))
                {
                    using (var archive = new ZArchive(zFile))
                    {
                        archive.Extract(extractedFile);
                    }
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Z.ZArchive.Extract(System.IO.FileInfo)">
      <summary>
            Extracts Z archive to a file.
            </summary>
      <param name="fileInfo">FileInfo for storing decompressed data.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to open the <paramref name="fileInfo" />.</exception>
      <exception cref="T:System.ArgumentException">File path is empty or contains only white spaces.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Path to file is read-only or is a directory.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileInfo" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.IO.IOException">The file is already open.</exception>
      <exception cref="T:System.IO.InvalidDataException">Data can not be decompressed.</exception>
      <example>
        <code>
            using (FileStream zFile = File.Open(sourceFileName, FileMode.Open))
            {
                using (var archive = new ZArchive(zFile))
                {
                    archive.Extract(new FileInfo("extracted.bin"));
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Z.ZArchive.Extract(System.String)">
      <summary>
            Extracts Z archive to a file by path.
            </summary>
      <param name="path">Path to file which will store decompressed data.</param>
      <returns>Info of extracted file.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <exception cref="T:System.IO.InvalidDataException">Data can not be decompressed.</exception>
      <example>
        <code>
            using (FileStream zFile = File.Open(sourceFileName, FileMode.Open))
            {
                using (var archive = new ZArchive(zFile))
                {
                    archive.Extract("extracted.bin");
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Z.ZArchive.ExtractToDirectory(System.String)">
      <summary>
            Extracts content of the archive to the directory provided.
            </summary>
      <param name="destinationDirectory">The path to the directory to place the extracted files in.</param>
      <remarks>If the directory does not exist, it will be created.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectory" /> is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access existing directory.</exception>
      <exception cref="T:System.NotSupportedException">If directory does not exist, path contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationDirectory" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the System.IO.Path.GetInvalidPathChars method. 
            -or- path is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.IO.IOException">The directory specified by path is a file. -or- The network name is not known.</exception>
    </member>
    <member name="M:Aspose.Zip.Z.ZArchive.Save(System.IO.Stream)">
      <summary>
            Saves xz archive to the stream provided.
            </summary>
      <param name="output">Destination stream.</param>
      <remarks>
        <para>
          <paramref name="output" /> must be seekable.</para>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="output" /> does not support seeking.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> is null.</exception>
      <example>
        <code>
            using (FileStream zFile = File.Open("data.bin.z", FileMode.Create))
            {
                using (var archive = new ZArchive())
                {
                    archive.SetSource("data.bin");
                    archive.Save(zFile);
                 }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Z.ZArchive.Save(System.String)">
      <summary>
            Saves Z archive to destination file provided.
            </summary>
      <param name="destinationFileName">+The path of the archive to be created. If the specified file name points to an existing file, it will be overwritten.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="destinationFileName" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="destinationFileName" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="destinationFileName" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="destinationFileName" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (var archive = new ZArchive()) 
            {
                archive.SetSource(new FileInfo("data.bin"));
                archive.Save("data.bin.Z");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Z.ZArchive.SetSource(System.IO.Stream)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="source">The input stream for the archive.</param>
      <example>
        <code>
            using (var archive = new ZArchive())
            {
                archive.SetSource(new MemoryStream(new byte[] { 0x00, 0xFF }));
                archive.Save("archive.Z");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Z.ZArchive.SetSource(System.IO.FileInfo)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="fileInfo">FileInfo which will be opened as input stream.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to open the <paramref name="fileInfo" />.</exception>
      <exception cref="T:System.ArgumentException">File path is empty or contains only white spaces.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Path to file is read-only or is a directory.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileInfo" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.IO.IOException">The file is already open.</exception>
      <example>
        <code>
            using (var archive = new ZArchive()) 
            {
                archive.SetSource(new FileInfo("data.bin"));
                archive.Save("data.bin.Z");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Z.ZArchive.SetSource(System.String)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="sourcePath">Path to file which will be opened as input stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePath" /> is null or empty string.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access a resource.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="sourcePath" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="sourcePath" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="sourcePath" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="sourcePath" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (var archive = new ZArchive()) 
            {
                archive.SetSource("data.bin");
                archive.Save("data.bin.Z");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Z.ZArchive.Dispose(System.Boolean)">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <param name="disposing">Whether managed resources should be disposed.</param>
    </member>
    <member name="T:Aspose.Zip.Wim.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Zip.Wim" /> namespace contains classes which represent WIM archive related entities.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Wim.WimDirectoryEntry">
      <summary>
            Represents single directory within wim archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimDirectoryEntry.Directories">
      <summary>
            Gets entries of <see cref="T:Aspose.Zip.Wim.WimDirectoryEntry" /> type constituting the directory.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimDirectoryEntry.Files">
      <summary>
            Gets entries of <see cref="T:Aspose.Zip.Wim.WimFileEntry" /> type constituting the directory.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimDirectoryEntry.FilesAndDirectories">
      <summary>
            Gets entries of <see cref="T:Aspose.Zip.Wim.WimEntry" /> type constituting the directory.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimDirectoryEntry.AllEntries">
      <summary>
            Gets all entries of <see cref="T:Aspose.Zip.Wim.WimEntry" /> type constituting the directory recursively.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Wim.WimDirectoryEntry.ExtractToDirectory(System.String)">
      <summary>
            Extracts all the files in the current directory to the directory provided.
            </summary>
      <param name="destinationDirectory">The path to the directory to place the extracted files in.</param>
      <remarks>If the directory does not exist, it will be created.</remarks>
      <exception cref="T:System.ArgumentNullException">path is null</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access existing directory.</exception>
      <exception cref="T:System.NotSupportedException">If directory does not exist, path contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the System.IO.Path.GetInvalidPathChars method. -or- path is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.IO.IOException">The directory specified by path is a file. -or- The network name is not known.</exception>
      <example>
        <code>
            using (var archive = new WimArchive("archive.wim")) 
            { 
               archive.Images[0].RootDirectory.ExtractToDirectory(@"C:\\extracted");
            }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Zip.Wim.WimEntry">
      <summary>
            Represents single file or directory within wim image.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimEntry.Archive">
      <summary>
            Gets the archive the entry belongs to.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimEntry.Image">
      <summary>
            Gets the image the entry belongs to.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimEntry.Parent">
      <summary>
            Gets the parent directory the entry belongs to.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimEntry.Name">
      <summary>
            Gets name of the entry within image.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimEntry.ShortName">
      <summary>
            Gets short name of the entry within image.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimEntry.FullPath">
      <summary>
            Gets full path of the entry within image.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimEntry.ChangeTime">
      <summary>
            Gets the last time the file or directory was changed.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimEntry.CreationTime">
      <summary>
            Gets the creation time of the file or directory.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimEntry.LastAccessTime">
      <summary>
            Gets the last access time of the file or directory.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimEntry.LastWriteTime">
      <summary>
            Gets the modification time of the file or directory.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimEntry.FileAttributes">
      <summary>
            Gets the file or directory attributes.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimEntry.AlternateDataStreams">
      <summary>
            Gets the names of the alternate data streams for a file or directory.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimEntry.HardLink">
      <summary>
            Gets the hardlink id of the file or directory.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimEntry.HasHardLinks">
      <summary>
            Gets whether the file or directory is known by other names.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimEntry.IsDirectory">
      <summary>
            Gets a value indicating whether the entry represents directory.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Wim.WimEntry.ToString">
      <inheritdoc />
    </member>
    <member name="T:Aspose.Zip.Wim.WimArchive">
      <summary>
            This class represents wim archive file.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimArchive.Images">
      <summary>
            Gets entries of <see cref="T:Aspose.Zip.Wim.WimImage" /> type constituting the archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimArchive.Guid">
      <summary>
            Gets the identifying GUID for the archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimArchive.BootImageIndex">
      <summary>
            Gets the (zero-based) index of the bootable image.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimArchive.FileFormatVersion">
      <summary>
            Gets the version of the file format.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimArchive.Manifest">
      <summary>
            Gets the embedded manifest describing the file and the contained images.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Wim.WimArchive.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Wim.WimArchive" /> class and composes entries list can be extracted from the archive.
            </summary>
      <remarks>
            This constructor does not unpack any entry. See <see cref="M:Aspose.Zip.Wim.WimFileEntry.Open" /> method for unpacking.
            </remarks>
      <param name="sourceStream">The source of the archive. It must be seekable.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceStream" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceStream" /> is not seekable.</exception>
      <exception cref="T:System.IO.InvalidDataException">
        <paramref name="sourceStream" /> is not valid wim archive.</exception>
      <example>
        <para>The following example shows how to extract all of the entries to a directory.</para>
        <code>
            using (var archive = new WimArchive(File.OpenRead("archive.wim")))
            { 
               archive.Images[0].ExtractToDirectory("C:\\extracted");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Wim.WimArchive.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Wim.WimArchive" /> class and composes entries list can be extracted from the archive.
            </summary>
      <remarks>
            This constructor does not unpack any entry. See <see cref="M:Aspose.Zip.Wim.WimFileEntry.Open" /> method for unpacking.
            </remarks>
      <param name="path">The path to the archive file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <para>The following example shows how to extract all of the entries to a directory.</para>
        <code>
            using (var archive = new WimArchive("archive.wim")) 
            { 
               archive.Images[0].ExtractToDirectory("C:\\extracted");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Wim.WimArchive.ExtractToDirectory(System.String)">
      <summary>
            Extracts the archive to the file by path.
            </summary>
      <param name="destinationDirectory">The path to the directory to place the extracted files in.</param>
      <returns>Info of extracted file.</returns>
    </member>
    <member name="M:Aspose.Zip.Wim.WimArchive.Dispose(System.Boolean)">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <param name="disposing">Whether managed resources should be disposed.</param>
    </member>
    <member name="M:Aspose.Zip.Wim.WimArchive.Dispose">
      <inheritdoc />
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Wim.WimFileEntry">
      <summary>
             Represents single file within wim archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimFileEntry.Length">
      <summary>
            Gets the length of the entry in bytes.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Wim.WimFileEntry.Open">
      <summary>
            Opens the entry for extraction and provides a stream with entry content.
            </summary>
      <returns>The stream that represents the contents of the entry.</returns>
      <remarks>
            Read from the stream to get original content of file. See examples section.
            </remarks>
      <example>
            Usage:
            <code>Stream decompressed = entry.Open();</code><para>
            .NET 4.0 and higher - use Stream.CopyTo method:
            <code>
            decompressed.CopyTo(httpResponse.OutputStream)
            </code></para><para>
            .NET 3.5 and before - copy bytes manually:
            <code>
            byte[] buffer = new byte[8192];
            int bytesRead;
            while (0 &lt; (bytesRead = decompressed.Read(buffer, 0, buffer.Length)))
             fileStream.Write(buffer, 0, bytesRead);
            </code></para></example>
    </member>
    <member name="M:Aspose.Zip.Wim.WimFileEntry.Extract(System.String)">
      <summary>
            Extracts the entry to the filesystem by the path provided.
            </summary>
      <param name="path">The path to destination file. If the file already exists, it will be overwritten.</param>
      <returns>The file info of composed file.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (var archive = new WimArchive("archive.wim"))
            {
                archive.Images[0].RootDirectory.Files[0].Extract("data.bin");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Wim.WimFileEntry.Extract(System.IO.Stream)">
      <summary>
            Extracts the entry to the stream provided.
            </summary>
      <param name="destination">Destination stream. Must be writable.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not support writing.</exception>
      <example>
        <para>Extract an entry of wim archive.</para>
        <code>
            using (var archive = new WimArchive("archive.wim"))
            {
                archive.Images[0].RootDirectory.Files[0].Extract(httpResponseStream);
            }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Zip.Wim.WimImage">
      <summary>
             Represents single image within wim archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimImage.RootDirectory">
      <summary>
            Gets the root directory entry of the image.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimImage.AllEntries">
      <summary>
            Gets entries of <see cref="T:Aspose.Zip.Wim.WimEntry" /> type constituting the image recursively.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Wim.WimImage.Parent">
      <summary>
            Gets the archive the image belongs to.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Wim.WimImage.GetEntry(System.String)">
      <summary>
            Gets the entry of <see cref="T:Aspose.Zip.Wim.WimEntry" /> type for a given path.
            </summary>
      <param name="path">The path of file or directory.</param>
      <returns>The entry of <see cref="T:Aspose.Zip.Wim.WimEntry" /> type.</returns>
    </member>
    <member name="M:Aspose.Zip.Wim.WimImage.ExtractToDirectory(System.String)">
      <summary>
            Extracts all the files in the image to the directory provided.
            </summary>
      <param name="destinationDirectory">The path to the directory to place the extracted files in.</param>
      <remarks>If the directory does not exist, it will be created.</remarks>
      <exception cref="T:System.ArgumentNullException">path is null</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access existing directory.</exception>
      <exception cref="T:System.NotSupportedException">If directory does not exist, path contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the System.IO.Path.GetInvalidPathChars method. -or- path is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.IO.IOException">The directory specified by path is a file. -or- The network name is not known.</exception>
      <example>
        <code>
            using (var archive = new WimArchive("install.wim")) 
            { 
               archive.Images[0].ExtractToDirectory("C:\\extracted");
            }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Zip.Xar.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Zip.Xar" /> namespace contains classes which represent Xar archive related entities.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Xar.XarBzip2CompressionSettings">
      <summary>
            Settings for Bzip2 compression method.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Xar.XarBzip2CompressionSettings.BlockSize">
      <summary>
            Block size in hundreds of kilobytes.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Xar.XarBzip2CompressionSettings.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Xar.XarBzip2CompressionSettings" /> class.
            </summary>
      <param name="blockSize">Block size in hundreds of kilobytes.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Block size is not between 1 and 9.</exception>
      <example>
        <code>
            using (XarArchive archive = new XarArchive())
            {
                archive.CreateEntry("data.bin", "data.bin", new XarBzip2CompressionSettings(1));
                archive.Save("archive.xar");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Xar.XarBzip2CompressionSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Xar.XarBzip2CompressionSettings" /> class with default block size, equals to 9 hundred of kilobytes.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Xar.XarCompressionSettings">
      <summary>
            Settings needed for compressor to work.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Xar.XarStoreCompressionSettings">
      <summary>
            Settings for Store compression method.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Xar.XarZlibCompressionSettings">
      <summary>
            Settings for Zlib compression method.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Xar.XarDirectoryEntry">
      <summary>
             Represents directory entry within xar archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Xar.XarDirectoryEntry.FilesAndDirectories">
      <summary>
            Gets entries of <see cref="T:Aspose.Zip.Xar.XarEntry" /> type constituting the directory.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Xar.XarDirectoryEntry.Directories">
      <summary>
            Gets entries of <see cref="T:Aspose.Zip.Xar.XarDirectoryEntry" /> type constituting the directory.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Xar.XarDirectoryEntry.Files">
      <summary>
            Gets entries of <see cref="T:Aspose.Zip.Xar.XarFileEntry" /> type constituting the directory.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Xar.XarDirectoryEntry.AllEntries">
      <summary>
            Gets all entries of <see cref="T:Aspose.Zip.Xar.XarEntry" /> type constituting the directory recursively.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Xar.XarDirectoryEntry.ExtractToDirectory(System.String)">
      <summary>
            Extracts all the files in the current directory to the directory provided.
            </summary>
      <param name="destinationDirectory">The path to the directory to place the extracted files in.</param>
      <remarks>If the directory does not exist, it will be created.</remarks>
      <exception cref="T:System.ArgumentNullException">path is null</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access existing directory.</exception>
      <exception cref="T:System.NotSupportedException">If directory does not exist, path contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the System.IO.Path.GetInvalidPathChars method. -or- path is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.IO.IOException">The directory specified by path is a file. -or- The network name is not known.</exception>
      <example>
        <code>
            using (var archive = new XarArchive("archive.xar")) 
            {
               archive.Directories.First().ExtractToDirectory("C:\\extracted");
            }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Zip.Xar.XarEntry">
      <summary>
             Represents single entry within xar archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Xar.XarEntry.Name">
      <summary>
            Gets name of the entry within archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Xar.XarEntry.FullPath">
      <summary>
            Gets full path of the entry within archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Xar.XarEntry.IsDirectory">
      <summary>
            Gets a value indicating whether the entry represents directory.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Xar.XarEntry.Parent">
      <summary>
            Gets the parent directory the entry belongs to.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Xar.XarEntry.CreationTime">
      <summary>
            Gets the creation time of the file or directory.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Xar.XarEntry.LastAccessTime">
      <summary>
            Gets the last access time of the file or directory.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Xar.XarEntry.LastWriteTime">
      <summary>
            Gets the modification time of the file or directory.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Xar.XarEntry.ToString">
      <inheritdoc />
    </member>
    <member name="T:Aspose.Zip.Xar.XarArchive">
      <summary>
            This class represents xar archive file.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Xar.XarArchive.Entries">
      <summary>
            Gets entries of <see cref="T:Aspose.Zip.Xar.XarEntry" /> type constituting the archive.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Xar.XarArchive.#ctor(Aspose.Zip.Xar.XarCompressionSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Xar.XarArchive" /> class.
            </summary>
      <param name="defaultCompressionSettings">The default compression settings, applyed to all entries of the archive.</param>
      <example>
        <para>The following example shows how to compress a file.</para>
        <code>
            using (var archive = new XarArchive())
            {
                archive.CreateEntry("first.bin", "data.bin");
                archive.Save("archive.xar");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Xar.XarArchive.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Xar.XarArchive" /> class and composes entries list can be extracted from the archive.
            </summary>
      <remarks>
            This constructor does not unpack any entry. See <see cref="M:Aspose.Zip.Xar.XarFileEntry.Open" /> method for unpacking.
            </remarks>
      <param name="sourceStream">The source of the archive. It must be seekable.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceStream" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceStream" /> is not seekable.</exception>
      <exception cref="T:System.IO.InvalidDataException">
        <paramref name="sourceStream" /> is not valid xar archive.</exception>
      <example>
        <para>The following example shows how to extract all of the entries to a directory.</para>
        <code>
            using (var archive = new XarArchive(File.OpenRead("archive.xar")))
            {
               archive.ExtractToDirectory("C:\\extracted");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Xar.XarArchive.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Xar.XarArchive" /> class and composes entries list can be extracted from the archive.
            </summary>
      <remarks>
            This constructor does not unpack any entry. See <see cref="M:Aspose.Zip.Xar.XarFileEntry.Open" /> method for unpacking.
            </remarks>
      <param name="path">The path to the archive file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <para>The following example shows how to extract all of the entries to a directory.</para>
        <code>
            using (var archive = new XarArchive("archive.xar")) 
            {
               archive.ExtractToDirectory("C:\\extracted");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Xar.XarArchive.ExtractToDirectory(System.String)">
      <summary>
            Extracts all the files in the archive to the directory provided.
            </summary>
      <param name="destinationDirectory">The path to the directory to place the extracted files in.</param>
      <remarks>If the directory does not exist, it will be created.</remarks>
      <exception cref="T:System.ArgumentNullException">path is null</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access existing directory.</exception>
      <exception cref="T:System.NotSupportedException">If directory does not exist, path contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the System.IO.Path.GetInvalidPathChars method. -or- path is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.IO.IOException">The directory specified by path is a file. -or- The network name is not known.</exception>
      <example>
        <code>
            using (var archive = new XarArchive("archive.xar")) 
            {
               archive.ExtractToDirectory("C:\\extracted");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Xar.XarArchive.CreateEntries(System.String,System.Boolean,Aspose.Zip.Xar.XarCompressionSettings)">
      <summary>
            Adds to the archive all the files and directories recursively in the directory given.
            </summary>
      <param name="sourceDirectory">Directory to compress.</param>
      <param name="compressionSettings">The compression settings used for added <see cref="T:Aspose.Zip.Xar.XarEntry" /> items.</param>
      <param name="includeRootDirectory">Indicates whether to include the root directory itself or not.</param>
      <returns>Xar entry instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirectory" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access <paramref name="sourceDirectory" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceDirectory" /> contains invalid characters such as ", &lt;, &gt;, or |.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="sourceDirectory" /> stands for a file, not for a directory.</exception>
      <example>
        <code>
            using (FileStream xarFile = File.Open("archive.xar", FileMode.Create))
            {
                using (var archive = new XarArchive())
                {
                    archive.CreateEntries(@"C:\folder", false);
                    archive.Save(xarFile);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Xar.XarArchive.CreateEntries(System.IO.DirectoryInfo,System.Boolean,Aspose.Zip.Xar.XarCompressionSettings)">
      <summary>
            Adds to the archive all the files and directories recursively in the directory given.
            </summary>
      <param name="directory">Directory to compress.</param>
      <param name="compressionSettings">The compression settings used for added <see cref="T:Aspose.Zip.Xar.XarEntry" /> items.</param>
      <param name="includeRootDirectory">Indicates whether to include the root directory itself or not.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access <paramref name="directory" />.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="directory" /> stands for a file, not for a directory.</exception>
      <returns>Xar entry instance.</returns>
      <example>
        <code>
            using (FileStream xarFile = File.Open("archive.xar", FileMode.Create))
            {
                using (var archive = new XarArchive())
                {
                    archive.CreateEntries(new DirectoryInfo(@"C:\folder"), false);
                    archive.Save(xarFile);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Xar.XarArchive.CreateEntry(System.String,System.IO.FileInfo,System.Boolean,Aspose.Zip.Xar.XarCompressionSettings)">
      <summary>
            Create single entry within the archive.
            </summary>
      <param name="name">The name of the entry.</param>
      <param name="fileInfo">The metadata of file or folder to be compressed.</param>
      <param name="openImmediately">True if open the file immediately, otherwise open the file on archive saving.</param>
      <param name="compressionSettings">The compression settings used for added <see cref="T:Aspose.Zip.Xar.XarEntry" /> item.</param>
      <returns>Xar entry instance.</returns>
      <remarks>
        <para>If the file is opened immediately with <paramref name="openImmediately" /> parameter it becomes blocked until archive is disposed.</para>
      </remarks>
      <example>
        <code>
            FileInfo fileInfo = new FileInfo("data.bin");
            using (var archive = new XarArchive())
            {
                archive.CreateEntry("test.bin", fileInfo);
                archive.Save("archive.xar");
            }
            </code>
      </example>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileInfo" /> is null.</exception>
    </member>
    <member name="M:Aspose.Zip.Xar.XarArchive.CreateEntry(System.String,System.String,System.Boolean,Aspose.Zip.Xar.XarCompressionSettings)">
      <summary>
            Create single entry within the archive.
            </summary>
      <param name="name">The name of the entry.</param>
      <param name="sourcePath">Path to file to be compressed.</param>
      <param name="openImmediately">True if open the file immediately, otherwise open the file on archive saving.</param>
      <param name="compressionSettings">The compression settings used for added <see cref="T:Aspose.Zip.Xar.XarEntry" /> item.</param>
      <returns>Xar entry instance.</returns>
      <remarks>
        <para>The entry name is solely set within <paramref name="name" /> parameter. The file name provided in <paramref name="sourcePath" /> parameter does not affect the entry name.</para>
        <para>If the file is opened immediately with <paramref name="openImmediately" /> parameter it becomes blocked until archive is disposed.</para>
      </remarks>
      <example>
        <code>
            using (var archive = new XarArchive())
            {
                archive.CreateEntry("first.bin", "data.bin");
                archive.Save("archive.xar");
            }
            </code>
      </example>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePath" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="sourcePath" /> is empty, contains only white spaces, or contains invalid characters. - or - File name, as a part of <paramref name="name" />, exceeds 100 symbols.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="sourcePath" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="sourcePath" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. - or - <paramref name="name" /> is too long for xar.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="sourcePath" /> contains a colon (:) in the middle of the string.</exception>
      <exception cref="T:System.InvalidOperationException">Impossible to modify xar archive.</exception>
    </member>
    <member name="M:Aspose.Zip.Xar.XarArchive.CreateEntry(System.String,System.IO.Stream,Aspose.Zip.Xar.XarCompressionSettings)">
      <summary>
            Create single entry within the archive.
            </summary>
      <param name="name">The name of the entry.</param>
      <param name="source">The input stream for the entry.</param>
      <param name="compressionSettings">The compression settings used for added <see cref="T:Aspose.Zip.Xar.XarEntry" /> item.</param>
      <returns>Xar entry instance.</returns>
      <example>
        <code>
            using (var archive = new XarArchive())
            {
                archive.CreateEntry("data.bin", File.OpenRead("data.bin"));
                archive.Save("archive.xar");
            }
            </code>
      </example>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.</exception>
      <exception cref="T:System.InvalidOperationException">Impossible to modify xar archive.</exception>
    </member>
    <member name="M:Aspose.Zip.Xar.XarArchive.Save(System.String)">
      <summary>
            Saves archive to destination file provided.
            </summary>
      <param name="destinationFileName">The path of the archive to be created. If the specified file name points to an existing file, it will be overwritten.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Impossible to modify xar archive.</exception>
    </member>
    <member name="M:Aspose.Zip.Xar.XarArchive.Save(System.IO.Stream)">
      <summary>
            Saves archive to the stream provided.
            </summary>
      <param name="output">Destination stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="output" />Is not writable/readable or not seekable.</exception>
      <exception cref="T:System.InvalidOperationException">Impossible to modify xar archive.</exception>
    </member>
    <member name="M:Aspose.Zip.Xar.XarArchive.DeleteEntry(Aspose.Zip.Xar.XarEntry)">
      <summary>
            Removes the first occurrence of a specific entry from the entries list.
            </summary>
      <param name="entry">The entry to remove from the entries list.</param>
      <returns>Xar entry instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entry" /> is null.</exception>
      <example>
        <para>Here is how you can remove all entries except the last one:</para>
        <code>
            using (var archive = new XarArchive("archive.xar"))
            {
                while (archive.Entries.Count &gt; 1)
                    archive.DeleteEntry(archive.Entries.FirstOrDefault());
                archive.Save(outputXarFile);
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Xar.XarArchive.Dispose">
      <inheritdoc />
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Xar.XarArchive.Dispose(System.Boolean)">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <param name="disposing">Whether managed resources should be disposed.</param>
    </member>
    <member name="T:Aspose.Zip.Xar.XarFileEntry">
      <summary>
             Represents file entry within xar archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Xar.XarFileEntry.Length">
      <summary>
            Gets the length of the entry in bytes.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Xar.XarFileEntry.Open">
      <summary>
            Opens the entry for extraction and provides a stream with entry content.
            </summary>
      <returns>The stream that represents the contents of the entry.</returns>
      <remarks>
            Read from the stream to get original content of file. See examples section.
            </remarks>
      <example>
            Usage:
            <code>Stream decompressed = entry.Open();</code><para>
            .NET 4.0 and higher - use Stream.CopyTo method:
            <code>
            decompressed.CopyTo(httpResponse.OutputStream)
            </code></para><para>
            .NET 3.5 and before - copy bytes manually:
            <code>
            byte[] buffer = new byte[8192];
            int bytesRead;
            while (0 &lt; (bytesRead = decompressed.Read(buffer, 0, buffer.Length)))
             fileStream.Write(buffer, 0, bytesRead);
            </code></para></example>
    </member>
    <member name="M:Aspose.Zip.Xar.XarFileEntry.Extract(System.String)">
      <summary>
            Extracts the entry to the filesystem by the path provided.
            </summary>
      <param name="path">The path to destination file. If the file already exists, it will be overwritten.</param>
      <returns>The file info of composed file.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (var archive = new XarArchive("archive.xar"))
            {
                archive.Entries.First().Extract("data.bin");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Xar.XarFileEntry.Extract(System.IO.Stream)">
      <summary>
            Extracts the entry to the stream provided.
            </summary>
      <param name="destination">Destination stream. Must be writable.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not support writing.</exception>
      <example>
        <para>Extract an entry of wim archive.</para>
        <code>
            using (var archive = new WimArchive("archive.wim"))
            {
                archive.Images[0].RootDirectory.Files[0].Extract(httpResponseStream);
            }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Zip.LZMA.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Zip.LZMA" /> namespace contains classes which represent lzma archive related entities.
            </summary>
    </member>
    <member name="T:Aspose.Zip.LZMA.LzmaArchive">
      <summary>
            This class represents LZMA archive file. Use it to compose or extract LZMA archives.
            </summary>
    </member>
    <member name="M:Aspose.Zip.LZMA.LzmaArchive.#ctor(Aspose.Zip.LZMA.LzmaArchiveSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.LZMA.LzmaArchive" /> class and composes the archive in lzma format.
            </summary>
      <param name="settings">Set of setting particular lzma archive.</param>
    </member>
    <member name="M:Aspose.Zip.LZMA.LzmaArchive.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.LZMA.LzmaArchive" /> class prepared for decompressing.
            </summary>
      <param name="source">The source of the archive.</param>
      <remarks>
            This constructor does not decompress. See <see cref="M:Aspose.Zip.LZMA.LzmaArchive.Extract(System.IO.Stream)" /> method for decompressing.
            </remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> is not seekable.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:Aspose.Zip.LZMA.LzmaArchive.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.LZMA.LzmaArchive" /> class prepared for decompressing.
            </summary>
      <param name="path">Path to the source of the archive.</param>
      <remarks>
            This constructor does not decompress. See <see cref="M:Aspose.Zip.LZMA.LzmaArchive.Extract(System.IO.Stream)" /> method for decompressing.
            </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code> 
            using (FileStream extractedFile = File.Open(extractedFileName, FileMode.Create))
            {
                using (var archive = new LzmaArchive(sourceLzmaFile))
                {
                     archive.Extract(extractedFile);
                }
               }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.LZMA.LzmaArchive.Dispose">
      <inheritdoc />
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Aspose.Zip.LZMA.LzmaArchive.Extract(System.IO.Stream)">
      <summary>
            Extracts lzma archive to a stream.
            </summary>
      <param name="destination">Stream for storing decompressed data.</param>
      <exception cref="T:System.InvalidOperationException">Archive headers and service information were not read.</exception>
      <exception cref="T:System.IO.InvalidDataException">Error in data in header or checksum.</exception>
      <exception cref="T:System.ArgumentNullException">Destination stream is null.</exception>
      <exception cref="T:System.ArgumentException">Destination stream does not support writing.</exception>
      <example>
        <code>
            using (FileStream sourceLzmaFile = File.Open(sourceFileName, FileMode.Open))
            {
               using (FileStream extractedFile = File.Open(extractedFileName, FileMode.Create))
               {
                   using (var archive = new LzmaArchive(sourceLzmaFile))
                   {
                       archive.Extract(extractedFile);
                   }
               }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.LZMA.LzmaArchive.Extract(System.IO.FileInfo)">
      <summary>
            Extracts lzma archive to a file.
            </summary>
      <param name="fileInfo">FileInfo for storing decompressed data.</param>
      <exception cref="T:System.InvalidOperationException">Archive headers and service information were not read.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to open the <paramref name="fileInfo" />.</exception>
      <exception cref="T:System.ArgumentException">File path is empty or contains only white spaces.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Path to file is read-only or is a directory.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileInfo" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.IO.IOException">The file is already open.</exception>
      <example>
        <code>
            using (FileStream lzmaFile = File.Open(sourceFileName, FileMode.Open))
            {
                using (var archive = new LzmaArchive(lzmaFile))
                {
                    archive.Extract(new FileInfo("extracted.bin"));
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.LZMA.LzmaArchive.Extract(System.String)">
      <summary>
            Extracts lzma archive to a file by path.
            </summary>
      <param name="path">Path to file which will store decompressed data.</param>
      <exception cref="T:System.InvalidOperationException">Archive headers and service information were not read.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (FileStream lzmaFile = File.Open(sourceFileName, FileMode.Open))
            {
                using (var archive = new LzmaArchive(lzmaFile))
                {
                    archive.Extract("extracted.bin");
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.LZMA.LzmaArchive.ExtractToDirectory(System.String)">
      <summary>
            Extracts content of the archive to the directory provided.
            </summary>
      <param name="destinationDirectory">The path to the directory to place the extracted files in.</param>
      <remarks>If the directory does not exist, it will be created.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectory" /> is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access existing directory.</exception>
      <exception cref="T:System.NotSupportedException">If directory does not exist, path contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationDirectory" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the System.IO.Path.GetInvalidPathChars method. 
            -or- path is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.IO.IOException">The directory specified by path is a file. -or- The network name is not known.</exception>
    </member>
    <member name="M:Aspose.Zip.LZMA.LzmaArchive.SetSource(System.IO.Stream)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="source">The input stream for the archive.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="source" /> stream is unseekable.</exception>
      <example>
        <code>
            using (var archive = new LzmaArchive())
            {
                archive.SetSource(new MemoryStream(new byte[] { 0x00, 0xFF }));
                archive.Save("archive.lzma");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.LZMA.LzmaArchive.SetSource(System.IO.FileInfo)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="fileInfo">FileInfo which will be opened as input stream.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to open the <paramref name="fileInfo" />.</exception>
      <exception cref="T:System.ArgumentException">File path is empty or contains only white spaces.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Path to file is read-only or is a directory.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileInfo" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.IO.IOException">The file is already open.</exception>
      <example>
        <code>
            using (var archive = new LzmaArchive()) 
            {
                archive.SetSource(new FileInfo("data.bin"));
                archive.Save("archive.lzma");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.LZMA.LzmaArchive.SetSource(System.String)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="sourcePath">Path to file which will be opened as input stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePath" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="sourcePath" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="sourcePath" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="sourcePath" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="sourcePath" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (var archive = new LzmaArchive()) 
            {
                archive.SetSource("data.bin");
                archive.Save("archive.lzma");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.LZMA.LzmaArchive.Save(System.IO.Stream)">
      <summary>
            Saves lzma archive to the stream provided.
            </summary>
      <param name="output">Destination stream.</param>
      <remarks>
        <para>
          <paramref name="output" /> must be seekable.</para>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="output" /> does not support seeking.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> is null.</exception>
      <example>
        <code>
            using (FileStream lzmaFile = File.Open("archive.lzma", FileMode.Create))
            {
                using (var archive = new LzmaArchive())
                {
                    archive.SetSource("data.bin");
                    archive.Save(lzmaFile);
                 }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.LZMA.LzmaArchive.Save(System.IO.FileInfo)">
      <summary>
            Saves lzma archive to destination file provided.
            </summary>
      <param name="destination">FileInfo which will be opened as destination stream.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to open the <paramref name="destination" />.</exception>
      <exception cref="T:System.ArgumentException">File path is empty or contains only white spaces.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Path to file is read-only or is a directory.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.IO.IOException">The file is already open.</exception>
      <example>
        <code>
            using (var archive = new LzmaArchive()) 
            {
                archive.SetSource(new FileInfo("data.bin"));
                archive.Save(new FileInfo("archive.lzma"));
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.LZMA.LzmaArchive.Save(System.String)">
      <summary>
            Saves lzma archive to destination file provided.
            </summary>
      <param name="destinationFileName">The path of the archive to be created. If the specified file name points to an existing file, it will be overwritten.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="destinationFileName" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="destinationFileName" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="destinationFileName" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="destinationFileName" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (var archive = new LzmaArchive()) 
            {
                archive.SetSource(new FileInfo("data.bin"));
                archive.Save("result.lzma");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.LZMA.LzmaArchive.Dispose(System.Boolean)">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <param name="disposing">Whether managed resources should be disposed.</param>
    </member>
    <member name="T:Aspose.Zip.LZMA.LzmaArchiveSettings">
      <inheritdoc />
      <summary>
            Settings for LZMA compression method within lzma archive.
            </summary>
      <remarks>
        <para>
            The Lempel–Ziv–Markov chain algorithm (LZMA) is an algorithm used to perform lossless data compression.
            This algorithm uses a dictionary compression scheme somewhat similar to the LZ77 algorithm and features a high compression ratio and a variable compression-dictionary size.
            </para>
        <para>
            See more: https://en.wikipedia.org/wiki/Lempel–Ziv–Markov_chain_algorithm </para>
      </remarks>
    </member>
    <member name="M:Aspose.Zip.LZMA.LzmaArchiveSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.LZMA.LzmaArchiveSettings" /> class with default dictionary size, equals to 16 megabytes.
            </summary>
      <example>
        <code>
            using (LzmaArchive archive = new LzmaArchive(new LzmaArchiveSettings() { DictionarySize = 1048576 } )
            {
                archive.SetSource("data.bin);
                archive.Save(lzmaFile);
            }
            </code>
      </example>
    </member>
    <member name="P:Aspose.Zip.LZMA.LzmaArchiveSettings.DictionarySize">
      <summary>
            Dictionary (history buffer) size indicates how many bytes of the recently processed uncompressed data is kept in memory.
            If not set, will be chosen accordingly to entry size.
            </summary>
      <remarks>The bigger the dictionary, the better the compression ratio usually is, but dictionaries bigger than the uncompressed data are waste of RAM. </remarks>
    </member>
    <member name="T:Aspose.Zip.Snappy.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Zip.Snappy" /> namespace contains classes for Snappy compressed data manipulation.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Snappy.SnappyArchive">
      <summary>
            This class represents snappy archive file. Use it to compose or extract snappy archives.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Snappy.SnappyArchive.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Snappy.SnappyArchive" /> class prepared for compressing.
            </summary>
      <example>
        <para>
            The following example shows how to compress a file.
            </para>
        <code>
            using (SnappyArchive archive = new SnappyArchive()) 
            {
                archive.SetSource("data.bin");
                archive.Save("archive.snapy");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Snappy.SnappyArchive.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Snappy.SnappyArchive" /> class prepared for decompressing.
            </summary>
      <param name="source">The source of the archive.</param>
      <remarks>
            This constructor does not decompress. See <see cref="M:Aspose.Zip.Snappy.SnappyArchive.Extract(System.IO.Stream)" /> method for decompressing.
            </remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> is not seekable.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:Aspose.Zip.Snappy.SnappyArchive.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Snappy.SnappyArchive" /> class prepared for decompressing.
            </summary>
      <param name="path">Path to the source of the archive.</param>
      <remarks>
            This constructor does not decompress. See <see cref="M:Aspose.Zip.Snappy.SnappyArchive.Extract(System.IO.Stream)" /> method for decompressing.
            </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code> 
            using (FileStream extractedFile = File.Open(extractedFileName, FileMode.Create))
            {
                using (var archive = new SnappyArchive(sourceSnappyFile))
                {
                     archive.Extract(extractedFile);
                }
               }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Snappy.SnappyArchive.Dispose">
      <inheritdoc />
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Snappy.SnappyArchive.Extract(System.IO.Stream)">
      <summary>
            Extracts snappy archive to a stream.
            </summary>
      <param name="destination">Stream for storing decompressed data.</param>
      <exception cref="T:System.InvalidOperationException">Archive headers and service information were not read.</exception>
      <exception cref="T:System.IO.InvalidDataException">Error in data in header or checksum.</exception>
      <exception cref="T:System.ArgumentNullException">Destination stream is null.</exception>
      <exception cref="T:System.ArgumentException">Destination stream does not support writing.</exception>
      <example>
        <code>
            using (FileStream sourceSnappyFile = File.Open(sourceFileName, FileMode.Open))
            {
               using (FileStream extractedFile = File.Open(extractedFileName, FileMode.Create))
               {
                   using (var archive = new SnappyArchive(sourceSnappyFile))
                   {
                       archive.Extract(extractedFile);
                   }
               }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Snappy.SnappyArchive.Extract(System.IO.FileInfo)">
      <summary>
            Extracts snappy archive to a file.
            </summary>
      <param name="fileInfo">FileInfo for storing decompressed data.</param>
      <exception cref="T:System.InvalidOperationException">Archive headers and service information were not read.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to open the <paramref name="fileInfo" />.</exception>
      <exception cref="T:System.ArgumentException">File path is empty or contains only white spaces.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Path to file is read-only or is a directory.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileInfo" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.IO.IOException">The file is already open.</exception>
      <example>
        <code>
            using (FileStream snappyFile = File.Open(sourceFileName, FileMode.Open))
            {
                using (var archive = new SnappyArchive(snappyFile))
                {
                    archive.Extract(new FileInfo("extracted.bin"));
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Snappy.SnappyArchive.Extract(System.String)">
      <summary>
            Extracts snappy archive to a file by path.
            </summary>
      <param name="path">Path to file which will store decompressed data.</param>
      <returns>
        <see cref="T:System.IO.FileInfo" /> instance containing extracted data.</returns>
      <exception cref="T:System.InvalidOperationException">Archive headers and service information were not read.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (FileStream snappyFile = File.Open(sourceFileName, FileMode.Open))
            {
                using (var archive = new SnappyArchive(snappyFile))
                {
                    archive.Extract("extracted.bin");
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Snappy.SnappyArchive.ExtractToDirectory(System.String)">
      <summary>
            Extracts content of the archive to the directory provided.
            </summary>
      <param name="destinationDirectory">The path to the directory to place the extracted files in.</param>
      <remarks>If the directory does not exist, it will be created.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectory" /> is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access existing directory.</exception>
      <exception cref="T:System.NotSupportedException">If directory does not exist, path contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationDirectory" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the System.IO.Path.GetInvalidPathChars method. 
            -or- path is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.IO.IOException">The directory specified by path is a file. -or- The network name is not known.</exception>
    </member>
    <member name="M:Aspose.Zip.Snappy.SnappyArchive.SetSource(System.IO.Stream)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="source">The input stream for the archive.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="source" /> stream is unseekable.</exception>
      <example>
        <code>
            using (var archive = new SnappyArchive())
            {
                archive.SetSource(new MemoryStream(new byte[] { 0x00, 0xFF }));
                archive.Save("archive.snappy");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Snappy.SnappyArchive.SetSource(System.IO.FileInfo)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="fileInfo">FileInfo which will be opened as input stream.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to open the <paramref name="fileInfo" />.</exception>
      <exception cref="T:System.ArgumentException">File path is empty or contains only white spaces.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Path to file is read-only or is a directory.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileInfo" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.IO.IOException">The file is already open.</exception>
      <example>
        <code>
            using (var archive = new SnappyArchive()) 
            {
                archive.SetSource(new FileInfo("data.bin"));
                archive.Save("archive.snappy");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Snappy.SnappyArchive.SetSource(System.String)">
      <summary>
            Sets the content to be compressed within the archive.
            </summary>
      <param name="sourcePath">Path to file which will be opened as input stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePath" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="sourcePath" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="sourcePath" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="sourcePath" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="sourcePath" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (var archive = new SnappyArchive()) 
            {
                archive.SetSource("data.bin");
                archive.Save("archive.snappy");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Snappy.SnappyArchive.Save(System.IO.Stream)">
      <summary>
            Saves snappy archive to the stream provided.
            </summary>
      <param name="output">Destination stream.</param>
      <remarks>
        <para>
          <paramref name="output" /> must be seekable.</para>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="output" /> does not support seeking.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> is null.</exception>
      <example>
        <code>
            using (FileStream snappyFile = File.Open("archive.snappy", FileMode.Create))
            {
                using (var archive = new SnappyArchive())
                {
                    archive.SetSource("data.bin");
                    archive.Save(snappyFile);
                 }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Snappy.SnappyArchive.Save(System.IO.FileInfo)">
      <summary>
            Saves snappy archive to destination file provided.
            </summary>
      <param name="destination">FileInfo which will be opened as destination stream.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to open the <paramref name="destination" />.</exception>
      <exception cref="T:System.ArgumentException">File path is empty or contains only white spaces.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Path to file is read-only or is a directory.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.IO.IOException">The file is already open.</exception>
      <example>
        <code>
            using (var archive = new SnappyArchive()) 
            {
                archive.SetSource(new FileInfo("data.bin"));
                archive.Save(new FileInfo("archive.snappy"));
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Snappy.SnappyArchive.Save(System.String)">
      <summary>
            Saves snappy archive to destination file provided.
            </summary>
      <param name="destinationFileName">The path of the archive to be created. If the specified file name points to an existing file, it will be overwritten.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="destinationFileName" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="destinationFileName" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="destinationFileName" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="destinationFileName" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (var archive = new SnappyArchive()) 
            {
                archive.SetSource(new FileInfo("data.bin"));
                archive.Save("result.snappy");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Snappy.SnappyArchive.Dispose(System.Boolean)">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <param name="disposing">Whether managed resources should be disposed.</param>
    </member>
    <member name="T:Aspose.Zip.Shar.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Zip.Shar" /> namespace contains classes which represent shar archive related entities.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Shar.SharArchive">
      <summary>
            This class represents shar archive file.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Shar.SharArchive.Entries">
      <summary>
            Gets entries of <see cref="T:Aspose.Zip.Shar.SharEntry" /> type constituting the archive.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Shar.SharArchive.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Shar.SharArchive" /> class.
            </summary>
      <example>
        <para>The following example shows how to compress a file.</para>
        <code>
            using (var archive = new SharArchive())
            {
                archive.CreateEntry("first.bin", "data.bin");
                archive.Save("archive.shar");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Shar.SharArchive.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Shar.SharArchive" /> class prepared for decompressing.
            </summary>
      <param name="path">Path to the source of the archive.</param>
    </member>
    <member name="M:Aspose.Zip.Shar.SharArchive.CreateEntries(System.String,System.Boolean)">
      <summary>
            Adds to the archive all the files and directories recursively in the directory given.
            </summary>
      <param name="sourceDirectory">Directory to compress.</param>
      <param name="includeRootDirectory">Indicates whether to include the root directory itself or not.</param>
      <returns>Shar entry instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirectory" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access <paramref name="sourceDirectory" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceDirectory" /> contains invalid characters such as ", &lt;, &gt;, or |.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="sourceDirectory" /> stands for a file, not for a directory.</exception>
      <example>
        <code>
            using (FileStream sharFile = File.Open("archive.shar", FileMode.Create))
            {
                using (var archive = new SharArchive())
                {
                    archive.CreateEntries("C:\folder", false);
                    archive.Save(sharFile);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Shar.SharArchive.CreateEntries(System.IO.DirectoryInfo,System.Boolean)">
      <summary>
            Adds to the archive all the files and directories recursively in the directory given.
            </summary>
      <param name="directory">Directory to compress.</param>
      <param name="includeRootDirectory">Indicates whether to include the root directory itself or not.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access <paramref name="directory" />.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="directory" /> stands for a file, not for a directory.</exception>
      <returns>Shar entry instance.</returns>
      <example>
        <code>
            using (FileStream sharFile = File.Open("archive.shar", FileMode.Create))
            {
                using (var archive = new SharArchive())
                {
                    archive.CreateEntries(new DirectoryInfo("C:\folder"), false);
                    archive.Save(sharFile);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Shar.SharArchive.CreateEntry(System.String,System.IO.FileInfo,System.Boolean)">
      <summary>
            Create single entry within the archive.
            </summary>
      <param name="name">The name of the entry.</param>
      <param name="fileInfo">The metadata of file or folder to be compressed.</param>
      <param name="openImmediately">True if open the file immediately, otherwise open the file on archive saving.</param>
      <returns>Shar entry instance.</returns>
      <remarks>
        <para>If the file is opened immediately with <paramref name="openImmediately" /> parameter it becomes blocked until archive is disposed.</para>
      </remarks>
      <example>
        <code>
            FileInfo fileInfo = new FileInfo("data.bin");
            using (var archive = new SharArchive())
            {
                archive.CreateEntry("test.bin", fileInfo);
                archive.Save("archive.shar");
            }
            </code>
      </example>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileInfo" /> is null.</exception>
    </member>
    <member name="M:Aspose.Zip.Shar.SharArchive.CreateEntry(System.String,System.String,System.Boolean)">
      <summary>
            Create single entry within the archive.
            </summary>
      <param name="name">The name of the entry.</param>
      <param name="sourcePath">Path to file to be compressed.</param>
      <param name="openImmediately">True if open the file immediately, otherwise open the file on archive saving.</param>
      <returns>Shar entry instance.</returns>
      <remarks>
        <para>The entry name is solely set within <paramref name="name" /> parameter. The file name provided in <paramref name="sourcePath" /> parameter does not affect the entry name.</para>
        <para>If the file is opened immediately with <paramref name="openImmediately" /> parameter it becomes blocked until archive is disposed.</para>
      </remarks>
      <example>
        <code>
            using (var archive = new SharArchive())
            {
                archive.CreateEntry("first.bin", "data.bin");
                archive.Save("archive.shar");
            }
            </code>
      </example>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePath" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="sourcePath" /> is empty, contains only white spaces, or contains invalid characters. - or - File name, as a part of <paramref name="name" />, exceeds 100 symbols.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="sourcePath" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="sourcePath" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. - or - <paramref name="name" /> is too long for shar.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="sourcePath" /> contains a colon (:) in the middle of the string.</exception>
    </member>
    <member name="M:Aspose.Zip.Shar.SharArchive.CreateEntry(System.String,System.IO.Stream)">
      <summary>
            Create single entry within the archive.
            </summary>
      <param name="name">The name of the entry.</param>
      <param name="source">The input stream for the entry.</param>
      <returns>Shar entry instance.</returns>
      <example>
        <code>
            using (var archive = new SharArchive())
            {
                archive.CreateEntry("data.bin", File.OpenRead("data.bin"));
                archive.Save("archive.shar");
            }
            </code>
      </example>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.</exception>
    </member>
    <member name="M:Aspose.Zip.Shar.SharArchive.DeleteEntry(Aspose.Zip.Shar.SharEntry)">
      <summary>
            Removes the first occurrence of a specific entry from the entries list.
            </summary>
      <param name="entry">The entry to remove from the entries list.</param>
      <returns>Shar entry instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entry" /> is null.</exception>
      <example>
        <para>Here is how you can remove all entries except the last one:</para>
        <code>
            using (var archive = new SharArchive("archive.shar"))
            {
                while (archive.Entries.Count &gt; 1)
                    archive.DeleteEntry(archive.Entries[0]);
                archive.Save(outputSharFile);
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Shar.SharArchive.DeleteEntry(System.Int32)">
      <summary>
            Removes the entry from the entries list by index.
            </summary>
      <param name="entryIndex">The zero-based index of the entry to remove.</param>
      <returns>The archive with the entry deleted.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="entryIndex" /> is less than 0.-or- <paramref name="entryIndex" /> is equal to or greater than <c>Entries</c> count.</exception>
      <example>
        <code>
            using (var archive = new SharArchive("two_files.shar"))
            {
                archive.DeleteEntry(0);
                archive.Save("single_file.shar");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Shar.SharArchive.Save(System.String)">
      <summary>
            Saves archive to destination file provided.
            </summary>
      <param name="destinationFileName">The path of the archive to be created. If the specified file name points to an existing file, it will be overwritten.</param>
      <remarks>
        <para>It is possible to save an archive to the same path as it was loaded from.
            However, this is not recommended because this approach uses copying to temporary file.</para>
      </remarks>
      <example>
        <code>
            using (var archive = new SharArchive())
            {
                archive.CreateEntry("entry1", "data.bin");        
                archive.Save("archive.shar");
            }       
            </code>
      </example>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationFileName" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified <paramref name="destinationFileName" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified <paramref name="destinationFileName" /> is invalid, (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="destinationFileName" /> specified a file that is read-only and access is not Read.-or- path specified a directory.-or- The caller does not have the required permission.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="destinationFileName" /> is in an invalid format.</exception>
    </member>
    <member name="M:Aspose.Zip.Shar.SharArchive.Save(System.IO.Stream)">
      <summary>
            Saves archive to the stream provided.
            </summary>
      <param name="output">Destination stream.</param>
      <remarks>
        <para>
          <paramref name="output" /> must be writable.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="output" /> is not writable. - or - <paramref name="output" /> is the same stream we extract from.</exception>
      <example>
        <code>
            using (FileStream sharFile = File.Open("archive.shar", FileMode.Create))
            {
                using (var archive = new SharArchive())
                {
                    archive.CreateEntry("entry1", "data.bin");        
                    archive.Save(sharFile);
                }
            }       
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Shar.SharArchive.Dispose(System.Boolean)">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <param name="disposing">Whether managed resources should be disposed.</param>
    </member>
    <member name="M:Aspose.Zip.Shar.SharArchive.Dispose">
      <inheritdoc />
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Shar.SharEntry">
      <summary>
             Represents single file within shar archive.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Shar.SharEntry.ToString">
      <inheritdoc />
      <summary>
            Returns a string that represents the current entry.
            </summary>
      <returns>A string that represents the current entry.</returns>
    </member>
    <member name="T:Aspose.Zip.Crypto.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Zip.Crypto" /> namespace contains classes for external encryption routines.
            </summary>
    </member>
    <member name="T:Aspose.Zip.Crypto.SevenZipCipher">
      <summary>
            Base class for AES cipher used for 7-zip encryption.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Crypto.SevenZipCipher.Salt">
      <summary>
            Gets the salt used for key initialization of AES algorithm.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Crypto.SevenZipCipher.Seed">
      <summary>
            Gets the seed used to compose initialization vector of AES algorithm.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Crypto.SevenZipCipher.NumberOfCyclesPower">
      <summary>
            Gets binary logarithm of the number of cycles used for AES key calculation. 
            </summary>
      <remarks>Default value is 19. Must not exceed 24.</remarks>
    </member>
    <member name="P:Aspose.Zip.Crypto.SevenZipCipher.LastBlockUnderflowSize">
      <summary>
            Gets the number of lacking bytes wihtin the last block.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Crypto.SevenZipCipher.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Crypto.SevenZipCipher" />.
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:Aspose.Zip.Crypto.SevenZipCipher.NumberOfCyclesPower" /> is too big.</exception>
    </member>
    <member name="M:Aspose.Zip.Crypto.SevenZipCipher.Dispose">
      <inheritdoc />
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Crypto.SevenZipCipher.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <inheritdoc />
      <summary>
            Transforms the specified region of the input byte array and copies the resulting transform to the specified region of the output byte array. 
            </summary>
      <param name="inputBuffer">The input for which to compute the transform.</param>
      <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
      <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
      <param name="outputBuffer">The output to which to write the transform.</param>
      <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
    </member>
    <member name="M:Aspose.Zip.Crypto.SevenZipCipher.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
      <inheritdoc />
      <summary>
            Transforms the specified region of the specified byte array.
            </summary>
      <param name="inputBuffer">The input for which to compute the transform.</param>
      <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
      <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
      <returns>The computed transform.</returns>
    </member>
    <member name="P:Aspose.Zip.Crypto.SevenZipCipher.CanReuseTransform">
      <inheritdoc />
      <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Crypto.SevenZipCipher.CanTransformMultipleBlocks">
      <inheritdoc />
      <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Crypto.SevenZipCipher.InputBlockSize">
      <inheritdoc />
      <summary>
            Gets the input block size.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Crypto.SevenZipCipher.OutputBlockSize">
      <inheritdoc />
      <summary>
            Gets the output block size.
            </summary>
    </member>
    <member name="T:Aspose.Zip.License">
      <summary>
             Provides methods to license the component.
             </summary>
      <example>
             In this example, an attempt will be made to find a license file named MyLicense.lic
             in the folder that contains 
             <ms>
             the component, in the folder that contains the calling assembly,
             in the folder of the entry assembly and then in the embedded resources of the calling assembly.
             <code>
             [C#]
             
             License license = new License();
             license.SetLicense("MyLicense.lic");
            
            
             [Visual Basic]
            
             Dim license As license = New license
             License.SetLicense("MyLicense.lic")
             </code></ms><java>
             the component jar file:
             <code>
             License license = new License();
             license.setLicense("MyLicense.lic");
             </code></java></example>
    </member>
    <member name="M:Aspose.Zip.License.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.License" /> class. 
            </summary>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            <ms>
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code></ms><java>
            the component jar file:
            <code>
            License license = new License();
            license.setLicense("MyLicense.lic");
            </code></java></example>
    </member>
    <member name="M:Aspose.Zip.License.SetLicense(System.String)">
      <summary>
            Licenses the component.
            </summary>
      <param name="licenseName">Can be a full or short file name or name of an embedded resource.
            Use an empty string to switch to evaluation mode.</param>
      <remarks>
        <p>Tries to find the license in the following locations:</p>
        <p>1. Explicit path.</p>
        <ms>
          <p>2. The folder that contains the Aspose component assembly.</p>
          <p>3. The folder that contains the client's calling assembly.</p>
          <p>4. The folder that contains the entry (startup) assembly.</p>
          <p>5. An embedded resource in the client's calling assembly.</p>
          <p>
            <b>Note:</b>On the .NET Compact Framework, tries to find the license only in these locations:</p>
          <p>1. Explicit path.</p>
          <p>2. An embedded resource in the client's calling assembly.</p>
        </ms>
        <java>
          <p>2. The folder that contains the Aspose component JAR file.</p>
          <p>3. The folder that contains the client's calling JAR file.</p>
        </java>
      </remarks>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            <ms>
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            </code></ms><java>
            the component jar file:
            <code>
            License license = new License();
            license.setLicense("MyLicense.lic");
            </code></java></example>
    </member>
    <member name="M:Aspose.Zip.License.SetLicense(System.IO.Stream)">
      <summary>
            Licenses the component.
            </summary>
      <param name="stream">A stream that contains the license.</param>
      <remarks>
        <p>Use this method to load a license from a stream.</p>
      </remarks>
      <example>
        <code>
          <ms>
            [C#]
            
            License license = new License();
            license.SetLicense(myStream);
            
            
            [Visual Basic]
            
            Dim license as License = new License
            license.SetLicense(myStream)
            </ms>
          <java>
            License license = new License();
            license.setLicense(myStream);
            </java>
        </code>
      </example>
      <javaName>void setLicense(java.io.InputStream stream)</javaName>
    </member>
    <member name="T:Aspose.Zip.Archive">
      <summary>
            This class represents zip archive file. Use it to compose, extract, or update zip archives.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Archive.#ctor(Aspose.Zip.Saving.ArchiveEntrySettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Archive" /> class with optional settings for its entries.
            </summary>
      <param name="newEntrySettings">Compression and encryption settings used for newly added <see cref="T:Aspose.Zip.ArchiveEntry" /> items.
            If not specified, most common Deflate compression without encryption would be used.</param>
      <example>
        <para>
            The following example shows how to compress a single file with default settings.
            </para>
        <code>
            using (FileStream zipFile = File.Open("archive.zip", FileMode.Create))
            {
                using (var archive = new Archive())
                {
                    archive.CreateEntry("data.bin", "file.dat");
                    archive.Save(zipFile);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Archive.#ctor(System.IO.Stream,Aspose.Zip.ArchiveLoadOptions,Aspose.Zip.Saving.ArchiveEntrySettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Archive" /> class and composes entries list can be extracted from the archive.
            </summary>
      <remarks>
            This constructor does not decompress any entry. See <see cref="M:Aspose.Zip.ArchiveEntry.Open(System.String)" /> method for decompressing.
            </remarks>
      <param name="sourceStream">The source of the archive.</param>
      <param name="loadOptions">Options to load existing archive with.</param>
      <param name="newEntrySettings">Compression and encryption settings used for newly added <see cref="T:Aspose.Zip.ArchiveEntry" /> items.
            If not specified, most common Deflate compression without encryption would be used.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceStream" /> is not seekable.</exception>
      <exception cref="T:System.IO.InvalidDataException">Encryption header for AES contradicts WinZip compression method.</exception>
      <example>
        <para>The following example extract an encrypted archive, then decompress first entry to a <c>MemoryStream</c>.</para>
        <code>
            var fs = File.OpenRead("encrypted.zip");
            var extracted = new MemoryStream();
            using (Archive archive = new Archive(fs, new ArchiveLoadOptions() { DecryptionPassword = "p@s$" }))
            {
                using (var decompressed = archive.Entries[0].Open())
                {
                    byte[] b = new byte[8192];
                    int bytesRead;
                    while (0 &lt; (bytesRead = decompressed.Read(b, 0, b.Length)))
                        extracted.Write(b, 0, bytesRead);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Archive.#ctor(System.String,Aspose.Zip.ArchiveLoadOptions,Aspose.Zip.Saving.ArchiveEntrySettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.Archive" /> class and composes entries list can be extracted from the archive.
            </summary>
      <remarks>
            This constructor does not decompress any entry. See <see cref="M:Aspose.Zip.ArchiveEntry.Open(System.String)" /> method for decompressing.
            </remarks>
      <param name="path">The fully qualified or the relative path to the archive file.</param>
      <param name="loadOptions">Options to load existing archive with.</param>
      <param name="newEntrySettings">Compression and encryption settings used for newly added <see cref="T:Aspose.Zip.ArchiveEntry" /> items.
            If not specified, most common Deflate compression without encryption would be used.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <para>The following example extract an encrypted archive, then decompress first entry to a <c>MemoryStream</c>.</para>
        <code>        
            var extracted = new MemoryStream();
            using (Archive archive = new Archive("encrypted.zip", new ArchiveLoadOptions() { DecryptionPassword = "p@s$" }))
            {
                using (var decompressed = archive.Entries[0].Open())
                {
                    byte[] b = new byte[8192];
                    int bytesRead;
                    while (0 &lt; (bytesRead = decompressed.Read(b, 0, b.Length)))
                        extracted.Write(b, 0, bytesRead);
                }
            }
            </code>
      </example>
    </member>
    <member name="P:Aspose.Zip.Archive.NewEntrySettings">
      <summary>
            Compression and encryption settings used for newly added <see cref="T:Aspose.Zip.ArchiveEntry" /> items.
            </summary>
    </member>
    <member name="P:Aspose.Zip.Archive.Entries">
      <summary>
            Gets entries of <see cref="T:Aspose.Zip.ArchiveEntry" /> type constituting the archive.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Archive.CreateEntry(System.String,System.String,System.Boolean,Aspose.Zip.Saving.ArchiveEntrySettings)">
      <summary>
            Create single entry within the archive.
            </summary>
      <param name="name">The name of the entry.</param>
      <param name="path">The fully qualified name of the new file, or the relative file name to be compressed.</param>
      <param name="openImmediately">True if open the file immediately, otherwise open the file on archive saving.</param>
      <param name="newEntrySettings">Compression and encryption settings used for added <see cref="T:Aspose.Zip.ArchiveEntry" /> item.</param>
      <returns>Zip entry instance.</returns>
      <remarks>
        <para>The entry name is solely set within <paramref name="name" /> parameter. The file name provided in <paramref name="path" /> parameter does not affect the entry name.</para>
        <para>If the file is opened immediately with <paramref name="openImmediately" /> parameter it becomes blocked until archive is saved.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (FileStream zipFile = File.Open("archive.zip", FileMode.Create))
            {
                using (var archive = new Archive())
                {
                    archive.CreateEntry("data.bin", "file.dat");
                    archive.Save(zipFile);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Archive.CreateEntry(System.String,System.IO.Stream,Aspose.Zip.Saving.ArchiveEntrySettings)">
      <summary>
            Create single entry within the archive.
            </summary>
      <param name="name">The name of the entry.</param>
      <param name="source">The input stream for the entry.</param>
      <param name="newEntrySettings">Compression and encryption settings used for added <see cref="T:Aspose.Zip.ArchiveEntry" /> item.</param>
      <returns>Zip entry instance.</returns>
      <example>
        <code>
            using (var archive = new Archive(new ArchiveEntrySettings(null, new AesEcryptionSettings("p@s$", EncryptionMethod.AES256))))
            {
                archive.CreateEntry("data.bin", new MemoryStream(new byte[] {0x00, 0xFF} ));
                archive.Save("archive.zip");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Archive.CreateEntry(System.String,System.IO.FileInfo,System.Boolean,Aspose.Zip.Saving.ArchiveEntrySettings)">
      <summary>
            Create single entry within the archive.
            </summary>
      <param name="name">The name of the entry.</param>
      <param name="fileInfo">The metadata of file to be compressed.</param>
      <param name="openImmediately">True if open the file immediately, otherwise open the file on archive saving.</param>
      <param name="newEntrySettings">Compression and encryption settings used for added <see cref="T:Aspose.Zip.ArchiveEntry" /> item.</param>
      <returns>Zip entry instance.</returns>
      <remarks>
        <para>The entry name is solely set within <paramref name="name" /> parameter. The file name provided in <paramref name="fileInfo" /> parameter does not affect the entry name.</para>
        <para>If the file is opened immediately with <paramref name="openImmediately" /> parameter it becomes blocked until archive is saved.</para>
      </remarks>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="fileInfo" /> is read-only or is a directory.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.IO.IOException">The file is already open.</exception>
      <example>
        <para>Compose archive with entries encrypted with different encryption methods and passwords each.</para>
        <code>
            using (FileStream zipFile = File.Open("archive.zip", FileMode.Create))
            {
                FileInfo fi1 = new FileInfo("data1.bin");
                FileInfo fi2 = new FileInfo("data2.bin");
                FileInfo fi3 = new FileInfo("data3.bin");
                using (var archive = new Archive())
                {
                    archive.CreateEntry("entry1.bin", fi1, false, new ArchiveEntrySettings(new DeflateCompressionSettings(), new TraditionalEncryptionSettings("pass1")));
                    archive.CreateEntry("entry2.bin", fi2, false, new ArchiveEntrySettings(new DeflateCompressionSettings(), new AesEcryptionSettings("pass2", EncryptionMethod.AES128)));
                    archive.CreateEntry("entry3.bin", fi3, false, new ArchiveEntrySettings(new DeflateCompressionSettings(), new AesEcryptionSettings("pass3", EncryptionMethod.AES256)));
                    archive.Save(zipFile);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Archive.CreateEntry(System.String,System.IO.Stream,Aspose.Zip.Saving.ArchiveEntrySettings,System.IO.FileSystemInfo)">
      <summary>
            Create single entry within the archive.
            </summary>
      <param name="name">The name of the entry.</param>
      <param name="source">The input stream for the entry.</param>
      <param name="newEntrySettings">Compression and encryption settings used for added <see cref="T:Aspose.Zip.ArchiveEntry" /> item.</param>
      <param name="fileInfo">The metadata of file or folder to be compressed.</param>
      <returns>Zip entry instance.</returns>
      <remarks>
        <para>The entry name is solely set within <paramref name="name" /> parameter. The file name provided in <paramref name="fileInfo" /> parameter does not affect the entry name.</para>
        <para>
          <paramref name="fileInfo" /> can refer to <see cref="T:System.IO.DirectoryInfo" /> if the entry is directory.</para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">Both <paramref name="source" /> and <paramref name="fileInfo" /> are null or <paramref name="source" /> is null and <paramref name="fileInfo" /> stands for directory.</exception>
      <example>
        <para>Compose archive with encrypted entry.</para>
        <code>
            using (FileStream zipFile = File.Open("archive.zip", FileMode.Create))
            {
                using (var archive = new Archive())
                {
                    archive.CreateEntry("entry1.bin", new MemoryStream(new byte[] {0x00, 0xFF} ), new ArchiveEntrySettings(new DeflateCompressionSettings(), new TraditionalEncryptionSettings("pass1")), new FileInfo("data1.bin")); 
                    archive.Save(zipFile);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Archive.CreateEntries(System.IO.DirectoryInfo,System.Boolean)">
      <summary>
            Adds to the archive all files and directories recursively in the directory given.
            </summary>
      <param name="directory">Directory to compress.</param>
      <param name="includeRootDirectory">Indicates whether to include the root directory itself or not.</param>
      <returns>The archive with entries composed.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path to <paramref name="directory" /> is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access <paramref name="directory" />.</exception>
      <example>
        <code>
            using (Archive archive = new Archive())
            {
                DirectoryInfo folder = new DirectoryInfo("C:\folder");
                archive.CreateEntries(folder);
                archive.Save("folder.zip");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Archive.CreateEntries(System.String,System.Boolean)">
      <summary>
            Adds to the archive all files and directories recursively in the directory given.
            </summary>
      <param name="sourceDirectory">Directory to compress.</param>
      <param name="includeRootDirectory">Indicates whether to include the root directory itself or not.</param>
      <returns>The archive with entries composed.</returns>
      <example>
        <code>
            using (Archive archive = new Archive())
            {
                archive.CreateEntries("C:\folder");
                archive.Save("folder.zip");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Archive.DeleteEntry(Aspose.Zip.ArchiveEntry)">
      <summary>
            Removes the first occurrence of a specific entry from the entries list.
            </summary>
      <param name="entry">The entry to remove from the entries list.</param>
      <returns>The archive with the entry deleted.</returns>
      <exception cref="T:System.ObjectDisposedException">Archive is disposed.</exception>
      <example>
        <para>Here is how you can remove all entries except the last one:</para>
        <code>
            using (var archive = new Archive("archive.zip"))
            {
                while (archive.Entries.Count &gt; 1)
                    archive.DeleteEntry(archive.Entries[0]);
                archive.Save("last_entry.zip");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Archive.DeleteEntry(System.Int32)">
      <summary>
            Removes the entry from the entries list by index.
            </summary>
      <param name="entryIndex">The zero-based index of the entry to remove.</param>
      <returns>The archive with the entry deleted.</returns>
            /// <exception cref="T:System.ObjectDisposedException">Archive is disposed.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="entryIndex" /> is less than 0.-or- <paramref name="entryIndex" /> is equal to or greater than <c>Entries</c> count.</exception><example><code>
            using (var archive = new TarArchive("two_files.zip"))
            {
                archive.DeleteEntry(0);
                archive.Save("single_file.zip");
            }
            </code></example></member>
    <member name="M:Aspose.Zip.Archive.Save(System.IO.Stream,Aspose.Zip.Saving.ArchiveSaveOptions)">
      <summary>
            Saves archive to the stream provided.
            </summary>
      <param name="outputStream">Destination stream.</param>
      <param name="saveOptions">Options for archive saving.</param>
      <remarks>
        <para>
          <paramref name="outputStream" /> must be writable.</para>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="outputStream" /> is not writable.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive is disposed.</exception>
      <example>
        <code>
             using (FileStream zipFile = File.Open("archive.zip", FileMode.Create))
             {
                 using (var archive = new Archive())
                 {
                     archive.CreateEntry("entry.bin", "data.bin");
                     archive.Save(zipFile);
                 }
             }
             </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Archive.SaveSplit(System.String,Aspose.Zip.Saving.SplitArchiveSaveOptions)">
      <summary>
             Saves multi-volume archive to destination directory provided.
            </summary>
      <remarks>
        <para>This method compose several (<c>n</c>) files filename.z01, filename.z02, ..., filename.z(n-1), filename.zip.</para>
        <para>Can not make existing archive multi-volume.</para>
      </remarks>
      <param name="destinationDirectory">The path to the directory where archive segments to be created.</param>
      <param name="options">Options for archive saving, including file name.</param>
      <example>
        <code>        
            using (Archive archive = new Archive())
            {
                archive.CreateEntry("entry.bin", "data.bin");
                archive.SaveSplit(@"C:\Folder",  new SplitArchiveSaveOptions("volume", 65536));
            }
             </code>
      </example>
      <exception cref="T:System.InvalidOperationException">This archive was opened from existing source.</exception>
      <exception cref="T:System.NotSupportedException">This archive is both compressed with XZ method and encrypted.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectory" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access the directory.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationDirectory" /> contains invalid characters such as ", &gt;, &lt;, or |.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.ObjectDisposedException">Archive is disposed.</exception>
    </member>
    <member name="M:Aspose.Zip.Archive.ExtractToDirectory(System.String)">
      <summary>
            Extracts all the files in the archive to the directory provided.
            </summary>
      <param name="destinationDirectory">The path to the directory to place the extracted files in.</param>
      <remarks>If the directory does not exist, it will be created.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectory" /> is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access existing directory.</exception>
      <exception cref="T:System.NotSupportedException">If directory does not exist, path contains a colon character (:) that is not part of a drive label ("C:\").</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationDirectory" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the System.IO.Path.GetInvalidPathChars method. 
            -or- path is prefixed with, or contains, only a colon character (:).</exception>
      <exception cref="T:System.IO.IOException">The directory specified by path is a file. -or- The network name is not known.</exception>
      <exception cref="T:System.IO.InvalidDataException">Wrong password has been supplied.</exception>
      <example>
        <code>
            using (var archive = new Archive("archive.zip")) 
            { 
               archive.ExtractToDirectory("C:\extracted");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Archive.Save(System.String,Aspose.Zip.Saving.ArchiveSaveOptions)">
      <summary>
            Saves archive to destination file provided.
            </summary>
      <param name="destinationFileName">The path of the archive to be created. If the specified file name points to an existing file, it will be overwritten.</param>
      <param name="saveOptions">Options for archive saving.</param>
      <remarks>
        <para>It is possible to save an archive to the same path as it was loaded from.
            However, this is not recommended because this approach uses copying to temporary file.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="destinationFileName" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="destinationFileName" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="destinationFileName" />, file name, or both exceed the system-defined maximum length. 
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="destinationFileName" /> contains a colon (:) in the middle of the string.</exception>
      <example>
        <code>
            using (var archive = new Archive())
            {
                archive.CreateEntry("entry.bin", "data.bin");
                archive.Save("archive.zip",  new ArchiveSaveOptions() { Encoding = Encoding.ASCII });
            }
             </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.Archive.Dispose">
      <inheritdoc />
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Aspose.Zip.Archive.Dispose(System.Boolean)">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <param name="disposing">Whether managed resources should be disposed.</param>
    </member>
    <member name="T:Aspose.Zip.ArchiveEntry">
      <summary>
            Represents single file within archive.
            </summary>
      <remarks>
            Cast an <see cref="T:Aspose.Zip.ArchiveEntry" /> instance to <see cref="T:Aspose.Zip.ArchiveEntryEncrypted" /> to determine whether the entry encrypted or not.
            </remarks>
    </member>
    <member name="M:Aspose.Zip.ArchiveEntry.#ctor(System.String,Aspose.Zip.Saving.CompressionSettings,System.IO.Stream,System.IO.FileAttributes,System.IO.FileSystemInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.ArchiveEntry" /> class.
            </summary>
      <param name="name">Entry name.</param>
      <param name="compressionSettings">Settings for compression or decompression.</param>
      <param name="source">Stream with entry data either to be compressed or to be decompressed.</param>
      <param name="fileAttributes">Attributes from file system.</param>
      <param name="fileInfo">File or directory info the entry based on.</param>
    </member>
    <member name="E:Aspose.Zip.ArchiveEntry.CompressionProgressed">
      <summary>
            Raises when a portion of raw stream compressed.
            </summary>
      <remarks>Event sender is an <see cref="T:Aspose.Zip.ArchiveEntry" /> instance.</remarks>
      <example>
        <code>
            archive.Entries[0].CompressionProgressed += (s, e) =&gt; { int percent = (int)((100 * (long)e.ProceededBytes) / entrySourceStream.Length); };
            </code>
      </example>
    </member>
    <member name="E:Aspose.Zip.ArchiveEntry.ExtractionProgressed">
      <summary>
            Raises when a portion of raw stream extracted.
            </summary>
      <remarks>Event sender is an <see cref="T:Aspose.Zip.ArchiveEntry" /> instance.</remarks>
      <example>
        <code>
            archive.Entries[0].ExtractionProgressed += (s, e) =&gt; {  int percent = (int)((100 * e.ProceededBytes) / ((ArchiveEntry)s).UncompressedSize); };
            </code>
      </example>
    </member>
    <member name="P:Aspose.Zip.ArchiveEntry.CompressedSize">
      <summary>
            Gets size of compressed file.
            </summary>
    </member>
    <member name="P:Aspose.Zip.ArchiveEntry.Name">
      <summary>
            Gets name of the entry within archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.ArchiveEntry.Comment">
      <summary>
            Gets comment of the entry within archive.
            </summary>
    </member>
    <member name="P:Aspose.Zip.ArchiveEntry.UncompressedSize">
      <summary>
            Gets size of original file.
            </summary>
    </member>
    <member name="P:Aspose.Zip.ArchiveEntry.ModificationTime">
      <summary>
            Gets or sets last modified date and time.
            </summary>
    </member>
    <member name="P:Aspose.Zip.ArchiveEntry.IsDirectory">
      <summary>
            Gets a value indicating whether the entry represents directory.
            </summary>
    </member>
    <member name="P:Aspose.Zip.ArchiveEntry.FileAttributes">
      <summary>
            Gets file attributes from host system.
            </summary>
    </member>
    <member name="P:Aspose.Zip.ArchiveEntry.CompressionSettings">
      <summary>
            Gets settings for compression or decompression.
            </summary>
    </member>
    <member name="M:Aspose.Zip.ArchiveEntry.Open(System.String)">
      <summary>
            Opens the entry for extraction and provides a stream with decompressed entry content.
            </summary>
      <param name="password">Optional password for decryption.</param>
      <returns>The stream that represents the contents of the entry.</returns>
      <exception cref="T:System.InvalidOperationException">The archive is in incorrect state.</exception>
      <remarks>
        <para>Read from the stream to get original content of file. See examples section.</para>
      </remarks>
      <example>
            Usage:
            <code>Stream decompressed = entry.Open();</code><para>
            .NET 4.0 and higher - use Stream.CopyTo method:
            <code>
            decompressed.CopyTo(httpResponse.OutputStream)
            </code></para><para>
            .NET 3.5 and before - copy bytes manually:
            <code>
            byte[] buffer = new byte[8192];
            int bytesRead;
            while (0 &lt; (bytesRead = decompressed.Read(buffer, 0, buffer.Length)))
             fileStream.Write(buffer, 0, bytesRead);
            </code></para></example>
    </member>
    <member name="M:Aspose.Zip.ArchiveEntry.Extract(System.String,System.String)">
      <summary>
            Extracts the entry to the filesystem by the path provided.
            </summary>
      <param name="path">The path to destination file. If the file already exists, it will be overwritten.</param>
      <param name="password">Optional password for decryption.</param>
      <returns>The file info of composed file.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to file <paramref name="path" /> is denied.</exception>
      <exception cref="T:System.IO.PathTooLongException"> The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">File at <paramref name="path" /> contains a colon (:) in the middle of the string.</exception>
      <exception cref="T:System.IO.InvalidDataException">CRC or MAC verification failed for the entry.</exception>
      <example>
        <para>Extract two entries of zip archive, each with own password</para>
        <code>
            using (FileStream zipFile = File.Open("archive.zip", FileMode.Open))
            {
                using (Archive archive = new Archive(zipFile))
                {
                    archive.Entries[0].Extract("first.bin", "first_pass");
                    archive.Entries[1].Extract("second.bin", "second_pass");
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Zip.ArchiveEntry.Extract(System.IO.Stream,System.String)">
      <summary>
            Extracts the entry to the stream provided.
            </summary>
      <param name="destination">Destination stream. Must be writable.</param>
      <param name="password">Optional password for decryption.</param>
      <exception cref="T:System.IO.InvalidDataException">CRC or MAC verification failed for the entry.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not support writing.</exception>
      <example>
        <para>Extract an entry of zip archive with password.</para>
        <code>
            using (FileStream zipFile = File.Open("archive.zip", FileMode.Open))
            {
                using (Archive archive = new Archive(zipFile))
                {
                    archive.Entries[0].Extract(httpResponseStream, "p@s$");
                }
            }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Zip.ArchiveEntryEncrypted">
      <inheritdoc />
      <summary>
            Zip entry that needs to be compressed with encryption or decompressed with decryption.
            </summary>
    </member>
    <member name="P:Aspose.Zip.ArchiveEntryEncrypted.EncryptionSettings">
      <summary>
            Gets settings for encryption or decryption.
            </summary>
    </member>
    <member name="T:Aspose.Zip.ArchiveEntryPlain">
      <inheritdoc />
      <summary>
            Zip entry that needs to be compressed without encryption or decompressed without decryption.
            </summary>
    </member>
    <member name="T:Aspose.Zip.ArchiveLoadOptions">
      <summary>
            Options with which archive is loaded from compressed file.
            </summary>
    </member>
    <member name="P:Aspose.Zip.ArchiveLoadOptions.DecryptionPassword">
      <summary>
            Gets or sets the password to decrypt entries.
            </summary>
      <example>
        <para>You can provide decryption password once on archive extraction.</para>
        <code>
            using (FileStream fs = File.OpenRead("encrypted_archive.zip"))
            {
                using (var extracted = File.Create("extracted.bin"))
                {
                    using (Archive archive = new Archive(fs, new ArchiveLoadOptions() { DecryptionPassword = "p@s$" }))
                    {
                        using (var decompressed = archive.Entries[0].Open())
                        {
                            byte[] b = new byte[8192];
                            int bytesRead;
                            while (0 &lt; (bytesRead = decompressed.Read(b, 0, b.Length)))
                                extracted.Write(b, 0, bytesRead);
                            
                        }
                    }
                }
            }
            </code>
      </example>
      <seealso cref="M:Aspose.Zip.ArchiveEntry.Open(System.String)" />
    </member>
    <member name="P:Aspose.Zip.ArchiveLoadOptions.EntryListed">
      <summary>
            Gets or sets the delegate invoked when an entry listed within table of content.
            </summary>
      <example>
        <code>
             Archive archive = new Archive("archive.zip", new ArchiveLoadOptions() { EntryListed = (s, e) =&gt; { Console.WriteLine(e.Entry.Name); } });
            </code>
      </example>
    </member>
    <member name="P:Aspose.Zip.ArchiveLoadOptions.EntryExtractionProgressed">
      <summary>
            Gets or sets the delegate invoked when some bytes have been extracted.
            </summary>
      <remarks>Event sender is the <see cref="T:Aspose.Zip.ArchiveEntry" /> instance which extraction is progressed.</remarks>
      <example>
        <code>
            Archive archive = new Archive("archive.zip", 
            new ArchiveLoadOptions() { EntryExtractionProgressed = (s, e) =&gt; { int percent = (int)((100 * e.ProceededBytes) / ((ArchiveEntry)s).UncompressedSize); } })                 
            </code>
      </example>
    </member>
    <member name="P:Aspose.Zip.ArchiveLoadOptions.Encoding">
      <summary>
            Gets or sets the encoding for entries' names.
            </summary>
      <example>
        <para>Entry name composed using specified encoding regardless of zip file properties.</para>
        <code>
            using (FileStream fs = File.OpenRead("archive.zip"))
            {      
                using (Archive archive = new Archive(fs, new ArchiveLoadOptions() { Encoding = System.Text.Encoding.GetEncoding(932) }))
                {
                    string name = archive.Entries[0].Name;
                }    
            }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Zip.CancelEntryEventArgs">
      <inheritdoc />
      <summary>
            Event arguments for cancelable entry related events.
            </summary>
    </member>
    <member name="P:Aspose.Zip.CancelEntryEventArgs.Cancel">
      <summary>
            Gets or sets a value indicating whether the event should be canceled.
            </summary>
      <returns>True if the event should be canceled; otherwise, false.</returns>
    </member>
    <member name="M:Aspose.Zip.CancelEntryEventArgs.#ctor(Aspose.Zip.ArchiveEntry)">
      <inheritdoc />
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.CancelEntryEventArgs" /> class.
            </summary>
      <param name="entry">Archive entry the event is raised for.</param>
    </member>
    <member name="T:Aspose.Zip.EntryEventArgs">
      <inheritdoc />
      <summary>
            Event arguments for entry related events.
            </summary>
      <seealso cref="P:Aspose.Zip.ArchiveLoadOptions.EntryListed" />
    </member>
    <member name="M:Aspose.Zip.EntryEventArgs.#ctor(Aspose.Zip.ArchiveEntry)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.EntryEventArgs" /> class.
            </summary>
      <param name="entry">Archive entry the event is raised for.</param>
    </member>
    <member name="P:Aspose.Zip.EntryEventArgs.Entry">
      <summary>
            Gets the archive entry the event is raised for.
            </summary>
    </member>
    <member name="T:Aspose.Zip.ProgressEventArgs">
      <summary>
            Class for event data containing the number of bytes proceeded.
            </summary>
    </member>
    <member name="M:Aspose.Zip.ProgressEventArgs.#ctor(System.UInt64)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Zip.ProgressEventArgs" /> class.
            </summary>
      <param name="proceededBytes">The number of bytes proceeded.</param>
    </member>
    <member name="P:Aspose.Zip.ProgressEventArgs.ProceededBytes">
      <summary>
            Gets the number of bytes proceeded.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "M:Aspose.Zip.Zstandard.Common.DoubleFastBlockCompressor.Count(System.Byte[],System.Int32,System.Int64,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Zip.Zstandard.Common.HuffmanCompressionTable.CompressWeights(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,Aspose.Zip.Zstandard.Common.HuffmanTableWriterWorkspace)" -->
  </members>
</doc>